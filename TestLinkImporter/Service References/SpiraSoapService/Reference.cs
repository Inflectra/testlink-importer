//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
    [System.SerializableAttribute()]
    public partial struct ServiceFaultMessage : System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StackTraceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TypeField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StackTrace {
            get {
                return this.StackTraceField;
            }
            set {
                if ((object.ReferenceEquals(this.StackTraceField, value) != true)) {
                    this.StackTraceField = value;
                    this.RaisePropertyChanged("StackTrace");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type {
            get {
                return this.TypeField;
            }
            set {
                if ((object.ReferenceEquals(this.TypeField, value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteComponent", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteComponent : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ComponentIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsDeletedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ProjectIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ComponentId {
            get {
                return this.ComponentIdField;
            }
            set {
                if ((this.ComponentIdField.Equals(value) != true)) {
                    this.ComponentIdField = value;
                    this.RaisePropertyChanged("ComponentId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsActive {
            get {
                return this.IsActiveField;
            }
            set {
                if ((this.IsActiveField.Equals(value) != true)) {
                    this.IsActiveField = value;
                    this.RaisePropertyChanged("IsActive");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsDeleted {
            get {
                return this.IsDeletedField;
            }
            set {
                if ((this.IsDeletedField.Equals(value) != true)) {
                    this.IsDeletedField = value;
                    this.RaisePropertyChanged("IsDeleted");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ProjectId {
            get {
                return this.ProjectIdField;
            }
            set {
                if ((this.ProjectIdField.Equals(value) != true)) {
                    this.ProjectIdField = value;
                    this.RaisePropertyChanged("ProjectId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteFilter", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteFilter : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.DateRange DateRangeValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> IntValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.MultiValueFilter MultiValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PropertyNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StringValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.DateRange DateRangeValue {
            get {
                return this.DateRangeValueField;
            }
            set {
                if ((object.ReferenceEquals(this.DateRangeValueField, value) != true)) {
                    this.DateRangeValueField = value;
                    this.RaisePropertyChanged("DateRangeValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> IntValue {
            get {
                return this.IntValueField;
            }
            set {
                if ((this.IntValueField.Equals(value) != true)) {
                    this.IntValueField = value;
                    this.RaisePropertyChanged("IntValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.MultiValueFilter MultiValue {
            get {
                return this.MultiValueField;
            }
            set {
                if ((object.ReferenceEquals(this.MultiValueField, value) != true)) {
                    this.MultiValueField = value;
                    this.RaisePropertyChanged("MultiValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PropertyName {
            get {
                return this.PropertyNameField;
            }
            set {
                if ((object.ReferenceEquals(this.PropertyNameField, value) != true)) {
                    this.PropertyNameField = value;
                    this.RaisePropertyChanged("PropertyName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StringValue {
            get {
                return this.StringValueField;
            }
            set {
                if ((object.ReferenceEquals(this.StringValueField, value) != true)) {
                    this.StringValueField = value;
                    this.RaisePropertyChanged("StringValue");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DateRange", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class DateRange : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ConsiderTimesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> EndDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> StartDateField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool ConsiderTimes {
            get {
                return this.ConsiderTimesField;
            }
            set {
                if ((this.ConsiderTimesField.Equals(value) != true)) {
                    this.ConsiderTimesField = value;
                    this.RaisePropertyChanged("ConsiderTimes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> EndDate {
            get {
                return this.EndDateField;
            }
            set {
                if ((this.EndDateField.Equals(value) != true)) {
                    this.EndDateField = value;
                    this.RaisePropertyChanged("EndDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> StartDate {
            get {
                return this.StartDateField;
            }
            set {
                if ((this.StartDateField.Equals(value) != true)) {
                    this.StartDateField = value;
                    this.RaisePropertyChanged("StartDate");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MultiValueFilter", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class MultiValueFilter : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsNoneField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int[] ValuesField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsNone {
            get {
                return this.IsNoneField;
            }
            set {
                if ((this.IsNoneField.Equals(value) != true)) {
                    this.IsNoneField = value;
                    this.RaisePropertyChanged("IsNone");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int[] Values {
            get {
                return this.ValuesField;
            }
            set {
                if ((object.ReferenceEquals(this.ValuesField, value) != true)) {
                    this.ValuesField = value;
                    this.RaisePropertyChanged("Values");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteSort", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteSort : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PropertyNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool SortAscendingField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PropertyName {
            get {
                return this.PropertyNameField;
            }
            set {
                if ((object.ReferenceEquals(this.PropertyNameField, value) != true)) {
                    this.PropertyNameField = value;
                    this.RaisePropertyChanged("PropertyName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool SortAscending {
            get {
                return this.SortAscendingField;
            }
            set {
                if ((this.SortAscendingField.Equals(value) != true)) {
                    this.SortAscendingField = value;
                    this.RaisePropertyChanged("SortAscending");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteBuild", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteBuild : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> BuildIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int BuildStatusIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BuildStatusNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> CreationDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime LastUpdateDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ProjectIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ReleaseIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteBuildSourceCode[] RevisionsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> BuildId {
            get {
                return this.BuildIdField;
            }
            set {
                if ((this.BuildIdField.Equals(value) != true)) {
                    this.BuildIdField = value;
                    this.RaisePropertyChanged("BuildId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int BuildStatusId {
            get {
                return this.BuildStatusIdField;
            }
            set {
                if ((this.BuildStatusIdField.Equals(value) != true)) {
                    this.BuildStatusIdField = value;
                    this.RaisePropertyChanged("BuildStatusId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string BuildStatusName {
            get {
                return this.BuildStatusNameField;
            }
            set {
                if ((object.ReferenceEquals(this.BuildStatusNameField, value) != true)) {
                    this.BuildStatusNameField = value;
                    this.RaisePropertyChanged("BuildStatusName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> CreationDate {
            get {
                return this.CreationDateField;
            }
            set {
                if ((this.CreationDateField.Equals(value) != true)) {
                    this.CreationDateField = value;
                    this.RaisePropertyChanged("CreationDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime LastUpdateDate {
            get {
                return this.LastUpdateDateField;
            }
            set {
                if ((this.LastUpdateDateField.Equals(value) != true)) {
                    this.LastUpdateDateField = value;
                    this.RaisePropertyChanged("LastUpdateDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ProjectId {
            get {
                return this.ProjectIdField;
            }
            set {
                if ((this.ProjectIdField.Equals(value) != true)) {
                    this.ProjectIdField = value;
                    this.RaisePropertyChanged("ProjectId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ReleaseId {
            get {
                return this.ReleaseIdField;
            }
            set {
                if ((this.ReleaseIdField.Equals(value) != true)) {
                    this.ReleaseIdField = value;
                    this.RaisePropertyChanged("ReleaseId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteBuildSourceCode[] Revisions {
            get {
                return this.RevisionsField;
            }
            set {
                if ((object.ReferenceEquals(this.RevisionsField, value) != true)) {
                    this.RevisionsField = value;
                    this.RaisePropertyChanged("Revisions");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteBuildSourceCode", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteBuildSourceCode : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int BuildIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> CreationDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RevisionKeyField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int BuildId {
            get {
                return this.BuildIdField;
            }
            set {
                if ((this.BuildIdField.Equals(value) != true)) {
                    this.BuildIdField = value;
                    this.RaisePropertyChanged("BuildId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> CreationDate {
            get {
                return this.CreationDateField;
            }
            set {
                if ((this.CreationDateField.Equals(value) != true)) {
                    this.CreationDateField = value;
                    this.RaisePropertyChanged("CreationDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RevisionKey {
            get {
                return this.RevisionKeyField;
            }
            set {
                if ((object.ReferenceEquals(this.RevisionKeyField, value) != true)) {
                    this.RevisionKeyField = value;
                    this.RaisePropertyChanged("RevisionKey");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteSourceCodeBranch", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteSourceCodeBranch : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsDefaultField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Id {
            get {
                return this.IdField;
            }
            set {
                if ((object.ReferenceEquals(this.IdField, value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsDefault {
            get {
                return this.IsDefaultField;
            }
            set {
                if ((this.IsDefaultField.Equals(value) != true)) {
                    this.IsDefaultField = value;
                    this.RaisePropertyChanged("IsDefault");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteSourceCodeFolder", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteSourceCodeFolder : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSourceCodeFile[] FilesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSourceCodeFolder[] FoldersField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsRootField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSourceCodeFolder ParentFolderField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSourceCodeFile[] Files {
            get {
                return this.FilesField;
            }
            set {
                if ((object.ReferenceEquals(this.FilesField, value) != true)) {
                    this.FilesField = value;
                    this.RaisePropertyChanged("Files");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSourceCodeFolder[] Folders {
            get {
                return this.FoldersField;
            }
            set {
                if ((object.ReferenceEquals(this.FoldersField, value) != true)) {
                    this.FoldersField = value;
                    this.RaisePropertyChanged("Folders");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Id {
            get {
                return this.IdField;
            }
            set {
                if ((object.ReferenceEquals(this.IdField, value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsRoot {
            get {
                return this.IsRootField;
            }
            set {
                if ((this.IsRootField.Equals(value) != true)) {
                    this.IsRootField = value;
                    this.RaisePropertyChanged("IsRoot");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSourceCodeFolder ParentFolder {
            get {
                return this.ParentFolderField;
            }
            set {
                if ((object.ReferenceEquals(this.ParentFolderField, value) != true)) {
                    this.ParentFolderField = value;
                    this.RaisePropertyChanged("ParentFolder");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteSourceCodeFile", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteSourceCodeFile : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ActionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AuthorNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSourceCodeRevision LastRevisionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime LastUpdateDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteLinkedArtifact[] LinkedArtifactsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSourceCodeFolder ParentFolderField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PathField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SizeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Action {
            get {
                return this.ActionField;
            }
            set {
                if ((object.ReferenceEquals(this.ActionField, value) != true)) {
                    this.ActionField = value;
                    this.RaisePropertyChanged("Action");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AuthorName {
            get {
                return this.AuthorNameField;
            }
            set {
                if ((object.ReferenceEquals(this.AuthorNameField, value) != true)) {
                    this.AuthorNameField = value;
                    this.RaisePropertyChanged("AuthorName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Id {
            get {
                return this.IdField;
            }
            set {
                if ((object.ReferenceEquals(this.IdField, value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSourceCodeRevision LastRevision {
            get {
                return this.LastRevisionField;
            }
            set {
                if ((object.ReferenceEquals(this.LastRevisionField, value) != true)) {
                    this.LastRevisionField = value;
                    this.RaisePropertyChanged("LastRevision");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime LastUpdateDate {
            get {
                return this.LastUpdateDateField;
            }
            set {
                if ((this.LastUpdateDateField.Equals(value) != true)) {
                    this.LastUpdateDateField = value;
                    this.RaisePropertyChanged("LastUpdateDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteLinkedArtifact[] LinkedArtifacts {
            get {
                return this.LinkedArtifactsField;
            }
            set {
                if ((object.ReferenceEquals(this.LinkedArtifactsField, value) != true)) {
                    this.LinkedArtifactsField = value;
                    this.RaisePropertyChanged("LinkedArtifacts");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSourceCodeFolder ParentFolder {
            get {
                return this.ParentFolderField;
            }
            set {
                if ((object.ReferenceEquals(this.ParentFolderField, value) != true)) {
                    this.ParentFolderField = value;
                    this.RaisePropertyChanged("ParentFolder");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Path {
            get {
                return this.PathField;
            }
            set {
                if ((object.ReferenceEquals(this.PathField, value) != true)) {
                    this.PathField = value;
                    this.RaisePropertyChanged("Path");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Size {
            get {
                return this.SizeField;
            }
            set {
                if ((this.SizeField.Equals(value) != true)) {
                    this.SizeField = value;
                    this.RaisePropertyChanged("Size");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteSourceCodeRevision", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteSourceCodeRevision : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AuthorNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ContentChangedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSourceCodeFile[] FilesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool PropertiesChangedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime UpdateDateField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AuthorName {
            get {
                return this.AuthorNameField;
            }
            set {
                if ((object.ReferenceEquals(this.AuthorNameField, value) != true)) {
                    this.AuthorNameField = value;
                    this.RaisePropertyChanged("AuthorName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool ContentChanged {
            get {
                return this.ContentChangedField;
            }
            set {
                if ((this.ContentChangedField.Equals(value) != true)) {
                    this.ContentChangedField = value;
                    this.RaisePropertyChanged("ContentChanged");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSourceCodeFile[] Files {
            get {
                return this.FilesField;
            }
            set {
                if ((object.ReferenceEquals(this.FilesField, value) != true)) {
                    this.FilesField = value;
                    this.RaisePropertyChanged("Files");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Id {
            get {
                return this.IdField;
            }
            set {
                if ((object.ReferenceEquals(this.IdField, value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool PropertiesChanged {
            get {
                return this.PropertiesChangedField;
            }
            set {
                if ((this.PropertiesChangedField.Equals(value) != true)) {
                    this.PropertiesChangedField = value;
                    this.RaisePropertyChanged("PropertiesChanged");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime UpdateDate {
            get {
                return this.UpdateDateField;
            }
            set {
                if ((this.UpdateDateField.Equals(value) != true)) {
                    this.UpdateDateField = value;
                    this.RaisePropertyChanged("UpdateDate");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteLinkedArtifact", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteLinkedArtifact : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ArtifactIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ArtifactTypeIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StatusField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ArtifactId {
            get {
                return this.ArtifactIdField;
            }
            set {
                if ((this.ArtifactIdField.Equals(value) != true)) {
                    this.ArtifactIdField = value;
                    this.RaisePropertyChanged("ArtifactId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ArtifactTypeId {
            get {
                return this.ArtifactTypeIdField;
            }
            set {
                if ((this.ArtifactTypeIdField.Equals(value) != true)) {
                    this.ArtifactTypeIdField = value;
                    this.RaisePropertyChanged("ArtifactTypeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Status {
            get {
                return this.StatusField;
            }
            set {
                if ((object.ReferenceEquals(this.StatusField, value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteMessageInfo", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteMessageInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int[] OnlineUsersField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> UnreadMessagesField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int[] OnlineUsers {
            get {
                return this.OnlineUsersField;
            }
            set {
                if ((object.ReferenceEquals(this.OnlineUsersField, value) != true)) {
                    this.OnlineUsersField = value;
                    this.RaisePropertyChanged("OnlineUsers");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> UnreadMessages {
            get {
                return this.UnreadMessagesField;
            }
            set {
                if ((this.UnreadMessagesField.Equals(value) != true)) {
                    this.UnreadMessagesField = value;
                    this.RaisePropertyChanged("UnreadMessages");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteUserMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteUserMessage : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int UnreadMessagesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int UserIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int UnreadMessages {
            get {
                return this.UnreadMessagesField;
            }
            set {
                if ((this.UnreadMessagesField.Equals(value) != true)) {
                    this.UnreadMessagesField = value;
                    this.RaisePropertyChanged("UnreadMessages");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int UserId {
            get {
                return this.UserIdField;
            }
            set {
                if ((this.UserIdField.Equals(value) != true)) {
                    this.UserIdField = value;
                    this.RaisePropertyChanged("UserId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteMessage : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BodyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreationDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsReadField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime LastUpdateDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long MessageIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteLinkedArtifact RecipientArtifactField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteUser RecipientUserField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteUser SenderUserField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Body {
            get {
                return this.BodyField;
            }
            set {
                if ((object.ReferenceEquals(this.BodyField, value) != true)) {
                    this.BodyField = value;
                    this.RaisePropertyChanged("Body");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreationDate {
            get {
                return this.CreationDateField;
            }
            set {
                if ((this.CreationDateField.Equals(value) != true)) {
                    this.CreationDateField = value;
                    this.RaisePropertyChanged("CreationDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsRead {
            get {
                return this.IsReadField;
            }
            set {
                if ((this.IsReadField.Equals(value) != true)) {
                    this.IsReadField = value;
                    this.RaisePropertyChanged("IsRead");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime LastUpdateDate {
            get {
                return this.LastUpdateDateField;
            }
            set {
                if ((this.LastUpdateDateField.Equals(value) != true)) {
                    this.LastUpdateDateField = value;
                    this.RaisePropertyChanged("LastUpdateDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long MessageId {
            get {
                return this.MessageIdField;
            }
            set {
                if ((this.MessageIdField.Equals(value) != true)) {
                    this.MessageIdField = value;
                    this.RaisePropertyChanged("MessageId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteLinkedArtifact RecipientArtifact {
            get {
                return this.RecipientArtifactField;
            }
            set {
                if ((object.ReferenceEquals(this.RecipientArtifactField, value) != true)) {
                    this.RecipientArtifactField = value;
                    this.RaisePropertyChanged("RecipientArtifact");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteUser RecipientUser {
            get {
                return this.RecipientUserField;
            }
            set {
                if ((object.ReferenceEquals(this.RecipientUserField, value) != true)) {
                    this.RecipientUserField = value;
                    this.RaisePropertyChanged("RecipientUser");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteUser SenderUser {
            get {
                return this.SenderUserField;
            }
            set {
                if ((object.ReferenceEquals(this.SenderUserField, value) != true)) {
                    this.SenderUserField = value;
                    this.RaisePropertyChanged("SenderUser");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteUser", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteProjectUser))]
    public partial class RemoteUser : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool AdminField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ApprovedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DepartmentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailAddressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FirstNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FullNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LastNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LdapDnField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool LockedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MiddleInitialField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RssTokenField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> UserIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Active {
            get {
                return this.ActiveField;
            }
            set {
                if ((this.ActiveField.Equals(value) != true)) {
                    this.ActiveField = value;
                    this.RaisePropertyChanged("Active");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Admin {
            get {
                return this.AdminField;
            }
            set {
                if ((this.AdminField.Equals(value) != true)) {
                    this.AdminField = value;
                    this.RaisePropertyChanged("Admin");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Approved {
            get {
                return this.ApprovedField;
            }
            set {
                if ((this.ApprovedField.Equals(value) != true)) {
                    this.ApprovedField = value;
                    this.RaisePropertyChanged("Approved");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Department {
            get {
                return this.DepartmentField;
            }
            set {
                if ((object.ReferenceEquals(this.DepartmentField, value) != true)) {
                    this.DepartmentField = value;
                    this.RaisePropertyChanged("Department");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EmailAddress {
            get {
                return this.EmailAddressField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailAddressField, value) != true)) {
                    this.EmailAddressField = value;
                    this.RaisePropertyChanged("EmailAddress");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FirstName {
            get {
                return this.FirstNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FirstNameField, value) != true)) {
                    this.FirstNameField = value;
                    this.RaisePropertyChanged("FirstName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FullName {
            get {
                return this.FullNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FullNameField, value) != true)) {
                    this.FullNameField = value;
                    this.RaisePropertyChanged("FullName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LastName {
            get {
                return this.LastNameField;
            }
            set {
                if ((object.ReferenceEquals(this.LastNameField, value) != true)) {
                    this.LastNameField = value;
                    this.RaisePropertyChanged("LastName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LdapDn {
            get {
                return this.LdapDnField;
            }
            set {
                if ((object.ReferenceEquals(this.LdapDnField, value) != true)) {
                    this.LdapDnField = value;
                    this.RaisePropertyChanged("LdapDn");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Locked {
            get {
                return this.LockedField;
            }
            set {
                if ((this.LockedField.Equals(value) != true)) {
                    this.LockedField = value;
                    this.RaisePropertyChanged("Locked");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MiddleInitial {
            get {
                return this.MiddleInitialField;
            }
            set {
                if ((object.ReferenceEquals(this.MiddleInitialField, value) != true)) {
                    this.MiddleInitialField = value;
                    this.RaisePropertyChanged("MiddleInitial");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RssToken {
            get {
                return this.RssTokenField;
            }
            set {
                if ((object.ReferenceEquals(this.RssTokenField, value) != true)) {
                    this.RssTokenField = value;
                    this.RaisePropertyChanged("RssToken");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> UserId {
            get {
                return this.UserIdField;
            }
            set {
                if ((this.UserIdField.Equals(value) != true)) {
                    this.UserIdField = value;
                    this.RaisePropertyChanged("UserId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName {
            get {
                return this.UserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UserNameField, value) != true)) {
                    this.UserNameField = value;
                    this.RaisePropertyChanged("UserName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteProjectUser", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteProjectUser : Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteUser {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ProjectIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ProjectRoleIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProjectRoleNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ProjectId {
            get {
                return this.ProjectIdField;
            }
            set {
                if ((this.ProjectIdField.Equals(value) != true)) {
                    this.ProjectIdField = value;
                    this.RaisePropertyChanged("ProjectId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ProjectRoleId {
            get {
                return this.ProjectRoleIdField;
            }
            set {
                if ((this.ProjectRoleIdField.Equals(value) != true)) {
                    this.ProjectRoleIdField = value;
                    this.RaisePropertyChanged("ProjectRoleId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProjectRoleName {
            get {
                return this.ProjectRoleNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ProjectRoleNameField, value) != true)) {
                    this.ProjectRoleNameField = value;
                    this.RaisePropertyChanged("ProjectRoleName");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteHistoryChange", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteHistoryChange : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ArtifactFieldIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteHistoryChangeSet ChangeSetField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ChangeSetIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> CustomPropertyIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FieldCaptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FieldNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int HistoryChangeIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NewValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OldValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ArtifactFieldId {
            get {
                return this.ArtifactFieldIdField;
            }
            set {
                if ((this.ArtifactFieldIdField.Equals(value) != true)) {
                    this.ArtifactFieldIdField = value;
                    this.RaisePropertyChanged("ArtifactFieldId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteHistoryChangeSet ChangeSet {
            get {
                return this.ChangeSetField;
            }
            set {
                if ((object.ReferenceEquals(this.ChangeSetField, value) != true)) {
                    this.ChangeSetField = value;
                    this.RaisePropertyChanged("ChangeSet");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ChangeSetId {
            get {
                return this.ChangeSetIdField;
            }
            set {
                if ((this.ChangeSetIdField.Equals(value) != true)) {
                    this.ChangeSetIdField = value;
                    this.RaisePropertyChanged("ChangeSetId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> CustomPropertyId {
            get {
                return this.CustomPropertyIdField;
            }
            set {
                if ((this.CustomPropertyIdField.Equals(value) != true)) {
                    this.CustomPropertyIdField = value;
                    this.RaisePropertyChanged("CustomPropertyId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FieldCaption {
            get {
                return this.FieldCaptionField;
            }
            set {
                if ((object.ReferenceEquals(this.FieldCaptionField, value) != true)) {
                    this.FieldCaptionField = value;
                    this.RaisePropertyChanged("FieldCaption");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FieldName {
            get {
                return this.FieldNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FieldNameField, value) != true)) {
                    this.FieldNameField = value;
                    this.RaisePropertyChanged("FieldName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int HistoryChangeId {
            get {
                return this.HistoryChangeIdField;
            }
            set {
                if ((this.HistoryChangeIdField.Equals(value) != true)) {
                    this.HistoryChangeIdField = value;
                    this.RaisePropertyChanged("HistoryChangeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NewValue {
            get {
                return this.NewValueField;
            }
            set {
                if ((object.ReferenceEquals(this.NewValueField, value) != true)) {
                    this.NewValueField = value;
                    this.RaisePropertyChanged("NewValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OldValue {
            get {
                return this.OldValueField;
            }
            set {
                if ((object.ReferenceEquals(this.OldValueField, value) != true)) {
                    this.OldValueField = value;
                    this.RaisePropertyChanged("OldValue");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteHistoryChangeSet", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteHistoryChangeSet : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ArtifactIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ArtifactNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ArtifactTypeIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ArtifactTypeNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime ChangeDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ChangeTypeIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ChangeTypeNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteHistoryChange[] ChangesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int HistoryChangeSetIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ProjectIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SignedIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserFullNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int UserIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ArtifactId {
            get {
                return this.ArtifactIdField;
            }
            set {
                if ((this.ArtifactIdField.Equals(value) != true)) {
                    this.ArtifactIdField = value;
                    this.RaisePropertyChanged("ArtifactId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ArtifactName {
            get {
                return this.ArtifactNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ArtifactNameField, value) != true)) {
                    this.ArtifactNameField = value;
                    this.RaisePropertyChanged("ArtifactName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ArtifactTypeId {
            get {
                return this.ArtifactTypeIdField;
            }
            set {
                if ((this.ArtifactTypeIdField.Equals(value) != true)) {
                    this.ArtifactTypeIdField = value;
                    this.RaisePropertyChanged("ArtifactTypeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ArtifactTypeName {
            get {
                return this.ArtifactTypeNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ArtifactTypeNameField, value) != true)) {
                    this.ArtifactTypeNameField = value;
                    this.RaisePropertyChanged("ArtifactTypeName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime ChangeDate {
            get {
                return this.ChangeDateField;
            }
            set {
                if ((this.ChangeDateField.Equals(value) != true)) {
                    this.ChangeDateField = value;
                    this.RaisePropertyChanged("ChangeDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ChangeTypeId {
            get {
                return this.ChangeTypeIdField;
            }
            set {
                if ((this.ChangeTypeIdField.Equals(value) != true)) {
                    this.ChangeTypeIdField = value;
                    this.RaisePropertyChanged("ChangeTypeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ChangeTypeName {
            get {
                return this.ChangeTypeNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ChangeTypeNameField, value) != true)) {
                    this.ChangeTypeNameField = value;
                    this.RaisePropertyChanged("ChangeTypeName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteHistoryChange[] Changes {
            get {
                return this.ChangesField;
            }
            set {
                if ((object.ReferenceEquals(this.ChangesField, value) != true)) {
                    this.ChangesField = value;
                    this.RaisePropertyChanged("Changes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int HistoryChangeSetId {
            get {
                return this.HistoryChangeSetIdField;
            }
            set {
                if ((this.HistoryChangeSetIdField.Equals(value) != true)) {
                    this.HistoryChangeSetIdField = value;
                    this.RaisePropertyChanged("HistoryChangeSetId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ProjectId {
            get {
                return this.ProjectIdField;
            }
            set {
                if ((this.ProjectIdField.Equals(value) != true)) {
                    this.ProjectIdField = value;
                    this.RaisePropertyChanged("ProjectId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SignedId {
            get {
                return this.SignedIdField;
            }
            set {
                if ((this.SignedIdField.Equals(value) != true)) {
                    this.SignedIdField = value;
                    this.RaisePropertyChanged("SignedId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserFullName {
            get {
                return this.UserFullNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UserFullNameField, value) != true)) {
                    this.UserFullNameField = value;
                    this.RaisePropertyChanged("UserFullName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int UserId {
            get {
                return this.UserIdField;
            }
            set {
                if ((this.UserIdField.Equals(value) != true)) {
                    this.UserIdField = value;
                    this.RaisePropertyChanged("UserId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteArtifactSubscription", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteArtifactSubscription : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ArtifactDescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ArtifactIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ArtifactNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ArtifactTypeIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ArtifactTypeNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime LastUpdateDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ProjectIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProjectNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserFullNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int UserIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ArtifactDescription {
            get {
                return this.ArtifactDescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.ArtifactDescriptionField, value) != true)) {
                    this.ArtifactDescriptionField = value;
                    this.RaisePropertyChanged("ArtifactDescription");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ArtifactId {
            get {
                return this.ArtifactIdField;
            }
            set {
                if ((this.ArtifactIdField.Equals(value) != true)) {
                    this.ArtifactIdField = value;
                    this.RaisePropertyChanged("ArtifactId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ArtifactName {
            get {
                return this.ArtifactNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ArtifactNameField, value) != true)) {
                    this.ArtifactNameField = value;
                    this.RaisePropertyChanged("ArtifactName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ArtifactTypeId {
            get {
                return this.ArtifactTypeIdField;
            }
            set {
                if ((this.ArtifactTypeIdField.Equals(value) != true)) {
                    this.ArtifactTypeIdField = value;
                    this.RaisePropertyChanged("ArtifactTypeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ArtifactTypeName {
            get {
                return this.ArtifactTypeNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ArtifactTypeNameField, value) != true)) {
                    this.ArtifactTypeNameField = value;
                    this.RaisePropertyChanged("ArtifactTypeName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime LastUpdateDate {
            get {
                return this.LastUpdateDateField;
            }
            set {
                if ((this.LastUpdateDateField.Equals(value) != true)) {
                    this.LastUpdateDateField = value;
                    this.RaisePropertyChanged("LastUpdateDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ProjectId {
            get {
                return this.ProjectIdField;
            }
            set {
                if ((this.ProjectIdField.Equals(value) != true)) {
                    this.ProjectIdField = value;
                    this.RaisePropertyChanged("ProjectId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProjectName {
            get {
                return this.ProjectNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ProjectNameField, value) != true)) {
                    this.ProjectNameField = value;
                    this.RaisePropertyChanged("ProjectName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserFullName {
            get {
                return this.UserFullNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UserFullNameField, value) != true)) {
                    this.UserFullNameField = value;
                    this.RaisePropertyChanged("UserFullName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int UserId {
            get {
                return this.UserIdField;
            }
            set {
                if ((this.UserIdField.Equals(value) != true)) {
                    this.UserIdField = value;
                    this.RaisePropertyChanged("UserId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteSavedFilter", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteSavedFilter : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ArtifactTypeIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ArtifactTypeNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] FiltersField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsSharedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ProjectIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProjectNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SavedFilterIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSort SortField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ArtifactTypeId {
            get {
                return this.ArtifactTypeIdField;
            }
            set {
                if ((this.ArtifactTypeIdField.Equals(value) != true)) {
                    this.ArtifactTypeIdField = value;
                    this.RaisePropertyChanged("ArtifactTypeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ArtifactTypeName {
            get {
                return this.ArtifactTypeNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ArtifactTypeNameField, value) != true)) {
                    this.ArtifactTypeNameField = value;
                    this.RaisePropertyChanged("ArtifactTypeName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] Filters {
            get {
                return this.FiltersField;
            }
            set {
                if ((object.ReferenceEquals(this.FiltersField, value) != true)) {
                    this.FiltersField = value;
                    this.RaisePropertyChanged("Filters");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsShared {
            get {
                return this.IsSharedField;
            }
            set {
                if ((this.IsSharedField.Equals(value) != true)) {
                    this.IsSharedField = value;
                    this.RaisePropertyChanged("IsShared");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ProjectId {
            get {
                return this.ProjectIdField;
            }
            set {
                if ((this.ProjectIdField.Equals(value) != true)) {
                    this.ProjectIdField = value;
                    this.RaisePropertyChanged("ProjectId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProjectName {
            get {
                return this.ProjectNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ProjectNameField, value) != true)) {
                    this.ProjectNameField = value;
                    this.RaisePropertyChanged("ProjectName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SavedFilterId {
            get {
                return this.SavedFilterIdField;
            }
            set {
                if ((this.SavedFilterIdField.Equals(value) != true)) {
                    this.SavedFilterIdField = value;
                    this.RaisePropertyChanged("SavedFilterId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSort Sort {
            get {
                return this.SortField;
            }
            set {
                if ((object.ReferenceEquals(this.SortField, value) != true)) {
                    this.SortField = value;
                    this.RaisePropertyChanged("Sort");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteRequirementStep", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteRequirementStep : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime ConcurrencyDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreationDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime LastUpdateDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PositionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int RequirementIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> RequirementStepIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime ConcurrencyDate {
            get {
                return this.ConcurrencyDateField;
            }
            set {
                if ((this.ConcurrencyDateField.Equals(value) != true)) {
                    this.ConcurrencyDateField = value;
                    this.RaisePropertyChanged("ConcurrencyDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreationDate {
            get {
                return this.CreationDateField;
            }
            set {
                if ((this.CreationDateField.Equals(value) != true)) {
                    this.CreationDateField = value;
                    this.RaisePropertyChanged("CreationDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime LastUpdateDate {
            get {
                return this.LastUpdateDateField;
            }
            set {
                if ((this.LastUpdateDateField.Equals(value) != true)) {
                    this.LastUpdateDateField = value;
                    this.RaisePropertyChanged("LastUpdateDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Position {
            get {
                return this.PositionField;
            }
            set {
                if ((this.PositionField.Equals(value) != true)) {
                    this.PositionField = value;
                    this.RaisePropertyChanged("Position");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int RequirementId {
            get {
                return this.RequirementIdField;
            }
            set {
                if ((this.RequirementIdField.Equals(value) != true)) {
                    this.RequirementIdField = value;
                    this.RaisePropertyChanged("RequirementId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> RequirementStepId {
            get {
                return this.RequirementStepIdField;
            }
            set {
                if ((this.RequirementStepIdField.Equals(value) != true)) {
                    this.RequirementStepIdField = value;
                    this.RaisePropertyChanged("RequirementStepId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteVersion", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteVersion : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> PatchField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VersionField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> Patch {
            get {
                return this.PatchField;
            }
            set {
                if ((this.PatchField.Equals(value) != true)) {
                    this.PatchField = value;
                    this.RaisePropertyChanged("Patch");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Version {
            get {
                return this.VersionField;
            }
            set {
                if ((object.ReferenceEquals(this.VersionField, value) != true)) {
                    this.VersionField = value;
                    this.RaisePropertyChanged("Version");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteSetting", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteSetting : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Value {
            get {
                return this.ValueField;
            }
            set {
                if ((object.ReferenceEquals(this.ValueField, value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteArtifact", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestCase))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestStep))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestRun))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteManualTestRun))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAutomatedTestRun))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestSet))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAutomationHost))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDocument))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncident))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRelease))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRequirement))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTask))]
    public partial class RemoteArtifact : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ArtifactTypeIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime ConcurrencyDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteArtifactCustomProperty[] CustomPropertiesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsAttachmentsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ProjectIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ArtifactTypeId {
            get {
                return this.ArtifactTypeIdField;
            }
            set {
                if ((this.ArtifactTypeIdField.Equals(value) != true)) {
                    this.ArtifactTypeIdField = value;
                    this.RaisePropertyChanged("ArtifactTypeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime ConcurrencyDate {
            get {
                return this.ConcurrencyDateField;
            }
            set {
                if ((this.ConcurrencyDateField.Equals(value) != true)) {
                    this.ConcurrencyDateField = value;
                    this.RaisePropertyChanged("ConcurrencyDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteArtifactCustomProperty[] CustomProperties {
            get {
                return this.CustomPropertiesField;
            }
            set {
                if ((object.ReferenceEquals(this.CustomPropertiesField, value) != true)) {
                    this.CustomPropertiesField = value;
                    this.RaisePropertyChanged("CustomProperties");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsAttachments {
            get {
                return this.IsAttachmentsField;
            }
            set {
                if ((this.IsAttachmentsField.Equals(value) != true)) {
                    this.IsAttachmentsField = value;
                    this.RaisePropertyChanged("IsAttachments");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ProjectId {
            get {
                return this.ProjectIdField;
            }
            set {
                if ((this.ProjectIdField.Equals(value) != true)) {
                    this.ProjectIdField = value;
                    this.RaisePropertyChanged("ProjectId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteTestCase", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteTestCase : Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteArtifact {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ActualDurationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> AuthorIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AuthorNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> AutomationAttachmentIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> AutomationEngineIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int[] ComponentIdsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreationDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> EstimatedDurationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> ExecutionDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ExecutionStatusIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ExecutionStatusNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsSuspectField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsTestStepsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime LastUpdateDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> OwnerIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OwnerNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProjectNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> TestCaseFolderIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> TestCaseIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> TestCasePriorityIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TestCasePriorityNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TestCaseStatusIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TestCaseStatusNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TestCaseTypeIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TestCaseTypeNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestStep[] TestStepsField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ActualDuration {
            get {
                return this.ActualDurationField;
            }
            set {
                if ((this.ActualDurationField.Equals(value) != true)) {
                    this.ActualDurationField = value;
                    this.RaisePropertyChanged("ActualDuration");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> AuthorId {
            get {
                return this.AuthorIdField;
            }
            set {
                if ((this.AuthorIdField.Equals(value) != true)) {
                    this.AuthorIdField = value;
                    this.RaisePropertyChanged("AuthorId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AuthorName {
            get {
                return this.AuthorNameField;
            }
            set {
                if ((object.ReferenceEquals(this.AuthorNameField, value) != true)) {
                    this.AuthorNameField = value;
                    this.RaisePropertyChanged("AuthorName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> AutomationAttachmentId {
            get {
                return this.AutomationAttachmentIdField;
            }
            set {
                if ((this.AutomationAttachmentIdField.Equals(value) != true)) {
                    this.AutomationAttachmentIdField = value;
                    this.RaisePropertyChanged("AutomationAttachmentId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> AutomationEngineId {
            get {
                return this.AutomationEngineIdField;
            }
            set {
                if ((this.AutomationEngineIdField.Equals(value) != true)) {
                    this.AutomationEngineIdField = value;
                    this.RaisePropertyChanged("AutomationEngineId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int[] ComponentIds {
            get {
                return this.ComponentIdsField;
            }
            set {
                if ((object.ReferenceEquals(this.ComponentIdsField, value) != true)) {
                    this.ComponentIdsField = value;
                    this.RaisePropertyChanged("ComponentIds");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreationDate {
            get {
                return this.CreationDateField;
            }
            set {
                if ((this.CreationDateField.Equals(value) != true)) {
                    this.CreationDateField = value;
                    this.RaisePropertyChanged("CreationDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> EstimatedDuration {
            get {
                return this.EstimatedDurationField;
            }
            set {
                if ((this.EstimatedDurationField.Equals(value) != true)) {
                    this.EstimatedDurationField = value;
                    this.RaisePropertyChanged("EstimatedDuration");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> ExecutionDate {
            get {
                return this.ExecutionDateField;
            }
            set {
                if ((this.ExecutionDateField.Equals(value) != true)) {
                    this.ExecutionDateField = value;
                    this.RaisePropertyChanged("ExecutionDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ExecutionStatusId {
            get {
                return this.ExecutionStatusIdField;
            }
            set {
                if ((this.ExecutionStatusIdField.Equals(value) != true)) {
                    this.ExecutionStatusIdField = value;
                    this.RaisePropertyChanged("ExecutionStatusId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ExecutionStatusName {
            get {
                return this.ExecutionStatusNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ExecutionStatusNameField, value) != true)) {
                    this.ExecutionStatusNameField = value;
                    this.RaisePropertyChanged("ExecutionStatusName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsSuspect {
            get {
                return this.IsSuspectField;
            }
            set {
                if ((this.IsSuspectField.Equals(value) != true)) {
                    this.IsSuspectField = value;
                    this.RaisePropertyChanged("IsSuspect");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsTestSteps {
            get {
                return this.IsTestStepsField;
            }
            set {
                if ((this.IsTestStepsField.Equals(value) != true)) {
                    this.IsTestStepsField = value;
                    this.RaisePropertyChanged("IsTestSteps");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime LastUpdateDate {
            get {
                return this.LastUpdateDateField;
            }
            set {
                if ((this.LastUpdateDateField.Equals(value) != true)) {
                    this.LastUpdateDateField = value;
                    this.RaisePropertyChanged("LastUpdateDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> OwnerId {
            get {
                return this.OwnerIdField;
            }
            set {
                if ((this.OwnerIdField.Equals(value) != true)) {
                    this.OwnerIdField = value;
                    this.RaisePropertyChanged("OwnerId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OwnerName {
            get {
                return this.OwnerNameField;
            }
            set {
                if ((object.ReferenceEquals(this.OwnerNameField, value) != true)) {
                    this.OwnerNameField = value;
                    this.RaisePropertyChanged("OwnerName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProjectName {
            get {
                return this.ProjectNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ProjectNameField, value) != true)) {
                    this.ProjectNameField = value;
                    this.RaisePropertyChanged("ProjectName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> TestCaseFolderId {
            get {
                return this.TestCaseFolderIdField;
            }
            set {
                if ((this.TestCaseFolderIdField.Equals(value) != true)) {
                    this.TestCaseFolderIdField = value;
                    this.RaisePropertyChanged("TestCaseFolderId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> TestCaseId {
            get {
                return this.TestCaseIdField;
            }
            set {
                if ((this.TestCaseIdField.Equals(value) != true)) {
                    this.TestCaseIdField = value;
                    this.RaisePropertyChanged("TestCaseId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> TestCasePriorityId {
            get {
                return this.TestCasePriorityIdField;
            }
            set {
                if ((this.TestCasePriorityIdField.Equals(value) != true)) {
                    this.TestCasePriorityIdField = value;
                    this.RaisePropertyChanged("TestCasePriorityId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TestCasePriorityName {
            get {
                return this.TestCasePriorityNameField;
            }
            set {
                if ((object.ReferenceEquals(this.TestCasePriorityNameField, value) != true)) {
                    this.TestCasePriorityNameField = value;
                    this.RaisePropertyChanged("TestCasePriorityName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TestCaseStatusId {
            get {
                return this.TestCaseStatusIdField;
            }
            set {
                if ((this.TestCaseStatusIdField.Equals(value) != true)) {
                    this.TestCaseStatusIdField = value;
                    this.RaisePropertyChanged("TestCaseStatusId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TestCaseStatusName {
            get {
                return this.TestCaseStatusNameField;
            }
            set {
                if ((object.ReferenceEquals(this.TestCaseStatusNameField, value) != true)) {
                    this.TestCaseStatusNameField = value;
                    this.RaisePropertyChanged("TestCaseStatusName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TestCaseTypeId {
            get {
                return this.TestCaseTypeIdField;
            }
            set {
                if ((this.TestCaseTypeIdField.Equals(value) != true)) {
                    this.TestCaseTypeIdField = value;
                    this.RaisePropertyChanged("TestCaseTypeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TestCaseTypeName {
            get {
                return this.TestCaseTypeNameField;
            }
            set {
                if ((object.ReferenceEquals(this.TestCaseTypeNameField, value) != true)) {
                    this.TestCaseTypeNameField = value;
                    this.RaisePropertyChanged("TestCaseTypeName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestStep[] TestSteps {
            get {
                return this.TestStepsField;
            }
            set {
                if ((object.ReferenceEquals(this.TestStepsField, value) != true)) {
                    this.TestStepsField = value;
                    this.RaisePropertyChanged("TestSteps");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteTestStep", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteTestStep : Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteArtifact {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ExecutionStatusIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ExpectedResultField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime LastUpdateDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> LinkedTestCaseIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PositionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SampleDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TestCaseIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> TestStepIdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ExecutionStatusId {
            get {
                return this.ExecutionStatusIdField;
            }
            set {
                if ((this.ExecutionStatusIdField.Equals(value) != true)) {
                    this.ExecutionStatusIdField = value;
                    this.RaisePropertyChanged("ExecutionStatusId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ExpectedResult {
            get {
                return this.ExpectedResultField;
            }
            set {
                if ((object.ReferenceEquals(this.ExpectedResultField, value) != true)) {
                    this.ExpectedResultField = value;
                    this.RaisePropertyChanged("ExpectedResult");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime LastUpdateDate {
            get {
                return this.LastUpdateDateField;
            }
            set {
                if ((this.LastUpdateDateField.Equals(value) != true)) {
                    this.LastUpdateDateField = value;
                    this.RaisePropertyChanged("LastUpdateDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> LinkedTestCaseId {
            get {
                return this.LinkedTestCaseIdField;
            }
            set {
                if ((this.LinkedTestCaseIdField.Equals(value) != true)) {
                    this.LinkedTestCaseIdField = value;
                    this.RaisePropertyChanged("LinkedTestCaseId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Position {
            get {
                return this.PositionField;
            }
            set {
                if ((this.PositionField.Equals(value) != true)) {
                    this.PositionField = value;
                    this.RaisePropertyChanged("Position");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SampleData {
            get {
                return this.SampleDataField;
            }
            set {
                if ((object.ReferenceEquals(this.SampleDataField, value) != true)) {
                    this.SampleDataField = value;
                    this.RaisePropertyChanged("SampleData");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TestCaseId {
            get {
                return this.TestCaseIdField;
            }
            set {
                if ((this.TestCaseIdField.Equals(value) != true)) {
                    this.TestCaseIdField = value;
                    this.RaisePropertyChanged("TestCaseId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> TestStepId {
            get {
                return this.TestStepIdField;
            }
            set {
                if ((this.TestStepIdField.Equals(value) != true)) {
                    this.TestStepIdField = value;
                    this.RaisePropertyChanged("TestStepId");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteTestRun", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteManualTestRun))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAutomatedTestRun))]
    public partial class RemoteTestRun : Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteArtifact {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ActualDurationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> BuildIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> EndDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> EstimatedDurationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ExecutionStatusIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ReleaseIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime StartDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TestCaseIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> TestRunIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TestRunTypeIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> TestSetIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> TestSetTestCaseIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> TesterIdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ActualDuration {
            get {
                return this.ActualDurationField;
            }
            set {
                if ((this.ActualDurationField.Equals(value) != true)) {
                    this.ActualDurationField = value;
                    this.RaisePropertyChanged("ActualDuration");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> BuildId {
            get {
                return this.BuildIdField;
            }
            set {
                if ((this.BuildIdField.Equals(value) != true)) {
                    this.BuildIdField = value;
                    this.RaisePropertyChanged("BuildId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> EndDate {
            get {
                return this.EndDateField;
            }
            set {
                if ((this.EndDateField.Equals(value) != true)) {
                    this.EndDateField = value;
                    this.RaisePropertyChanged("EndDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> EstimatedDuration {
            get {
                return this.EstimatedDurationField;
            }
            set {
                if ((this.EstimatedDurationField.Equals(value) != true)) {
                    this.EstimatedDurationField = value;
                    this.RaisePropertyChanged("EstimatedDuration");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ExecutionStatusId {
            get {
                return this.ExecutionStatusIdField;
            }
            set {
                if ((this.ExecutionStatusIdField.Equals(value) != true)) {
                    this.ExecutionStatusIdField = value;
                    this.RaisePropertyChanged("ExecutionStatusId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ReleaseId {
            get {
                return this.ReleaseIdField;
            }
            set {
                if ((this.ReleaseIdField.Equals(value) != true)) {
                    this.ReleaseIdField = value;
                    this.RaisePropertyChanged("ReleaseId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime StartDate {
            get {
                return this.StartDateField;
            }
            set {
                if ((this.StartDateField.Equals(value) != true)) {
                    this.StartDateField = value;
                    this.RaisePropertyChanged("StartDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TestCaseId {
            get {
                return this.TestCaseIdField;
            }
            set {
                if ((this.TestCaseIdField.Equals(value) != true)) {
                    this.TestCaseIdField = value;
                    this.RaisePropertyChanged("TestCaseId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> TestRunId {
            get {
                return this.TestRunIdField;
            }
            set {
                if ((this.TestRunIdField.Equals(value) != true)) {
                    this.TestRunIdField = value;
                    this.RaisePropertyChanged("TestRunId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TestRunTypeId {
            get {
                return this.TestRunTypeIdField;
            }
            set {
                if ((this.TestRunTypeIdField.Equals(value) != true)) {
                    this.TestRunTypeIdField = value;
                    this.RaisePropertyChanged("TestRunTypeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> TestSetId {
            get {
                return this.TestSetIdField;
            }
            set {
                if ((this.TestSetIdField.Equals(value) != true)) {
                    this.TestSetIdField = value;
                    this.RaisePropertyChanged("TestSetId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> TestSetTestCaseId {
            get {
                return this.TestSetTestCaseIdField;
            }
            set {
                if ((this.TestSetTestCaseIdField.Equals(value) != true)) {
                    this.TestSetTestCaseIdField = value;
                    this.RaisePropertyChanged("TestSetTestCaseId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> TesterId {
            get {
                return this.TesterIdField;
            }
            set {
                if ((this.TesterIdField.Equals(value) != true)) {
                    this.TesterIdField = value;
                    this.RaisePropertyChanged("TesterId");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteManualTestRun", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteManualTestRun : Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestRun {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestRunStep[] TestRunStepsField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestRunStep[] TestRunSteps {
            get {
                return this.TestRunStepsField;
            }
            set {
                if ((object.ReferenceEquals(this.TestRunStepsField, value) != true)) {
                    this.TestRunStepsField = value;
                    this.RaisePropertyChanged("TestRunSteps");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteAutomatedTestRun", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteAutomatedTestRun : Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestRun {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> AutomationAttachmentIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> AutomationEngineIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AutomationEngineTokenField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> AutomationHostIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestSetTestCaseParameter[] ParametersField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> RunnerAssertCountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RunnerMessageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RunnerNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RunnerStackTraceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RunnerTestNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> ScheduledDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TestRunFormatIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestRunStep[] TestRunStepsField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> AutomationAttachmentId {
            get {
                return this.AutomationAttachmentIdField;
            }
            set {
                if ((this.AutomationAttachmentIdField.Equals(value) != true)) {
                    this.AutomationAttachmentIdField = value;
                    this.RaisePropertyChanged("AutomationAttachmentId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> AutomationEngineId {
            get {
                return this.AutomationEngineIdField;
            }
            set {
                if ((this.AutomationEngineIdField.Equals(value) != true)) {
                    this.AutomationEngineIdField = value;
                    this.RaisePropertyChanged("AutomationEngineId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AutomationEngineToken {
            get {
                return this.AutomationEngineTokenField;
            }
            set {
                if ((object.ReferenceEquals(this.AutomationEngineTokenField, value) != true)) {
                    this.AutomationEngineTokenField = value;
                    this.RaisePropertyChanged("AutomationEngineToken");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> AutomationHostId {
            get {
                return this.AutomationHostIdField;
            }
            set {
                if ((this.AutomationHostIdField.Equals(value) != true)) {
                    this.AutomationHostIdField = value;
                    this.RaisePropertyChanged("AutomationHostId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestSetTestCaseParameter[] Parameters {
            get {
                return this.ParametersField;
            }
            set {
                if ((object.ReferenceEquals(this.ParametersField, value) != true)) {
                    this.ParametersField = value;
                    this.RaisePropertyChanged("Parameters");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> RunnerAssertCount {
            get {
                return this.RunnerAssertCountField;
            }
            set {
                if ((this.RunnerAssertCountField.Equals(value) != true)) {
                    this.RunnerAssertCountField = value;
                    this.RaisePropertyChanged("RunnerAssertCount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RunnerMessage {
            get {
                return this.RunnerMessageField;
            }
            set {
                if ((object.ReferenceEquals(this.RunnerMessageField, value) != true)) {
                    this.RunnerMessageField = value;
                    this.RaisePropertyChanged("RunnerMessage");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RunnerName {
            get {
                return this.RunnerNameField;
            }
            set {
                if ((object.ReferenceEquals(this.RunnerNameField, value) != true)) {
                    this.RunnerNameField = value;
                    this.RaisePropertyChanged("RunnerName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RunnerStackTrace {
            get {
                return this.RunnerStackTraceField;
            }
            set {
                if ((object.ReferenceEquals(this.RunnerStackTraceField, value) != true)) {
                    this.RunnerStackTraceField = value;
                    this.RaisePropertyChanged("RunnerStackTrace");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RunnerTestName {
            get {
                return this.RunnerTestNameField;
            }
            set {
                if ((object.ReferenceEquals(this.RunnerTestNameField, value) != true)) {
                    this.RunnerTestNameField = value;
                    this.RaisePropertyChanged("RunnerTestName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> ScheduledDate {
            get {
                return this.ScheduledDateField;
            }
            set {
                if ((this.ScheduledDateField.Equals(value) != true)) {
                    this.ScheduledDateField = value;
                    this.RaisePropertyChanged("ScheduledDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TestRunFormatId {
            get {
                return this.TestRunFormatIdField;
            }
            set {
                if ((this.TestRunFormatIdField.Equals(value) != true)) {
                    this.TestRunFormatIdField = value;
                    this.RaisePropertyChanged("TestRunFormatId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestRunStep[] TestRunSteps {
            get {
                return this.TestRunStepsField;
            }
            set {
                if ((object.ReferenceEquals(this.TestRunStepsField, value) != true)) {
                    this.TestRunStepsField = value;
                    this.RaisePropertyChanged("TestRunSteps");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteTestSet", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteTestSet : Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteArtifact {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ActualDurationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> AutomationHostIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> BuildExecuteTimeIntervalField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> CountBlockedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> CountCautionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> CountFailedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> CountNotApplicableField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> CountNotRunField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> CountPassedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreationDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> CreatorIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CreatorNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DynamicQueryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> EstimatedDurationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> ExecutionDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IndentLevelField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsAutoScheduledField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsDynamicField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime LastUpdateDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> OwnerIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OwnerNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> PlannedDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProjectNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> RecurrenceIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RecurrenceNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ReleaseIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ReleaseVersionNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> TestConfigurationSetIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> TestRunTypeIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> TestSetFolderIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> TestSetIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TestSetStatusIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TestSetStatusNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ActualDuration {
            get {
                return this.ActualDurationField;
            }
            set {
                if ((this.ActualDurationField.Equals(value) != true)) {
                    this.ActualDurationField = value;
                    this.RaisePropertyChanged("ActualDuration");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> AutomationHostId {
            get {
                return this.AutomationHostIdField;
            }
            set {
                if ((this.AutomationHostIdField.Equals(value) != true)) {
                    this.AutomationHostIdField = value;
                    this.RaisePropertyChanged("AutomationHostId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> BuildExecuteTimeInterval {
            get {
                return this.BuildExecuteTimeIntervalField;
            }
            set {
                if ((this.BuildExecuteTimeIntervalField.Equals(value) != true)) {
                    this.BuildExecuteTimeIntervalField = value;
                    this.RaisePropertyChanged("BuildExecuteTimeInterval");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> CountBlocked {
            get {
                return this.CountBlockedField;
            }
            set {
                if ((this.CountBlockedField.Equals(value) != true)) {
                    this.CountBlockedField = value;
                    this.RaisePropertyChanged("CountBlocked");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> CountCaution {
            get {
                return this.CountCautionField;
            }
            set {
                if ((this.CountCautionField.Equals(value) != true)) {
                    this.CountCautionField = value;
                    this.RaisePropertyChanged("CountCaution");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> CountFailed {
            get {
                return this.CountFailedField;
            }
            set {
                if ((this.CountFailedField.Equals(value) != true)) {
                    this.CountFailedField = value;
                    this.RaisePropertyChanged("CountFailed");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> CountNotApplicable {
            get {
                return this.CountNotApplicableField;
            }
            set {
                if ((this.CountNotApplicableField.Equals(value) != true)) {
                    this.CountNotApplicableField = value;
                    this.RaisePropertyChanged("CountNotApplicable");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> CountNotRun {
            get {
                return this.CountNotRunField;
            }
            set {
                if ((this.CountNotRunField.Equals(value) != true)) {
                    this.CountNotRunField = value;
                    this.RaisePropertyChanged("CountNotRun");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> CountPassed {
            get {
                return this.CountPassedField;
            }
            set {
                if ((this.CountPassedField.Equals(value) != true)) {
                    this.CountPassedField = value;
                    this.RaisePropertyChanged("CountPassed");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreationDate {
            get {
                return this.CreationDateField;
            }
            set {
                if ((this.CreationDateField.Equals(value) != true)) {
                    this.CreationDateField = value;
                    this.RaisePropertyChanged("CreationDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> CreatorId {
            get {
                return this.CreatorIdField;
            }
            set {
                if ((this.CreatorIdField.Equals(value) != true)) {
                    this.CreatorIdField = value;
                    this.RaisePropertyChanged("CreatorId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CreatorName {
            get {
                return this.CreatorNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CreatorNameField, value) != true)) {
                    this.CreatorNameField = value;
                    this.RaisePropertyChanged("CreatorName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DynamicQuery {
            get {
                return this.DynamicQueryField;
            }
            set {
                if ((object.ReferenceEquals(this.DynamicQueryField, value) != true)) {
                    this.DynamicQueryField = value;
                    this.RaisePropertyChanged("DynamicQuery");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> EstimatedDuration {
            get {
                return this.EstimatedDurationField;
            }
            set {
                if ((this.EstimatedDurationField.Equals(value) != true)) {
                    this.EstimatedDurationField = value;
                    this.RaisePropertyChanged("EstimatedDuration");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> ExecutionDate {
            get {
                return this.ExecutionDateField;
            }
            set {
                if ((this.ExecutionDateField.Equals(value) != true)) {
                    this.ExecutionDateField = value;
                    this.RaisePropertyChanged("ExecutionDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IndentLevel {
            get {
                return this.IndentLevelField;
            }
            set {
                if ((object.ReferenceEquals(this.IndentLevelField, value) != true)) {
                    this.IndentLevelField = value;
                    this.RaisePropertyChanged("IndentLevel");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsAutoScheduled {
            get {
                return this.IsAutoScheduledField;
            }
            set {
                if ((this.IsAutoScheduledField.Equals(value) != true)) {
                    this.IsAutoScheduledField = value;
                    this.RaisePropertyChanged("IsAutoScheduled");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsDynamic {
            get {
                return this.IsDynamicField;
            }
            set {
                if ((this.IsDynamicField.Equals(value) != true)) {
                    this.IsDynamicField = value;
                    this.RaisePropertyChanged("IsDynamic");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime LastUpdateDate {
            get {
                return this.LastUpdateDateField;
            }
            set {
                if ((this.LastUpdateDateField.Equals(value) != true)) {
                    this.LastUpdateDateField = value;
                    this.RaisePropertyChanged("LastUpdateDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> OwnerId {
            get {
                return this.OwnerIdField;
            }
            set {
                if ((this.OwnerIdField.Equals(value) != true)) {
                    this.OwnerIdField = value;
                    this.RaisePropertyChanged("OwnerId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OwnerName {
            get {
                return this.OwnerNameField;
            }
            set {
                if ((object.ReferenceEquals(this.OwnerNameField, value) != true)) {
                    this.OwnerNameField = value;
                    this.RaisePropertyChanged("OwnerName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> PlannedDate {
            get {
                return this.PlannedDateField;
            }
            set {
                if ((this.PlannedDateField.Equals(value) != true)) {
                    this.PlannedDateField = value;
                    this.RaisePropertyChanged("PlannedDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProjectName {
            get {
                return this.ProjectNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ProjectNameField, value) != true)) {
                    this.ProjectNameField = value;
                    this.RaisePropertyChanged("ProjectName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> RecurrenceId {
            get {
                return this.RecurrenceIdField;
            }
            set {
                if ((this.RecurrenceIdField.Equals(value) != true)) {
                    this.RecurrenceIdField = value;
                    this.RaisePropertyChanged("RecurrenceId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RecurrenceName {
            get {
                return this.RecurrenceNameField;
            }
            set {
                if ((object.ReferenceEquals(this.RecurrenceNameField, value) != true)) {
                    this.RecurrenceNameField = value;
                    this.RaisePropertyChanged("RecurrenceName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ReleaseId {
            get {
                return this.ReleaseIdField;
            }
            set {
                if ((this.ReleaseIdField.Equals(value) != true)) {
                    this.ReleaseIdField = value;
                    this.RaisePropertyChanged("ReleaseId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ReleaseVersionNumber {
            get {
                return this.ReleaseVersionNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.ReleaseVersionNumberField, value) != true)) {
                    this.ReleaseVersionNumberField = value;
                    this.RaisePropertyChanged("ReleaseVersionNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> TestConfigurationSetId {
            get {
                return this.TestConfigurationSetIdField;
            }
            set {
                if ((this.TestConfigurationSetIdField.Equals(value) != true)) {
                    this.TestConfigurationSetIdField = value;
                    this.RaisePropertyChanged("TestConfigurationSetId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> TestRunTypeId {
            get {
                return this.TestRunTypeIdField;
            }
            set {
                if ((this.TestRunTypeIdField.Equals(value) != true)) {
                    this.TestRunTypeIdField = value;
                    this.RaisePropertyChanged("TestRunTypeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> TestSetFolderId {
            get {
                return this.TestSetFolderIdField;
            }
            set {
                if ((this.TestSetFolderIdField.Equals(value) != true)) {
                    this.TestSetFolderIdField = value;
                    this.RaisePropertyChanged("TestSetFolderId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> TestSetId {
            get {
                return this.TestSetIdField;
            }
            set {
                if ((this.TestSetIdField.Equals(value) != true)) {
                    this.TestSetIdField = value;
                    this.RaisePropertyChanged("TestSetId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TestSetStatusId {
            get {
                return this.TestSetStatusIdField;
            }
            set {
                if ((this.TestSetStatusIdField.Equals(value) != true)) {
                    this.TestSetStatusIdField = value;
                    this.RaisePropertyChanged("TestSetStatusId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TestSetStatusName {
            get {
                return this.TestSetStatusNameField;
            }
            set {
                if ((object.ReferenceEquals(this.TestSetStatusNameField, value) != true)) {
                    this.TestSetStatusNameField = value;
                    this.RaisePropertyChanged("TestSetStatusName");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteAutomationHost", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteAutomationHost : Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteArtifact {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> AutomationHostIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> LastContactDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime LastUpdateDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TokenField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Active {
            get {
                return this.ActiveField;
            }
            set {
                if ((this.ActiveField.Equals(value) != true)) {
                    this.ActiveField = value;
                    this.RaisePropertyChanged("Active");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> AutomationHostId {
            get {
                return this.AutomationHostIdField;
            }
            set {
                if ((this.AutomationHostIdField.Equals(value) != true)) {
                    this.AutomationHostIdField = value;
                    this.RaisePropertyChanged("AutomationHostId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> LastContactDate {
            get {
                return this.LastContactDateField;
            }
            set {
                if ((this.LastContactDateField.Equals(value) != true)) {
                    this.LastContactDateField = value;
                    this.RaisePropertyChanged("LastContactDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime LastUpdateDate {
            get {
                return this.LastUpdateDateField;
            }
            set {
                if ((this.LastUpdateDateField.Equals(value) != true)) {
                    this.LastUpdateDateField = value;
                    this.RaisePropertyChanged("LastUpdateDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Token {
            get {
                return this.TokenField;
            }
            set {
                if ((object.ReferenceEquals(this.TokenField, value) != true)) {
                    this.TokenField = value;
                    this.RaisePropertyChanged("Token");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteDocument", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteDocument : Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteArtifact {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteLinkedArtifact[] AttachedArtifactsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> AttachmentIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int AttachmentTypeIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AttachmentTypeNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> AuthorIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AuthorNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CurrentVersionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime EditedDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> EditorIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EditorNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FilenameOrUrlField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ProjectAttachmentFolderIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ProjectAttachmentTypeIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProjectAttachmentTypeNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SizeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TagsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime UploadDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDocumentVersion[] VersionsField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteLinkedArtifact[] AttachedArtifacts {
            get {
                return this.AttachedArtifactsField;
            }
            set {
                if ((object.ReferenceEquals(this.AttachedArtifactsField, value) != true)) {
                    this.AttachedArtifactsField = value;
                    this.RaisePropertyChanged("AttachedArtifacts");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> AttachmentId {
            get {
                return this.AttachmentIdField;
            }
            set {
                if ((this.AttachmentIdField.Equals(value) != true)) {
                    this.AttachmentIdField = value;
                    this.RaisePropertyChanged("AttachmentId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int AttachmentTypeId {
            get {
                return this.AttachmentTypeIdField;
            }
            set {
                if ((this.AttachmentTypeIdField.Equals(value) != true)) {
                    this.AttachmentTypeIdField = value;
                    this.RaisePropertyChanged("AttachmentTypeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AttachmentTypeName {
            get {
                return this.AttachmentTypeNameField;
            }
            set {
                if ((object.ReferenceEquals(this.AttachmentTypeNameField, value) != true)) {
                    this.AttachmentTypeNameField = value;
                    this.RaisePropertyChanged("AttachmentTypeName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> AuthorId {
            get {
                return this.AuthorIdField;
            }
            set {
                if ((this.AuthorIdField.Equals(value) != true)) {
                    this.AuthorIdField = value;
                    this.RaisePropertyChanged("AuthorId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AuthorName {
            get {
                return this.AuthorNameField;
            }
            set {
                if ((object.ReferenceEquals(this.AuthorNameField, value) != true)) {
                    this.AuthorNameField = value;
                    this.RaisePropertyChanged("AuthorName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CurrentVersion {
            get {
                return this.CurrentVersionField;
            }
            set {
                if ((object.ReferenceEquals(this.CurrentVersionField, value) != true)) {
                    this.CurrentVersionField = value;
                    this.RaisePropertyChanged("CurrentVersion");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime EditedDate {
            get {
                return this.EditedDateField;
            }
            set {
                if ((this.EditedDateField.Equals(value) != true)) {
                    this.EditedDateField = value;
                    this.RaisePropertyChanged("EditedDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> EditorId {
            get {
                return this.EditorIdField;
            }
            set {
                if ((this.EditorIdField.Equals(value) != true)) {
                    this.EditorIdField = value;
                    this.RaisePropertyChanged("EditorId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EditorName {
            get {
                return this.EditorNameField;
            }
            set {
                if ((object.ReferenceEquals(this.EditorNameField, value) != true)) {
                    this.EditorNameField = value;
                    this.RaisePropertyChanged("EditorName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FilenameOrUrl {
            get {
                return this.FilenameOrUrlField;
            }
            set {
                if ((object.ReferenceEquals(this.FilenameOrUrlField, value) != true)) {
                    this.FilenameOrUrlField = value;
                    this.RaisePropertyChanged("FilenameOrUrl");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ProjectAttachmentFolderId {
            get {
                return this.ProjectAttachmentFolderIdField;
            }
            set {
                if ((this.ProjectAttachmentFolderIdField.Equals(value) != true)) {
                    this.ProjectAttachmentFolderIdField = value;
                    this.RaisePropertyChanged("ProjectAttachmentFolderId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ProjectAttachmentTypeId {
            get {
                return this.ProjectAttachmentTypeIdField;
            }
            set {
                if ((this.ProjectAttachmentTypeIdField.Equals(value) != true)) {
                    this.ProjectAttachmentTypeIdField = value;
                    this.RaisePropertyChanged("ProjectAttachmentTypeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProjectAttachmentTypeName {
            get {
                return this.ProjectAttachmentTypeNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ProjectAttachmentTypeNameField, value) != true)) {
                    this.ProjectAttachmentTypeNameField = value;
                    this.RaisePropertyChanged("ProjectAttachmentTypeName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Size {
            get {
                return this.SizeField;
            }
            set {
                if ((this.SizeField.Equals(value) != true)) {
                    this.SizeField = value;
                    this.RaisePropertyChanged("Size");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Tags {
            get {
                return this.TagsField;
            }
            set {
                if ((object.ReferenceEquals(this.TagsField, value) != true)) {
                    this.TagsField = value;
                    this.RaisePropertyChanged("Tags");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime UploadDate {
            get {
                return this.UploadDateField;
            }
            set {
                if ((this.UploadDateField.Equals(value) != true)) {
                    this.UploadDateField = value;
                    this.RaisePropertyChanged("UploadDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDocumentVersion[] Versions {
            get {
                return this.VersionsField;
            }
            set {
                if ((object.ReferenceEquals(this.VersionsField, value) != true)) {
                    this.VersionsField = value;
                    this.RaisePropertyChanged("Versions");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteIncident", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteIncident : Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteArtifact {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ActualEffortField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> ClosedDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CompletionPercentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int[] ComponentIdsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> CreationDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> DetectedReleaseIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DetectedReleaseVersionNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> EstimatedEffortField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> FixedBuildIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FixedBuildNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> IncidentIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> IncidentStatusIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IncidentStatusNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> IncidentStatusOpenStatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> IncidentTypeIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IncidentTypeNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime LastUpdateDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> OpenerIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OpenerNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> OwnerIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OwnerNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> PriorityIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PriorityNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProjectNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ProjectedEffortField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> RemainingEffortField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ResolvedReleaseIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ResolvedReleaseVersionNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> SeverityIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SeverityNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> StartDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int[] TestRunStepIdsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> VerifiedReleaseIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VerifiedReleaseVersionNumberField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ActualEffort {
            get {
                return this.ActualEffortField;
            }
            set {
                if ((this.ActualEffortField.Equals(value) != true)) {
                    this.ActualEffortField = value;
                    this.RaisePropertyChanged("ActualEffort");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> ClosedDate {
            get {
                return this.ClosedDateField;
            }
            set {
                if ((this.ClosedDateField.Equals(value) != true)) {
                    this.ClosedDateField = value;
                    this.RaisePropertyChanged("ClosedDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CompletionPercent {
            get {
                return this.CompletionPercentField;
            }
            set {
                if ((this.CompletionPercentField.Equals(value) != true)) {
                    this.CompletionPercentField = value;
                    this.RaisePropertyChanged("CompletionPercent");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int[] ComponentIds {
            get {
                return this.ComponentIdsField;
            }
            set {
                if ((object.ReferenceEquals(this.ComponentIdsField, value) != true)) {
                    this.ComponentIdsField = value;
                    this.RaisePropertyChanged("ComponentIds");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> CreationDate {
            get {
                return this.CreationDateField;
            }
            set {
                if ((this.CreationDateField.Equals(value) != true)) {
                    this.CreationDateField = value;
                    this.RaisePropertyChanged("CreationDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> DetectedReleaseId {
            get {
                return this.DetectedReleaseIdField;
            }
            set {
                if ((this.DetectedReleaseIdField.Equals(value) != true)) {
                    this.DetectedReleaseIdField = value;
                    this.RaisePropertyChanged("DetectedReleaseId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DetectedReleaseVersionNumber {
            get {
                return this.DetectedReleaseVersionNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.DetectedReleaseVersionNumberField, value) != true)) {
                    this.DetectedReleaseVersionNumberField = value;
                    this.RaisePropertyChanged("DetectedReleaseVersionNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> EstimatedEffort {
            get {
                return this.EstimatedEffortField;
            }
            set {
                if ((this.EstimatedEffortField.Equals(value) != true)) {
                    this.EstimatedEffortField = value;
                    this.RaisePropertyChanged("EstimatedEffort");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> FixedBuildId {
            get {
                return this.FixedBuildIdField;
            }
            set {
                if ((this.FixedBuildIdField.Equals(value) != true)) {
                    this.FixedBuildIdField = value;
                    this.RaisePropertyChanged("FixedBuildId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FixedBuildName {
            get {
                return this.FixedBuildNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FixedBuildNameField, value) != true)) {
                    this.FixedBuildNameField = value;
                    this.RaisePropertyChanged("FixedBuildName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> IncidentId {
            get {
                return this.IncidentIdField;
            }
            set {
                if ((this.IncidentIdField.Equals(value) != true)) {
                    this.IncidentIdField = value;
                    this.RaisePropertyChanged("IncidentId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> IncidentStatusId {
            get {
                return this.IncidentStatusIdField;
            }
            set {
                if ((this.IncidentStatusIdField.Equals(value) != true)) {
                    this.IncidentStatusIdField = value;
                    this.RaisePropertyChanged("IncidentStatusId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IncidentStatusName {
            get {
                return this.IncidentStatusNameField;
            }
            set {
                if ((object.ReferenceEquals(this.IncidentStatusNameField, value) != true)) {
                    this.IncidentStatusNameField = value;
                    this.RaisePropertyChanged("IncidentStatusName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<bool> IncidentStatusOpenStatus {
            get {
                return this.IncidentStatusOpenStatusField;
            }
            set {
                if ((this.IncidentStatusOpenStatusField.Equals(value) != true)) {
                    this.IncidentStatusOpenStatusField = value;
                    this.RaisePropertyChanged("IncidentStatusOpenStatus");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> IncidentTypeId {
            get {
                return this.IncidentTypeIdField;
            }
            set {
                if ((this.IncidentTypeIdField.Equals(value) != true)) {
                    this.IncidentTypeIdField = value;
                    this.RaisePropertyChanged("IncidentTypeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IncidentTypeName {
            get {
                return this.IncidentTypeNameField;
            }
            set {
                if ((object.ReferenceEquals(this.IncidentTypeNameField, value) != true)) {
                    this.IncidentTypeNameField = value;
                    this.RaisePropertyChanged("IncidentTypeName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime LastUpdateDate {
            get {
                return this.LastUpdateDateField;
            }
            set {
                if ((this.LastUpdateDateField.Equals(value) != true)) {
                    this.LastUpdateDateField = value;
                    this.RaisePropertyChanged("LastUpdateDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> OpenerId {
            get {
                return this.OpenerIdField;
            }
            set {
                if ((this.OpenerIdField.Equals(value) != true)) {
                    this.OpenerIdField = value;
                    this.RaisePropertyChanged("OpenerId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OpenerName {
            get {
                return this.OpenerNameField;
            }
            set {
                if ((object.ReferenceEquals(this.OpenerNameField, value) != true)) {
                    this.OpenerNameField = value;
                    this.RaisePropertyChanged("OpenerName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> OwnerId {
            get {
                return this.OwnerIdField;
            }
            set {
                if ((this.OwnerIdField.Equals(value) != true)) {
                    this.OwnerIdField = value;
                    this.RaisePropertyChanged("OwnerId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OwnerName {
            get {
                return this.OwnerNameField;
            }
            set {
                if ((object.ReferenceEquals(this.OwnerNameField, value) != true)) {
                    this.OwnerNameField = value;
                    this.RaisePropertyChanged("OwnerName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> PriorityId {
            get {
                return this.PriorityIdField;
            }
            set {
                if ((this.PriorityIdField.Equals(value) != true)) {
                    this.PriorityIdField = value;
                    this.RaisePropertyChanged("PriorityId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PriorityName {
            get {
                return this.PriorityNameField;
            }
            set {
                if ((object.ReferenceEquals(this.PriorityNameField, value) != true)) {
                    this.PriorityNameField = value;
                    this.RaisePropertyChanged("PriorityName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProjectName {
            get {
                return this.ProjectNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ProjectNameField, value) != true)) {
                    this.ProjectNameField = value;
                    this.RaisePropertyChanged("ProjectName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ProjectedEffort {
            get {
                return this.ProjectedEffortField;
            }
            set {
                if ((this.ProjectedEffortField.Equals(value) != true)) {
                    this.ProjectedEffortField = value;
                    this.RaisePropertyChanged("ProjectedEffort");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> RemainingEffort {
            get {
                return this.RemainingEffortField;
            }
            set {
                if ((this.RemainingEffortField.Equals(value) != true)) {
                    this.RemainingEffortField = value;
                    this.RaisePropertyChanged("RemainingEffort");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ResolvedReleaseId {
            get {
                return this.ResolvedReleaseIdField;
            }
            set {
                if ((this.ResolvedReleaseIdField.Equals(value) != true)) {
                    this.ResolvedReleaseIdField = value;
                    this.RaisePropertyChanged("ResolvedReleaseId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ResolvedReleaseVersionNumber {
            get {
                return this.ResolvedReleaseVersionNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.ResolvedReleaseVersionNumberField, value) != true)) {
                    this.ResolvedReleaseVersionNumberField = value;
                    this.RaisePropertyChanged("ResolvedReleaseVersionNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> SeverityId {
            get {
                return this.SeverityIdField;
            }
            set {
                if ((this.SeverityIdField.Equals(value) != true)) {
                    this.SeverityIdField = value;
                    this.RaisePropertyChanged("SeverityId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SeverityName {
            get {
                return this.SeverityNameField;
            }
            set {
                if ((object.ReferenceEquals(this.SeverityNameField, value) != true)) {
                    this.SeverityNameField = value;
                    this.RaisePropertyChanged("SeverityName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> StartDate {
            get {
                return this.StartDateField;
            }
            set {
                if ((this.StartDateField.Equals(value) != true)) {
                    this.StartDateField = value;
                    this.RaisePropertyChanged("StartDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int[] TestRunStepIds {
            get {
                return this.TestRunStepIdsField;
            }
            set {
                if ((object.ReferenceEquals(this.TestRunStepIdsField, value) != true)) {
                    this.TestRunStepIdsField = value;
                    this.RaisePropertyChanged("TestRunStepIds");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> VerifiedReleaseId {
            get {
                return this.VerifiedReleaseIdField;
            }
            set {
                if ((this.VerifiedReleaseIdField.Equals(value) != true)) {
                    this.VerifiedReleaseIdField = value;
                    this.RaisePropertyChanged("VerifiedReleaseId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string VerifiedReleaseVersionNumber {
            get {
                return this.VerifiedReleaseVersionNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.VerifiedReleaseVersionNumberField, value) != true)) {
                    this.VerifiedReleaseVersionNumberField = value;
                    this.RaisePropertyChanged("VerifiedReleaseVersionNumber");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteRelease", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteRelease : Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteArtifact {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> AvailableEffortField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CountBlockedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CountCautionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CountFailedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CountNotApplicableField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CountNotRunField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CountPassedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreationDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> CreatorIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CreatorNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int DaysNonWorkingField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime EndDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FullNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IndentLevelField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime LastUpdateDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> OwnerIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OwnerNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> PlannedEffortField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ReleaseIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ReleaseStatusIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ReleaseStatusNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ReleaseTypeIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ReleaseTypeNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ResourceCountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime StartDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool SummaryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> TaskActualEffortField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> TaskCountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> TaskEstimatedEffortField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VersionNumberField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Active {
            get {
                return this.ActiveField;
            }
            set {
                if ((this.ActiveField.Equals(value) != true)) {
                    this.ActiveField = value;
                    this.RaisePropertyChanged("Active");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> AvailableEffort {
            get {
                return this.AvailableEffortField;
            }
            set {
                if ((this.AvailableEffortField.Equals(value) != true)) {
                    this.AvailableEffortField = value;
                    this.RaisePropertyChanged("AvailableEffort");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CountBlocked {
            get {
                return this.CountBlockedField;
            }
            set {
                if ((this.CountBlockedField.Equals(value) != true)) {
                    this.CountBlockedField = value;
                    this.RaisePropertyChanged("CountBlocked");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CountCaution {
            get {
                return this.CountCautionField;
            }
            set {
                if ((this.CountCautionField.Equals(value) != true)) {
                    this.CountCautionField = value;
                    this.RaisePropertyChanged("CountCaution");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CountFailed {
            get {
                return this.CountFailedField;
            }
            set {
                if ((this.CountFailedField.Equals(value) != true)) {
                    this.CountFailedField = value;
                    this.RaisePropertyChanged("CountFailed");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CountNotApplicable {
            get {
                return this.CountNotApplicableField;
            }
            set {
                if ((this.CountNotApplicableField.Equals(value) != true)) {
                    this.CountNotApplicableField = value;
                    this.RaisePropertyChanged("CountNotApplicable");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CountNotRun {
            get {
                return this.CountNotRunField;
            }
            set {
                if ((this.CountNotRunField.Equals(value) != true)) {
                    this.CountNotRunField = value;
                    this.RaisePropertyChanged("CountNotRun");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CountPassed {
            get {
                return this.CountPassedField;
            }
            set {
                if ((this.CountPassedField.Equals(value) != true)) {
                    this.CountPassedField = value;
                    this.RaisePropertyChanged("CountPassed");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreationDate {
            get {
                return this.CreationDateField;
            }
            set {
                if ((this.CreationDateField.Equals(value) != true)) {
                    this.CreationDateField = value;
                    this.RaisePropertyChanged("CreationDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> CreatorId {
            get {
                return this.CreatorIdField;
            }
            set {
                if ((this.CreatorIdField.Equals(value) != true)) {
                    this.CreatorIdField = value;
                    this.RaisePropertyChanged("CreatorId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CreatorName {
            get {
                return this.CreatorNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CreatorNameField, value) != true)) {
                    this.CreatorNameField = value;
                    this.RaisePropertyChanged("CreatorName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int DaysNonWorking {
            get {
                return this.DaysNonWorkingField;
            }
            set {
                if ((this.DaysNonWorkingField.Equals(value) != true)) {
                    this.DaysNonWorkingField = value;
                    this.RaisePropertyChanged("DaysNonWorking");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime EndDate {
            get {
                return this.EndDateField;
            }
            set {
                if ((this.EndDateField.Equals(value) != true)) {
                    this.EndDateField = value;
                    this.RaisePropertyChanged("EndDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FullName {
            get {
                return this.FullNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FullNameField, value) != true)) {
                    this.FullNameField = value;
                    this.RaisePropertyChanged("FullName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IndentLevel {
            get {
                return this.IndentLevelField;
            }
            set {
                if ((object.ReferenceEquals(this.IndentLevelField, value) != true)) {
                    this.IndentLevelField = value;
                    this.RaisePropertyChanged("IndentLevel");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime LastUpdateDate {
            get {
                return this.LastUpdateDateField;
            }
            set {
                if ((this.LastUpdateDateField.Equals(value) != true)) {
                    this.LastUpdateDateField = value;
                    this.RaisePropertyChanged("LastUpdateDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> OwnerId {
            get {
                return this.OwnerIdField;
            }
            set {
                if ((this.OwnerIdField.Equals(value) != true)) {
                    this.OwnerIdField = value;
                    this.RaisePropertyChanged("OwnerId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OwnerName {
            get {
                return this.OwnerNameField;
            }
            set {
                if ((object.ReferenceEquals(this.OwnerNameField, value) != true)) {
                    this.OwnerNameField = value;
                    this.RaisePropertyChanged("OwnerName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> PlannedEffort {
            get {
                return this.PlannedEffortField;
            }
            set {
                if ((this.PlannedEffortField.Equals(value) != true)) {
                    this.PlannedEffortField = value;
                    this.RaisePropertyChanged("PlannedEffort");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ReleaseId {
            get {
                return this.ReleaseIdField;
            }
            set {
                if ((this.ReleaseIdField.Equals(value) != true)) {
                    this.ReleaseIdField = value;
                    this.RaisePropertyChanged("ReleaseId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ReleaseStatusId {
            get {
                return this.ReleaseStatusIdField;
            }
            set {
                if ((this.ReleaseStatusIdField.Equals(value) != true)) {
                    this.ReleaseStatusIdField = value;
                    this.RaisePropertyChanged("ReleaseStatusId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ReleaseStatusName {
            get {
                return this.ReleaseStatusNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ReleaseStatusNameField, value) != true)) {
                    this.ReleaseStatusNameField = value;
                    this.RaisePropertyChanged("ReleaseStatusName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ReleaseTypeId {
            get {
                return this.ReleaseTypeIdField;
            }
            set {
                if ((this.ReleaseTypeIdField.Equals(value) != true)) {
                    this.ReleaseTypeIdField = value;
                    this.RaisePropertyChanged("ReleaseTypeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ReleaseTypeName {
            get {
                return this.ReleaseTypeNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ReleaseTypeNameField, value) != true)) {
                    this.ReleaseTypeNameField = value;
                    this.RaisePropertyChanged("ReleaseTypeName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ResourceCount {
            get {
                return this.ResourceCountField;
            }
            set {
                if ((this.ResourceCountField.Equals(value) != true)) {
                    this.ResourceCountField = value;
                    this.RaisePropertyChanged("ResourceCount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime StartDate {
            get {
                return this.StartDateField;
            }
            set {
                if ((this.StartDateField.Equals(value) != true)) {
                    this.StartDateField = value;
                    this.RaisePropertyChanged("StartDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Summary {
            get {
                return this.SummaryField;
            }
            set {
                if ((this.SummaryField.Equals(value) != true)) {
                    this.SummaryField = value;
                    this.RaisePropertyChanged("Summary");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> TaskActualEffort {
            get {
                return this.TaskActualEffortField;
            }
            set {
                if ((this.TaskActualEffortField.Equals(value) != true)) {
                    this.TaskActualEffortField = value;
                    this.RaisePropertyChanged("TaskActualEffort");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> TaskCount {
            get {
                return this.TaskCountField;
            }
            set {
                if ((this.TaskCountField.Equals(value) != true)) {
                    this.TaskCountField = value;
                    this.RaisePropertyChanged("TaskCount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> TaskEstimatedEffort {
            get {
                return this.TaskEstimatedEffortField;
            }
            set {
                if ((this.TaskEstimatedEffortField.Equals(value) != true)) {
                    this.TaskEstimatedEffortField = value;
                    this.RaisePropertyChanged("TaskEstimatedEffort");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string VersionNumber {
            get {
                return this.VersionNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.VersionNumberField, value) != true)) {
                    this.VersionNumberField = value;
                    this.RaisePropertyChanged("VersionNumber");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteRequirement", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteRequirement : Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteArtifact {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> AuthorIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AuthorNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ComponentIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> CoverageCountBlockedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> CoverageCountCautionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> CoverageCountFailedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> CoverageCountPassedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> CoverageCountTotalField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreationDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<decimal> EstimatePointsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> EstimatedEffortField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ImportanceIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ImportanceNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IndentLevelField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime LastUpdateDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> OwnerIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OwnerNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProjectNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ReleaseIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ReleaseVersionNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> RequirementIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int RequirementTypeIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RequirementTypeNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> StatusIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StatusNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRequirementStep[] StepsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool SummaryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> TaskActualEffortField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> TaskCountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> TaskEstimatedEffortField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> AuthorId {
            get {
                return this.AuthorIdField;
            }
            set {
                if ((this.AuthorIdField.Equals(value) != true)) {
                    this.AuthorIdField = value;
                    this.RaisePropertyChanged("AuthorId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AuthorName {
            get {
                return this.AuthorNameField;
            }
            set {
                if ((object.ReferenceEquals(this.AuthorNameField, value) != true)) {
                    this.AuthorNameField = value;
                    this.RaisePropertyChanged("AuthorName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ComponentId {
            get {
                return this.ComponentIdField;
            }
            set {
                if ((this.ComponentIdField.Equals(value) != true)) {
                    this.ComponentIdField = value;
                    this.RaisePropertyChanged("ComponentId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> CoverageCountBlocked {
            get {
                return this.CoverageCountBlockedField;
            }
            set {
                if ((this.CoverageCountBlockedField.Equals(value) != true)) {
                    this.CoverageCountBlockedField = value;
                    this.RaisePropertyChanged("CoverageCountBlocked");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> CoverageCountCaution {
            get {
                return this.CoverageCountCautionField;
            }
            set {
                if ((this.CoverageCountCautionField.Equals(value) != true)) {
                    this.CoverageCountCautionField = value;
                    this.RaisePropertyChanged("CoverageCountCaution");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> CoverageCountFailed {
            get {
                return this.CoverageCountFailedField;
            }
            set {
                if ((this.CoverageCountFailedField.Equals(value) != true)) {
                    this.CoverageCountFailedField = value;
                    this.RaisePropertyChanged("CoverageCountFailed");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> CoverageCountPassed {
            get {
                return this.CoverageCountPassedField;
            }
            set {
                if ((this.CoverageCountPassedField.Equals(value) != true)) {
                    this.CoverageCountPassedField = value;
                    this.RaisePropertyChanged("CoverageCountPassed");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> CoverageCountTotal {
            get {
                return this.CoverageCountTotalField;
            }
            set {
                if ((this.CoverageCountTotalField.Equals(value) != true)) {
                    this.CoverageCountTotalField = value;
                    this.RaisePropertyChanged("CoverageCountTotal");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreationDate {
            get {
                return this.CreationDateField;
            }
            set {
                if ((this.CreationDateField.Equals(value) != true)) {
                    this.CreationDateField = value;
                    this.RaisePropertyChanged("CreationDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> EstimatePoints {
            get {
                return this.EstimatePointsField;
            }
            set {
                if ((this.EstimatePointsField.Equals(value) != true)) {
                    this.EstimatePointsField = value;
                    this.RaisePropertyChanged("EstimatePoints");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> EstimatedEffort {
            get {
                return this.EstimatedEffortField;
            }
            set {
                if ((this.EstimatedEffortField.Equals(value) != true)) {
                    this.EstimatedEffortField = value;
                    this.RaisePropertyChanged("EstimatedEffort");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ImportanceId {
            get {
                return this.ImportanceIdField;
            }
            set {
                if ((this.ImportanceIdField.Equals(value) != true)) {
                    this.ImportanceIdField = value;
                    this.RaisePropertyChanged("ImportanceId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ImportanceName {
            get {
                return this.ImportanceNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ImportanceNameField, value) != true)) {
                    this.ImportanceNameField = value;
                    this.RaisePropertyChanged("ImportanceName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IndentLevel {
            get {
                return this.IndentLevelField;
            }
            set {
                if ((object.ReferenceEquals(this.IndentLevelField, value) != true)) {
                    this.IndentLevelField = value;
                    this.RaisePropertyChanged("IndentLevel");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime LastUpdateDate {
            get {
                return this.LastUpdateDateField;
            }
            set {
                if ((this.LastUpdateDateField.Equals(value) != true)) {
                    this.LastUpdateDateField = value;
                    this.RaisePropertyChanged("LastUpdateDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> OwnerId {
            get {
                return this.OwnerIdField;
            }
            set {
                if ((this.OwnerIdField.Equals(value) != true)) {
                    this.OwnerIdField = value;
                    this.RaisePropertyChanged("OwnerId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OwnerName {
            get {
                return this.OwnerNameField;
            }
            set {
                if ((object.ReferenceEquals(this.OwnerNameField, value) != true)) {
                    this.OwnerNameField = value;
                    this.RaisePropertyChanged("OwnerName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProjectName {
            get {
                return this.ProjectNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ProjectNameField, value) != true)) {
                    this.ProjectNameField = value;
                    this.RaisePropertyChanged("ProjectName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ReleaseId {
            get {
                return this.ReleaseIdField;
            }
            set {
                if ((this.ReleaseIdField.Equals(value) != true)) {
                    this.ReleaseIdField = value;
                    this.RaisePropertyChanged("ReleaseId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ReleaseVersionNumber {
            get {
                return this.ReleaseVersionNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.ReleaseVersionNumberField, value) != true)) {
                    this.ReleaseVersionNumberField = value;
                    this.RaisePropertyChanged("ReleaseVersionNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> RequirementId {
            get {
                return this.RequirementIdField;
            }
            set {
                if ((this.RequirementIdField.Equals(value) != true)) {
                    this.RequirementIdField = value;
                    this.RaisePropertyChanged("RequirementId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int RequirementTypeId {
            get {
                return this.RequirementTypeIdField;
            }
            set {
                if ((this.RequirementTypeIdField.Equals(value) != true)) {
                    this.RequirementTypeIdField = value;
                    this.RaisePropertyChanged("RequirementTypeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RequirementTypeName {
            get {
                return this.RequirementTypeNameField;
            }
            set {
                if ((object.ReferenceEquals(this.RequirementTypeNameField, value) != true)) {
                    this.RequirementTypeNameField = value;
                    this.RaisePropertyChanged("RequirementTypeName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> StatusId {
            get {
                return this.StatusIdField;
            }
            set {
                if ((this.StatusIdField.Equals(value) != true)) {
                    this.StatusIdField = value;
                    this.RaisePropertyChanged("StatusId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StatusName {
            get {
                return this.StatusNameField;
            }
            set {
                if ((object.ReferenceEquals(this.StatusNameField, value) != true)) {
                    this.StatusNameField = value;
                    this.RaisePropertyChanged("StatusName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRequirementStep[] Steps {
            get {
                return this.StepsField;
            }
            set {
                if ((object.ReferenceEquals(this.StepsField, value) != true)) {
                    this.StepsField = value;
                    this.RaisePropertyChanged("Steps");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Summary {
            get {
                return this.SummaryField;
            }
            set {
                if ((this.SummaryField.Equals(value) != true)) {
                    this.SummaryField = value;
                    this.RaisePropertyChanged("Summary");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> TaskActualEffort {
            get {
                return this.TaskActualEffortField;
            }
            set {
                if ((this.TaskActualEffortField.Equals(value) != true)) {
                    this.TaskActualEffortField = value;
                    this.RaisePropertyChanged("TaskActualEffort");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> TaskCount {
            get {
                return this.TaskCountField;
            }
            set {
                if ((this.TaskCountField.Equals(value) != true)) {
                    this.TaskCountField = value;
                    this.RaisePropertyChanged("TaskCount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> TaskEstimatedEffort {
            get {
                return this.TaskEstimatedEffortField;
            }
            set {
                if ((this.TaskEstimatedEffortField.Equals(value) != true)) {
                    this.TaskEstimatedEffortField = value;
                    this.RaisePropertyChanged("TaskEstimatedEffort");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteTask", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteTask : Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteArtifact {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ActualEffortField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CompletionPercentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ComponentIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreationDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> CreatorIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> EndDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> EstimatedEffortField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime LastUpdateDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> OwnerIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OwnerNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProjectNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ProjectedEffortField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ReleaseIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ReleaseVersionNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> RemainingEffortField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> RequirementIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RequirementNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> StartDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> TaskFolderIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> TaskIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> TaskPriorityIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TaskPriorityNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TaskStatusIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TaskStatusNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TaskTypeIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TaskTypeNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ActualEffort {
            get {
                return this.ActualEffortField;
            }
            set {
                if ((this.ActualEffortField.Equals(value) != true)) {
                    this.ActualEffortField = value;
                    this.RaisePropertyChanged("ActualEffort");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CompletionPercent {
            get {
                return this.CompletionPercentField;
            }
            set {
                if ((this.CompletionPercentField.Equals(value) != true)) {
                    this.CompletionPercentField = value;
                    this.RaisePropertyChanged("CompletionPercent");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ComponentId {
            get {
                return this.ComponentIdField;
            }
            set {
                if ((this.ComponentIdField.Equals(value) != true)) {
                    this.ComponentIdField = value;
                    this.RaisePropertyChanged("ComponentId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreationDate {
            get {
                return this.CreationDateField;
            }
            set {
                if ((this.CreationDateField.Equals(value) != true)) {
                    this.CreationDateField = value;
                    this.RaisePropertyChanged("CreationDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> CreatorId {
            get {
                return this.CreatorIdField;
            }
            set {
                if ((this.CreatorIdField.Equals(value) != true)) {
                    this.CreatorIdField = value;
                    this.RaisePropertyChanged("CreatorId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> EndDate {
            get {
                return this.EndDateField;
            }
            set {
                if ((this.EndDateField.Equals(value) != true)) {
                    this.EndDateField = value;
                    this.RaisePropertyChanged("EndDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> EstimatedEffort {
            get {
                return this.EstimatedEffortField;
            }
            set {
                if ((this.EstimatedEffortField.Equals(value) != true)) {
                    this.EstimatedEffortField = value;
                    this.RaisePropertyChanged("EstimatedEffort");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime LastUpdateDate {
            get {
                return this.LastUpdateDateField;
            }
            set {
                if ((this.LastUpdateDateField.Equals(value) != true)) {
                    this.LastUpdateDateField = value;
                    this.RaisePropertyChanged("LastUpdateDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> OwnerId {
            get {
                return this.OwnerIdField;
            }
            set {
                if ((this.OwnerIdField.Equals(value) != true)) {
                    this.OwnerIdField = value;
                    this.RaisePropertyChanged("OwnerId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OwnerName {
            get {
                return this.OwnerNameField;
            }
            set {
                if ((object.ReferenceEquals(this.OwnerNameField, value) != true)) {
                    this.OwnerNameField = value;
                    this.RaisePropertyChanged("OwnerName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProjectName {
            get {
                return this.ProjectNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ProjectNameField, value) != true)) {
                    this.ProjectNameField = value;
                    this.RaisePropertyChanged("ProjectName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ProjectedEffort {
            get {
                return this.ProjectedEffortField;
            }
            set {
                if ((this.ProjectedEffortField.Equals(value) != true)) {
                    this.ProjectedEffortField = value;
                    this.RaisePropertyChanged("ProjectedEffort");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ReleaseId {
            get {
                return this.ReleaseIdField;
            }
            set {
                if ((this.ReleaseIdField.Equals(value) != true)) {
                    this.ReleaseIdField = value;
                    this.RaisePropertyChanged("ReleaseId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ReleaseVersionNumber {
            get {
                return this.ReleaseVersionNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.ReleaseVersionNumberField, value) != true)) {
                    this.ReleaseVersionNumberField = value;
                    this.RaisePropertyChanged("ReleaseVersionNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> RemainingEffort {
            get {
                return this.RemainingEffortField;
            }
            set {
                if ((this.RemainingEffortField.Equals(value) != true)) {
                    this.RemainingEffortField = value;
                    this.RaisePropertyChanged("RemainingEffort");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> RequirementId {
            get {
                return this.RequirementIdField;
            }
            set {
                if ((this.RequirementIdField.Equals(value) != true)) {
                    this.RequirementIdField = value;
                    this.RaisePropertyChanged("RequirementId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RequirementName {
            get {
                return this.RequirementNameField;
            }
            set {
                if ((object.ReferenceEquals(this.RequirementNameField, value) != true)) {
                    this.RequirementNameField = value;
                    this.RaisePropertyChanged("RequirementName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> StartDate {
            get {
                return this.StartDateField;
            }
            set {
                if ((this.StartDateField.Equals(value) != true)) {
                    this.StartDateField = value;
                    this.RaisePropertyChanged("StartDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> TaskFolderId {
            get {
                return this.TaskFolderIdField;
            }
            set {
                if ((this.TaskFolderIdField.Equals(value) != true)) {
                    this.TaskFolderIdField = value;
                    this.RaisePropertyChanged("TaskFolderId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> TaskId {
            get {
                return this.TaskIdField;
            }
            set {
                if ((this.TaskIdField.Equals(value) != true)) {
                    this.TaskIdField = value;
                    this.RaisePropertyChanged("TaskId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> TaskPriorityId {
            get {
                return this.TaskPriorityIdField;
            }
            set {
                if ((this.TaskPriorityIdField.Equals(value) != true)) {
                    this.TaskPriorityIdField = value;
                    this.RaisePropertyChanged("TaskPriorityId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TaskPriorityName {
            get {
                return this.TaskPriorityNameField;
            }
            set {
                if ((object.ReferenceEquals(this.TaskPriorityNameField, value) != true)) {
                    this.TaskPriorityNameField = value;
                    this.RaisePropertyChanged("TaskPriorityName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TaskStatusId {
            get {
                return this.TaskStatusIdField;
            }
            set {
                if ((this.TaskStatusIdField.Equals(value) != true)) {
                    this.TaskStatusIdField = value;
                    this.RaisePropertyChanged("TaskStatusId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TaskStatusName {
            get {
                return this.TaskStatusNameField;
            }
            set {
                if ((object.ReferenceEquals(this.TaskStatusNameField, value) != true)) {
                    this.TaskStatusNameField = value;
                    this.RaisePropertyChanged("TaskStatusName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TaskTypeId {
            get {
                return this.TaskTypeIdField;
            }
            set {
                if ((this.TaskTypeIdField.Equals(value) != true)) {
                    this.TaskTypeIdField = value;
                    this.RaisePropertyChanged("TaskTypeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TaskTypeName {
            get {
                return this.TaskTypeNameField;
            }
            set {
                if ((object.ReferenceEquals(this.TaskTypeNameField, value) != true)) {
                    this.TaskTypeNameField = value;
                    this.RaisePropertyChanged("TaskTypeName");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteArtifactCustomProperty", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteArtifactCustomProperty : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> BooleanValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> DateTimeValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<decimal> DecimalValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteCustomProperty DefinitionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int[] IntegerListValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> IntegerValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PropertyNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StringValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<bool> BooleanValue {
            get {
                return this.BooleanValueField;
            }
            set {
                if ((this.BooleanValueField.Equals(value) != true)) {
                    this.BooleanValueField = value;
                    this.RaisePropertyChanged("BooleanValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> DateTimeValue {
            get {
                return this.DateTimeValueField;
            }
            set {
                if ((this.DateTimeValueField.Equals(value) != true)) {
                    this.DateTimeValueField = value;
                    this.RaisePropertyChanged("DateTimeValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> DecimalValue {
            get {
                return this.DecimalValueField;
            }
            set {
                if ((this.DecimalValueField.Equals(value) != true)) {
                    this.DecimalValueField = value;
                    this.RaisePropertyChanged("DecimalValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteCustomProperty Definition {
            get {
                return this.DefinitionField;
            }
            set {
                if ((object.ReferenceEquals(this.DefinitionField, value) != true)) {
                    this.DefinitionField = value;
                    this.RaisePropertyChanged("Definition");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int[] IntegerListValue {
            get {
                return this.IntegerListValueField;
            }
            set {
                if ((object.ReferenceEquals(this.IntegerListValueField, value) != true)) {
                    this.IntegerListValueField = value;
                    this.RaisePropertyChanged("IntegerListValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> IntegerValue {
            get {
                return this.IntegerValueField;
            }
            set {
                if ((this.IntegerValueField.Equals(value) != true)) {
                    this.IntegerValueField = value;
                    this.RaisePropertyChanged("IntegerValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PropertyNumber {
            get {
                return this.PropertyNumberField;
            }
            set {
                if ((this.PropertyNumberField.Equals(value) != true)) {
                    this.PropertyNumberField = value;
                    this.RaisePropertyChanged("PropertyNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StringValue {
            get {
                return this.StringValueField;
            }
            set {
                if ((object.ReferenceEquals(this.StringValueField, value) != true)) {
                    this.StringValueField = value;
                    this.RaisePropertyChanged("StringValue");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteCustomProperty", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteCustomProperty : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ArtifactTypeIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteCustomList CustomListField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CustomPropertyFieldNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> CustomPropertyIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CustomPropertyTypeIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CustomPropertyTypeNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsDeletedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteCustomPropertyOption[] OptionsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ProjectIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PropertyNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SystemDataTypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ArtifactTypeId {
            get {
                return this.ArtifactTypeIdField;
            }
            set {
                if ((this.ArtifactTypeIdField.Equals(value) != true)) {
                    this.ArtifactTypeIdField = value;
                    this.RaisePropertyChanged("ArtifactTypeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteCustomList CustomList {
            get {
                return this.CustomListField;
            }
            set {
                if ((object.ReferenceEquals(this.CustomListField, value) != true)) {
                    this.CustomListField = value;
                    this.RaisePropertyChanged("CustomList");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CustomPropertyFieldName {
            get {
                return this.CustomPropertyFieldNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CustomPropertyFieldNameField, value) != true)) {
                    this.CustomPropertyFieldNameField = value;
                    this.RaisePropertyChanged("CustomPropertyFieldName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> CustomPropertyId {
            get {
                return this.CustomPropertyIdField;
            }
            set {
                if ((this.CustomPropertyIdField.Equals(value) != true)) {
                    this.CustomPropertyIdField = value;
                    this.RaisePropertyChanged("CustomPropertyId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CustomPropertyTypeId {
            get {
                return this.CustomPropertyTypeIdField;
            }
            set {
                if ((this.CustomPropertyTypeIdField.Equals(value) != true)) {
                    this.CustomPropertyTypeIdField = value;
                    this.RaisePropertyChanged("CustomPropertyTypeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CustomPropertyTypeName {
            get {
                return this.CustomPropertyTypeNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CustomPropertyTypeNameField, value) != true)) {
                    this.CustomPropertyTypeNameField = value;
                    this.RaisePropertyChanged("CustomPropertyTypeName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsDeleted {
            get {
                return this.IsDeletedField;
            }
            set {
                if ((this.IsDeletedField.Equals(value) != true)) {
                    this.IsDeletedField = value;
                    this.RaisePropertyChanged("IsDeleted");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteCustomPropertyOption[] Options {
            get {
                return this.OptionsField;
            }
            set {
                if ((object.ReferenceEquals(this.OptionsField, value) != true)) {
                    this.OptionsField = value;
                    this.RaisePropertyChanged("Options");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ProjectId {
            get {
                return this.ProjectIdField;
            }
            set {
                if ((this.ProjectIdField.Equals(value) != true)) {
                    this.ProjectIdField = value;
                    this.RaisePropertyChanged("ProjectId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PropertyNumber {
            get {
                return this.PropertyNumberField;
            }
            set {
                if ((this.PropertyNumberField.Equals(value) != true)) {
                    this.PropertyNumberField = value;
                    this.RaisePropertyChanged("PropertyNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SystemDataType {
            get {
                return this.SystemDataTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.SystemDataTypeField, value) != true)) {
                    this.SystemDataTypeField = value;
                    this.RaisePropertyChanged("SystemDataType");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteCustomList", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteCustomList : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> CustomPropertyListIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ProjectIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool SortedOnValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteCustomListValue[] ValuesField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Active {
            get {
                return this.ActiveField;
            }
            set {
                if ((this.ActiveField.Equals(value) != true)) {
                    this.ActiveField = value;
                    this.RaisePropertyChanged("Active");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> CustomPropertyListId {
            get {
                return this.CustomPropertyListIdField;
            }
            set {
                if ((this.CustomPropertyListIdField.Equals(value) != true)) {
                    this.CustomPropertyListIdField = value;
                    this.RaisePropertyChanged("CustomPropertyListId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ProjectId {
            get {
                return this.ProjectIdField;
            }
            set {
                if ((this.ProjectIdField.Equals(value) != true)) {
                    this.ProjectIdField = value;
                    this.RaisePropertyChanged("ProjectId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool SortedOnValue {
            get {
                return this.SortedOnValueField;
            }
            set {
                if ((this.SortedOnValueField.Equals(value) != true)) {
                    this.SortedOnValueField = value;
                    this.RaisePropertyChanged("SortedOnValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteCustomListValue[] Values {
            get {
                return this.ValuesField;
            }
            set {
                if ((object.ReferenceEquals(this.ValuesField, value) != true)) {
                    this.ValuesField = value;
                    this.RaisePropertyChanged("Values");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteCustomPropertyOption", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteCustomPropertyOption : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CustomPropertyOptionIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CustomPropertyOptionId {
            get {
                return this.CustomPropertyOptionIdField;
            }
            set {
                if ((this.CustomPropertyOptionIdField.Equals(value) != true)) {
                    this.CustomPropertyOptionIdField = value;
                    this.RaisePropertyChanged("CustomPropertyOptionId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Value {
            get {
                return this.ValueField;
            }
            set {
                if ((object.ReferenceEquals(this.ValueField, value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteCustomListValue", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteCustomListValue : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CustomPropertyListIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> CustomPropertyValueIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Active {
            get {
                return this.ActiveField;
            }
            set {
                if ((this.ActiveField.Equals(value) != true)) {
                    this.ActiveField = value;
                    this.RaisePropertyChanged("Active");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CustomPropertyListId {
            get {
                return this.CustomPropertyListIdField;
            }
            set {
                if ((this.CustomPropertyListIdField.Equals(value) != true)) {
                    this.CustomPropertyListIdField = value;
                    this.RaisePropertyChanged("CustomPropertyListId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> CustomPropertyValueId {
            get {
                return this.CustomPropertyValueIdField;
            }
            set {
                if ((this.CustomPropertyValueIdField.Equals(value) != true)) {
                    this.CustomPropertyValueIdField = value;
                    this.RaisePropertyChanged("CustomPropertyValueId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteTestRunStep", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteTestRunStep : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ActualDurationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ActualResultField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> EndDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ExecutionStatusIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ExpectedResultField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PositionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SampleDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> StartDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> TestCaseIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TestRunIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> TestRunStepIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> TestStepIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ActualDuration {
            get {
                return this.ActualDurationField;
            }
            set {
                if ((this.ActualDurationField.Equals(value) != true)) {
                    this.ActualDurationField = value;
                    this.RaisePropertyChanged("ActualDuration");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ActualResult {
            get {
                return this.ActualResultField;
            }
            set {
                if ((object.ReferenceEquals(this.ActualResultField, value) != true)) {
                    this.ActualResultField = value;
                    this.RaisePropertyChanged("ActualResult");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> EndDate {
            get {
                return this.EndDateField;
            }
            set {
                if ((this.EndDateField.Equals(value) != true)) {
                    this.EndDateField = value;
                    this.RaisePropertyChanged("EndDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ExecutionStatusId {
            get {
                return this.ExecutionStatusIdField;
            }
            set {
                if ((this.ExecutionStatusIdField.Equals(value) != true)) {
                    this.ExecutionStatusIdField = value;
                    this.RaisePropertyChanged("ExecutionStatusId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ExpectedResult {
            get {
                return this.ExpectedResultField;
            }
            set {
                if ((object.ReferenceEquals(this.ExpectedResultField, value) != true)) {
                    this.ExpectedResultField = value;
                    this.RaisePropertyChanged("ExpectedResult");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Position {
            get {
                return this.PositionField;
            }
            set {
                if ((this.PositionField.Equals(value) != true)) {
                    this.PositionField = value;
                    this.RaisePropertyChanged("Position");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SampleData {
            get {
                return this.SampleDataField;
            }
            set {
                if ((object.ReferenceEquals(this.SampleDataField, value) != true)) {
                    this.SampleDataField = value;
                    this.RaisePropertyChanged("SampleData");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> StartDate {
            get {
                return this.StartDateField;
            }
            set {
                if ((this.StartDateField.Equals(value) != true)) {
                    this.StartDateField = value;
                    this.RaisePropertyChanged("StartDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> TestCaseId {
            get {
                return this.TestCaseIdField;
            }
            set {
                if ((this.TestCaseIdField.Equals(value) != true)) {
                    this.TestCaseIdField = value;
                    this.RaisePropertyChanged("TestCaseId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TestRunId {
            get {
                return this.TestRunIdField;
            }
            set {
                if ((this.TestRunIdField.Equals(value) != true)) {
                    this.TestRunIdField = value;
                    this.RaisePropertyChanged("TestRunId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> TestRunStepId {
            get {
                return this.TestRunStepIdField;
            }
            set {
                if ((this.TestRunStepIdField.Equals(value) != true)) {
                    this.TestRunStepIdField = value;
                    this.RaisePropertyChanged("TestRunStepId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> TestStepId {
            get {
                return this.TestStepIdField;
            }
            set {
                if ((this.TestStepIdField.Equals(value) != true)) {
                    this.TestStepIdField = value;
                    this.RaisePropertyChanged("TestStepId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteTestSetTestCaseParameter", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteTestSetTestCaseParameter : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TestCaseParameterIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TestSetTestCaseIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TestCaseParameterId {
            get {
                return this.TestCaseParameterIdField;
            }
            set {
                if ((this.TestCaseParameterIdField.Equals(value) != true)) {
                    this.TestCaseParameterIdField = value;
                    this.RaisePropertyChanged("TestCaseParameterId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TestSetTestCaseId {
            get {
                return this.TestSetTestCaseIdField;
            }
            set {
                if ((this.TestSetTestCaseIdField.Equals(value) != true)) {
                    this.TestSetTestCaseIdField = value;
                    this.RaisePropertyChanged("TestSetTestCaseId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Value {
            get {
                return this.ValueField;
            }
            set {
                if ((object.ReferenceEquals(this.ValueField, value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteDocumentVersion", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteDocumentVersion : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int AttachmentIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> AttachmentVersionIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> AuthorIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AuthorNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FilenameOrUrlField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SizeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime UploadDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VersionNumberField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int AttachmentId {
            get {
                return this.AttachmentIdField;
            }
            set {
                if ((this.AttachmentIdField.Equals(value) != true)) {
                    this.AttachmentIdField = value;
                    this.RaisePropertyChanged("AttachmentId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> AttachmentVersionId {
            get {
                return this.AttachmentVersionIdField;
            }
            set {
                if ((this.AttachmentVersionIdField.Equals(value) != true)) {
                    this.AttachmentVersionIdField = value;
                    this.RaisePropertyChanged("AttachmentVersionId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> AuthorId {
            get {
                return this.AuthorIdField;
            }
            set {
                if ((this.AuthorIdField.Equals(value) != true)) {
                    this.AuthorIdField = value;
                    this.RaisePropertyChanged("AuthorId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AuthorName {
            get {
                return this.AuthorNameField;
            }
            set {
                if ((object.ReferenceEquals(this.AuthorNameField, value) != true)) {
                    this.AuthorNameField = value;
                    this.RaisePropertyChanged("AuthorName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FilenameOrUrl {
            get {
                return this.FilenameOrUrlField;
            }
            set {
                if ((object.ReferenceEquals(this.FilenameOrUrlField, value) != true)) {
                    this.FilenameOrUrlField = value;
                    this.RaisePropertyChanged("FilenameOrUrl");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Size {
            get {
                return this.SizeField;
            }
            set {
                if ((this.SizeField.Equals(value) != true)) {
                    this.SizeField = value;
                    this.RaisePropertyChanged("Size");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime UploadDate {
            get {
                return this.UploadDateField;
            }
            set {
                if ((this.UploadDateField.Equals(value) != true)) {
                    this.UploadDateField = value;
                    this.RaisePropertyChanged("UploadDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string VersionNumber {
            get {
                return this.VersionNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.VersionNumberField, value) != true)) {
                    this.VersionNumberField = value;
                    this.RaisePropertyChanged("VersionNumber");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ValidationFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
    [System.SerializableAttribute()]
    public partial struct ValidationFaultMessage : System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ValidationFaultMessageItem[] MessagesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SummaryField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ValidationFaultMessageItem[] Messages {
            get {
                return this.MessagesField;
            }
            set {
                if ((object.ReferenceEquals(this.MessagesField, value) != true)) {
                    this.MessagesField = value;
                    this.RaisePropertyChanged("Messages");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Summary {
            get {
                return this.SummaryField;
            }
            set {
                if ((object.ReferenceEquals(this.SummaryField, value) != true)) {
                    this.SummaryField = value;
                    this.RaisePropertyChanged("Summary");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ValidationFaultMessageItem", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
    [System.SerializableAttribute()]
    public partial struct ValidationFaultMessageItem : System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FieldNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FieldName {
            get {
                return this.FieldNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FieldNameField, value) != true)) {
                    this.FieldNameField = value;
                    this.RaisePropertyChanged("FieldName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteComment", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteComment : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ArtifactIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> CommentIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> CreationDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsDeletedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsPermanentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TextField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> UserIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ArtifactId {
            get {
                return this.ArtifactIdField;
            }
            set {
                if ((this.ArtifactIdField.Equals(value) != true)) {
                    this.ArtifactIdField = value;
                    this.RaisePropertyChanged("ArtifactId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> CommentId {
            get {
                return this.CommentIdField;
            }
            set {
                if ((this.CommentIdField.Equals(value) != true)) {
                    this.CommentIdField = value;
                    this.RaisePropertyChanged("CommentId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> CreationDate {
            get {
                return this.CreationDateField;
            }
            set {
                if ((this.CreationDateField.Equals(value) != true)) {
                    this.CreationDateField = value;
                    this.RaisePropertyChanged("CreationDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsDeleted {
            get {
                return this.IsDeletedField;
            }
            set {
                if ((this.IsDeletedField.Equals(value) != true)) {
                    this.IsDeletedField = value;
                    this.RaisePropertyChanged("IsDeleted");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsPermanent {
            get {
                return this.IsPermanentField;
            }
            set {
                if ((this.IsPermanentField.Equals(value) != true)) {
                    this.IsPermanentField = value;
                    this.RaisePropertyChanged("IsPermanent");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Text {
            get {
                return this.TextField;
            }
            set {
                if ((object.ReferenceEquals(this.TextField, value) != true)) {
                    this.TextField = value;
                    this.RaisePropertyChanged("Text");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> UserId {
            get {
                return this.UserIdField;
            }
            set {
                if ((this.UserIdField.Equals(value) != true)) {
                    this.UserIdField = value;
                    this.RaisePropertyChanged("UserId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName {
            get {
                return this.UserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UserNameField, value) != true)) {
                    this.UserNameField = value;
                    this.RaisePropertyChanged("UserName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteTaskStatus", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteTaskStatus : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PositionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TaskStatusIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Active {
            get {
                return this.ActiveField;
            }
            set {
                if ((this.ActiveField.Equals(value) != true)) {
                    this.ActiveField = value;
                    this.RaisePropertyChanged("Active");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Position {
            get {
                return this.PositionField;
            }
            set {
                if ((this.PositionField.Equals(value) != true)) {
                    this.PositionField = value;
                    this.RaisePropertyChanged("Position");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TaskStatusId {
            get {
                return this.TaskStatusIdField;
            }
            set {
                if ((this.TaskStatusIdField.Equals(value) != true)) {
                    this.TaskStatusIdField = value;
                    this.RaisePropertyChanged("TaskStatusId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteTaskType", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteTaskType : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PositionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TaskTypeIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> WorkflowIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Active {
            get {
                return this.ActiveField;
            }
            set {
                if ((this.ActiveField.Equals(value) != true)) {
                    this.ActiveField = value;
                    this.RaisePropertyChanged("Active");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Position {
            get {
                return this.PositionField;
            }
            set {
                if ((this.PositionField.Equals(value) != true)) {
                    this.PositionField = value;
                    this.RaisePropertyChanged("Position");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TaskTypeId {
            get {
                return this.TaskTypeIdField;
            }
            set {
                if ((this.TaskTypeIdField.Equals(value) != true)) {
                    this.TaskTypeIdField = value;
                    this.RaisePropertyChanged("TaskTypeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> WorkflowId {
            get {
                return this.WorkflowIdField;
            }
            set {
                if ((this.WorkflowIdField.Equals(value) != true)) {
                    this.WorkflowIdField = value;
                    this.RaisePropertyChanged("WorkflowId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteWorkflowField", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteWorkflowField : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FieldCaptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int FieldIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FieldNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int FieldStateIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FieldCaption {
            get {
                return this.FieldCaptionField;
            }
            set {
                if ((object.ReferenceEquals(this.FieldCaptionField, value) != true)) {
                    this.FieldCaptionField = value;
                    this.RaisePropertyChanged("FieldCaption");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int FieldId {
            get {
                return this.FieldIdField;
            }
            set {
                if ((this.FieldIdField.Equals(value) != true)) {
                    this.FieldIdField = value;
                    this.RaisePropertyChanged("FieldId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FieldName {
            get {
                return this.FieldNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FieldNameField, value) != true)) {
                    this.FieldNameField = value;
                    this.RaisePropertyChanged("FieldName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int FieldStateId {
            get {
                return this.FieldStateIdField;
            }
            set {
                if ((this.FieldStateIdField.Equals(value) != true)) {
                    this.FieldStateIdField = value;
                    this.RaisePropertyChanged("FieldStateId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteWorkflowTransition", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteWorkflowTransition : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ExecuteByCreatorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ExecuteByOwnerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool RequireSignatureField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int StatusId_InputField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int StatusId_OutputField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StatusName_InputField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StatusName_OutputField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TransitionIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int WorkflowIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool ExecuteByCreator {
            get {
                return this.ExecuteByCreatorField;
            }
            set {
                if ((this.ExecuteByCreatorField.Equals(value) != true)) {
                    this.ExecuteByCreatorField = value;
                    this.RaisePropertyChanged("ExecuteByCreator");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool ExecuteByOwner {
            get {
                return this.ExecuteByOwnerField;
            }
            set {
                if ((this.ExecuteByOwnerField.Equals(value) != true)) {
                    this.ExecuteByOwnerField = value;
                    this.RaisePropertyChanged("ExecuteByOwner");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool RequireSignature {
            get {
                return this.RequireSignatureField;
            }
            set {
                if ((this.RequireSignatureField.Equals(value) != true)) {
                    this.RequireSignatureField = value;
                    this.RaisePropertyChanged("RequireSignature");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int StatusId_Input {
            get {
                return this.StatusId_InputField;
            }
            set {
                if ((this.StatusId_InputField.Equals(value) != true)) {
                    this.StatusId_InputField = value;
                    this.RaisePropertyChanged("StatusId_Input");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int StatusId_Output {
            get {
                return this.StatusId_OutputField;
            }
            set {
                if ((this.StatusId_OutputField.Equals(value) != true)) {
                    this.StatusId_OutputField = value;
                    this.RaisePropertyChanged("StatusId_Output");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StatusName_Input {
            get {
                return this.StatusName_InputField;
            }
            set {
                if ((object.ReferenceEquals(this.StatusName_InputField, value) != true)) {
                    this.StatusName_InputField = value;
                    this.RaisePropertyChanged("StatusName_Input");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StatusName_Output {
            get {
                return this.StatusName_OutputField;
            }
            set {
                if ((object.ReferenceEquals(this.StatusName_OutputField, value) != true)) {
                    this.StatusName_OutputField = value;
                    this.RaisePropertyChanged("StatusName_Output");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TransitionId {
            get {
                return this.TransitionIdField;
            }
            set {
                if ((this.TransitionIdField.Equals(value) != true)) {
                    this.TransitionIdField = value;
                    this.RaisePropertyChanged("TransitionId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int WorkflowId {
            get {
                return this.WorkflowIdField;
            }
            set {
                if ((this.WorkflowIdField.Equals(value) != true)) {
                    this.WorkflowIdField = value;
                    this.RaisePropertyChanged("WorkflowId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteWorkflowCustomProperty", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteWorkflowCustomProperty : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CustomPropertyIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FieldCaptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FieldNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int FieldStateIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CustomPropertyId {
            get {
                return this.CustomPropertyIdField;
            }
            set {
                if ((this.CustomPropertyIdField.Equals(value) != true)) {
                    this.CustomPropertyIdField = value;
                    this.RaisePropertyChanged("CustomPropertyId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FieldCaption {
            get {
                return this.FieldCaptionField;
            }
            set {
                if ((object.ReferenceEquals(this.FieldCaptionField, value) != true)) {
                    this.FieldCaptionField = value;
                    this.RaisePropertyChanged("FieldCaption");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FieldName {
            get {
                return this.FieldNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FieldNameField, value) != true)) {
                    this.FieldNameField = value;
                    this.RaisePropertyChanged("FieldName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int FieldStateId {
            get {
                return this.FieldStateIdField;
            }
            set {
                if ((this.FieldStateIdField.Equals(value) != true)) {
                    this.FieldStateIdField = value;
                    this.RaisePropertyChanged("FieldStateId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteTaskFolder", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteTaskFolder : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IndentLevelField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ParentTaskFolderIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ProjectIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> TaskFolderIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IndentLevel {
            get {
                return this.IndentLevelField;
            }
            set {
                if ((object.ReferenceEquals(this.IndentLevelField, value) != true)) {
                    this.IndentLevelField = value;
                    this.RaisePropertyChanged("IndentLevel");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ParentTaskFolderId {
            get {
                return this.ParentTaskFolderIdField;
            }
            set {
                if ((this.ParentTaskFolderIdField.Equals(value) != true)) {
                    this.ParentTaskFolderIdField = value;
                    this.RaisePropertyChanged("ParentTaskFolderId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ProjectId {
            get {
                return this.ProjectIdField;
            }
            set {
                if ((this.ProjectIdField.Equals(value) != true)) {
                    this.ProjectIdField = value;
                    this.RaisePropertyChanged("ProjectId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> TaskFolderId {
            get {
                return this.TaskFolderIdField;
            }
            set {
                if ((this.TaskFolderIdField.Equals(value) != true)) {
                    this.TaskFolderIdField = value;
                    this.RaisePropertyChanged("TaskFolderId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteTestCaseFolder", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteTestCaseFolder : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ActualDurationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CountBlockedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CountCautionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CountFailedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CountNotApplicableField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CountNotRunField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CountPassedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> EstimatedDurationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> ExecutionDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IndentLevelField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime LastUpdateDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ParentTestCaseFolderIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ProjectIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProjectNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> TestCaseFolderIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ActualDuration {
            get {
                return this.ActualDurationField;
            }
            set {
                if ((this.ActualDurationField.Equals(value) != true)) {
                    this.ActualDurationField = value;
                    this.RaisePropertyChanged("ActualDuration");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CountBlocked {
            get {
                return this.CountBlockedField;
            }
            set {
                if ((this.CountBlockedField.Equals(value) != true)) {
                    this.CountBlockedField = value;
                    this.RaisePropertyChanged("CountBlocked");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CountCaution {
            get {
                return this.CountCautionField;
            }
            set {
                if ((this.CountCautionField.Equals(value) != true)) {
                    this.CountCautionField = value;
                    this.RaisePropertyChanged("CountCaution");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CountFailed {
            get {
                return this.CountFailedField;
            }
            set {
                if ((this.CountFailedField.Equals(value) != true)) {
                    this.CountFailedField = value;
                    this.RaisePropertyChanged("CountFailed");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CountNotApplicable {
            get {
                return this.CountNotApplicableField;
            }
            set {
                if ((this.CountNotApplicableField.Equals(value) != true)) {
                    this.CountNotApplicableField = value;
                    this.RaisePropertyChanged("CountNotApplicable");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CountNotRun {
            get {
                return this.CountNotRunField;
            }
            set {
                if ((this.CountNotRunField.Equals(value) != true)) {
                    this.CountNotRunField = value;
                    this.RaisePropertyChanged("CountNotRun");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CountPassed {
            get {
                return this.CountPassedField;
            }
            set {
                if ((this.CountPassedField.Equals(value) != true)) {
                    this.CountPassedField = value;
                    this.RaisePropertyChanged("CountPassed");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> EstimatedDuration {
            get {
                return this.EstimatedDurationField;
            }
            set {
                if ((this.EstimatedDurationField.Equals(value) != true)) {
                    this.EstimatedDurationField = value;
                    this.RaisePropertyChanged("EstimatedDuration");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> ExecutionDate {
            get {
                return this.ExecutionDateField;
            }
            set {
                if ((this.ExecutionDateField.Equals(value) != true)) {
                    this.ExecutionDateField = value;
                    this.RaisePropertyChanged("ExecutionDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IndentLevel {
            get {
                return this.IndentLevelField;
            }
            set {
                if ((object.ReferenceEquals(this.IndentLevelField, value) != true)) {
                    this.IndentLevelField = value;
                    this.RaisePropertyChanged("IndentLevel");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime LastUpdateDate {
            get {
                return this.LastUpdateDateField;
            }
            set {
                if ((this.LastUpdateDateField.Equals(value) != true)) {
                    this.LastUpdateDateField = value;
                    this.RaisePropertyChanged("LastUpdateDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ParentTestCaseFolderId {
            get {
                return this.ParentTestCaseFolderIdField;
            }
            set {
                if ((this.ParentTestCaseFolderIdField.Equals(value) != true)) {
                    this.ParentTestCaseFolderIdField = value;
                    this.RaisePropertyChanged("ParentTestCaseFolderId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ProjectId {
            get {
                return this.ProjectIdField;
            }
            set {
                if ((this.ProjectIdField.Equals(value) != true)) {
                    this.ProjectIdField = value;
                    this.RaisePropertyChanged("ProjectId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProjectName {
            get {
                return this.ProjectNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ProjectNameField, value) != true)) {
                    this.ProjectNameField = value;
                    this.RaisePropertyChanged("ProjectName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> TestCaseFolderId {
            get {
                return this.TestCaseFolderIdField;
            }
            set {
                if ((this.TestCaseFolderIdField.Equals(value) != true)) {
                    this.TestCaseFolderIdField = value;
                    this.RaisePropertyChanged("TestCaseFolderId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteTestCaseParameter", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteTestCaseParameter : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DefaultValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TestCaseIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> TestCaseParameterIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DefaultValue {
            get {
                return this.DefaultValueField;
            }
            set {
                if ((object.ReferenceEquals(this.DefaultValueField, value) != true)) {
                    this.DefaultValueField = value;
                    this.RaisePropertyChanged("DefaultValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TestCaseId {
            get {
                return this.TestCaseIdField;
            }
            set {
                if ((this.TestCaseIdField.Equals(value) != true)) {
                    this.TestCaseIdField = value;
                    this.RaisePropertyChanged("TestCaseId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> TestCaseParameterId {
            get {
                return this.TestCaseParameterIdField;
            }
            set {
                if ((this.TestCaseParameterIdField.Equals(value) != true)) {
                    this.TestCaseParameterIdField = value;
                    this.RaisePropertyChanged("TestCaseParameterId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteTestStepParameter", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteTestStepParameter : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Value {
            get {
                return this.ValueField;
            }
            set {
                if ((object.ReferenceEquals(this.ValueField, value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteTestCaseStatus", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteTestCaseStatus : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PositionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TestCaseStatusIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Active {
            get {
                return this.ActiveField;
            }
            set {
                if ((this.ActiveField.Equals(value) != true)) {
                    this.ActiveField = value;
                    this.RaisePropertyChanged("Active");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Position {
            get {
                return this.PositionField;
            }
            set {
                if ((this.PositionField.Equals(value) != true)) {
                    this.PositionField = value;
                    this.RaisePropertyChanged("Position");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TestCaseStatusId {
            get {
                return this.TestCaseStatusIdField;
            }
            set {
                if ((this.TestCaseStatusIdField.Equals(value) != true)) {
                    this.TestCaseStatusIdField = value;
                    this.RaisePropertyChanged("TestCaseStatusId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteTestCaseType", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteTestCaseType : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PositionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TestCaseTypeIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> WorkflowIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Active {
            get {
                return this.ActiveField;
            }
            set {
                if ((this.ActiveField.Equals(value) != true)) {
                    this.ActiveField = value;
                    this.RaisePropertyChanged("Active");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Position {
            get {
                return this.PositionField;
            }
            set {
                if ((this.PositionField.Equals(value) != true)) {
                    this.PositionField = value;
                    this.RaisePropertyChanged("Position");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TestCaseTypeId {
            get {
                return this.TestCaseTypeIdField;
            }
            set {
                if ((this.TestCaseTypeIdField.Equals(value) != true)) {
                    this.TestCaseTypeIdField = value;
                    this.RaisePropertyChanged("TestCaseTypeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> WorkflowId {
            get {
                return this.WorkflowIdField;
            }
            set {
                if ((this.WorkflowIdField.Equals(value) != true)) {
                    this.WorkflowIdField = value;
                    this.RaisePropertyChanged("WorkflowId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteTestSetTestCaseMapping", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteTestSetTestCaseMapping : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> OwnerIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TestCaseIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TestSetIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TestSetTestCaseIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> OwnerId {
            get {
                return this.OwnerIdField;
            }
            set {
                if ((this.OwnerIdField.Equals(value) != true)) {
                    this.OwnerIdField = value;
                    this.RaisePropertyChanged("OwnerId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TestCaseId {
            get {
                return this.TestCaseIdField;
            }
            set {
                if ((this.TestCaseIdField.Equals(value) != true)) {
                    this.TestCaseIdField = value;
                    this.RaisePropertyChanged("TestCaseId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TestSetId {
            get {
                return this.TestSetIdField;
            }
            set {
                if ((this.TestSetIdField.Equals(value) != true)) {
                    this.TestSetIdField = value;
                    this.RaisePropertyChanged("TestSetId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TestSetTestCaseId {
            get {
                return this.TestSetTestCaseIdField;
            }
            set {
                if ((this.TestSetTestCaseIdField.Equals(value) != true)) {
                    this.TestSetTestCaseIdField = value;
                    this.RaisePropertyChanged("TestSetTestCaseId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteTestSetFolder", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteTestSetFolder : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ActualDurationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CountBlockedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CountCautionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CountFailedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CountNotApplicableField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CountNotRunField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CountPassedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreationDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> EstimatedDurationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> ExecutionDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IndentLevelField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime LastUpdateDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ParentTestSetFolderIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ProjectIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProjectNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> TestSetFolderIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ActualDuration {
            get {
                return this.ActualDurationField;
            }
            set {
                if ((this.ActualDurationField.Equals(value) != true)) {
                    this.ActualDurationField = value;
                    this.RaisePropertyChanged("ActualDuration");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CountBlocked {
            get {
                return this.CountBlockedField;
            }
            set {
                if ((this.CountBlockedField.Equals(value) != true)) {
                    this.CountBlockedField = value;
                    this.RaisePropertyChanged("CountBlocked");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CountCaution {
            get {
                return this.CountCautionField;
            }
            set {
                if ((this.CountCautionField.Equals(value) != true)) {
                    this.CountCautionField = value;
                    this.RaisePropertyChanged("CountCaution");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CountFailed {
            get {
                return this.CountFailedField;
            }
            set {
                if ((this.CountFailedField.Equals(value) != true)) {
                    this.CountFailedField = value;
                    this.RaisePropertyChanged("CountFailed");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CountNotApplicable {
            get {
                return this.CountNotApplicableField;
            }
            set {
                if ((this.CountNotApplicableField.Equals(value) != true)) {
                    this.CountNotApplicableField = value;
                    this.RaisePropertyChanged("CountNotApplicable");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CountNotRun {
            get {
                return this.CountNotRunField;
            }
            set {
                if ((this.CountNotRunField.Equals(value) != true)) {
                    this.CountNotRunField = value;
                    this.RaisePropertyChanged("CountNotRun");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CountPassed {
            get {
                return this.CountPassedField;
            }
            set {
                if ((this.CountPassedField.Equals(value) != true)) {
                    this.CountPassedField = value;
                    this.RaisePropertyChanged("CountPassed");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreationDate {
            get {
                return this.CreationDateField;
            }
            set {
                if ((this.CreationDateField.Equals(value) != true)) {
                    this.CreationDateField = value;
                    this.RaisePropertyChanged("CreationDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> EstimatedDuration {
            get {
                return this.EstimatedDurationField;
            }
            set {
                if ((this.EstimatedDurationField.Equals(value) != true)) {
                    this.EstimatedDurationField = value;
                    this.RaisePropertyChanged("EstimatedDuration");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> ExecutionDate {
            get {
                return this.ExecutionDateField;
            }
            set {
                if ((this.ExecutionDateField.Equals(value) != true)) {
                    this.ExecutionDateField = value;
                    this.RaisePropertyChanged("ExecutionDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IndentLevel {
            get {
                return this.IndentLevelField;
            }
            set {
                if ((object.ReferenceEquals(this.IndentLevelField, value) != true)) {
                    this.IndentLevelField = value;
                    this.RaisePropertyChanged("IndentLevel");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime LastUpdateDate {
            get {
                return this.LastUpdateDateField;
            }
            set {
                if ((this.LastUpdateDateField.Equals(value) != true)) {
                    this.LastUpdateDateField = value;
                    this.RaisePropertyChanged("LastUpdateDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ParentTestSetFolderId {
            get {
                return this.ParentTestSetFolderIdField;
            }
            set {
                if ((this.ParentTestSetFolderIdField.Equals(value) != true)) {
                    this.ParentTestSetFolderIdField = value;
                    this.RaisePropertyChanged("ParentTestSetFolderId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ProjectId {
            get {
                return this.ProjectIdField;
            }
            set {
                if ((this.ProjectIdField.Equals(value) != true)) {
                    this.ProjectIdField = value;
                    this.RaisePropertyChanged("ProjectId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProjectName {
            get {
                return this.ProjectNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ProjectNameField, value) != true)) {
                    this.ProjectNameField = value;
                    this.RaisePropertyChanged("ProjectName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> TestSetFolderId {
            get {
                return this.TestSetFolderIdField;
            }
            set {
                if ((this.TestSetFolderIdField.Equals(value) != true)) {
                    this.TestSetFolderIdField = value;
                    this.RaisePropertyChanged("TestSetFolderId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteTestSetParameter", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteTestSetParameter : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TestCaseParameterIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TestSetIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TestCaseParameterId {
            get {
                return this.TestCaseParameterIdField;
            }
            set {
                if ((this.TestCaseParameterIdField.Equals(value) != true)) {
                    this.TestCaseParameterIdField = value;
                    this.RaisePropertyChanged("TestCaseParameterId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TestSetId {
            get {
                return this.TestSetIdField;
            }
            set {
                if ((this.TestSetIdField.Equals(value) != true)) {
                    this.TestSetIdField = value;
                    this.RaisePropertyChanged("TestSetId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Value {
            get {
                return this.ValueField;
            }
            set {
                if ((object.ReferenceEquals(this.ValueField, value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteTestConfigurationSet", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteTestConfigurationSet : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime ConcurrencyDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreationDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestConfigurationEntry[] EntriesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime LastUpdatedDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ProjectIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TestConfigurationSetIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime ConcurrencyDate {
            get {
                return this.ConcurrencyDateField;
            }
            set {
                if ((this.ConcurrencyDateField.Equals(value) != true)) {
                    this.ConcurrencyDateField = value;
                    this.RaisePropertyChanged("ConcurrencyDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreationDate {
            get {
                return this.CreationDateField;
            }
            set {
                if ((this.CreationDateField.Equals(value) != true)) {
                    this.CreationDateField = value;
                    this.RaisePropertyChanged("CreationDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestConfigurationEntry[] Entries {
            get {
                return this.EntriesField;
            }
            set {
                if ((object.ReferenceEquals(this.EntriesField, value) != true)) {
                    this.EntriesField = value;
                    this.RaisePropertyChanged("Entries");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsActive {
            get {
                return this.IsActiveField;
            }
            set {
                if ((this.IsActiveField.Equals(value) != true)) {
                    this.IsActiveField = value;
                    this.RaisePropertyChanged("IsActive");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime LastUpdatedDate {
            get {
                return this.LastUpdatedDateField;
            }
            set {
                if ((this.LastUpdatedDateField.Equals(value) != true)) {
                    this.LastUpdatedDateField = value;
                    this.RaisePropertyChanged("LastUpdatedDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ProjectId {
            get {
                return this.ProjectIdField;
            }
            set {
                if ((this.ProjectIdField.Equals(value) != true)) {
                    this.ProjectIdField = value;
                    this.RaisePropertyChanged("ProjectId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TestConfigurationSetId {
            get {
                return this.TestConfigurationSetIdField;
            }
            set {
                if ((this.TestConfigurationSetIdField.Equals(value) != true)) {
                    this.TestConfigurationSetIdField = value;
                    this.RaisePropertyChanged("TestConfigurationSetId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteTestConfigurationEntry", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteTestConfigurationEntry : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestConfigurationParameterValue[] ParameterValuesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TestConfigurationEntryIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestConfigurationParameterValue[] ParameterValues {
            get {
                return this.ParameterValuesField;
            }
            set {
                if ((object.ReferenceEquals(this.ParameterValuesField, value) != true)) {
                    this.ParameterValuesField = value;
                    this.RaisePropertyChanged("ParameterValues");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TestConfigurationEntryId {
            get {
                return this.TestConfigurationEntryIdField;
            }
            set {
                if ((this.TestConfigurationEntryIdField.Equals(value) != true)) {
                    this.TestConfigurationEntryIdField = value;
                    this.RaisePropertyChanged("TestConfigurationEntryId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteTestConfigurationParameterValue", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteTestConfigurationParameterValue : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TestCaseParameterIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TestCaseParameterId {
            get {
                return this.TestCaseParameterIdField;
            }
            set {
                if ((this.TestCaseParameterIdField.Equals(value) != true)) {
                    this.TestCaseParameterIdField = value;
                    this.RaisePropertyChanged("TestCaseParameterId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Value {
            get {
                return this.ValueField;
            }
            set {
                if ((object.ReferenceEquals(this.ValueField, value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteAutomationEngine", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteAutomationEngine : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> AutomationEngineIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TokenField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Active {
            get {
                return this.ActiveField;
            }
            set {
                if ((this.ActiveField.Equals(value) != true)) {
                    this.ActiveField = value;
                    this.RaisePropertyChanged("Active");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> AutomationEngineId {
            get {
                return this.AutomationEngineIdField;
            }
            set {
                if ((this.AutomationEngineIdField.Equals(value) != true)) {
                    this.AutomationEngineIdField = value;
                    this.RaisePropertyChanged("AutomationEngineId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Token {
            get {
                return this.TokenField;
            }
            set {
                if ((object.ReferenceEquals(this.TokenField, value) != true)) {
                    this.TokenField = value;
                    this.RaisePropertyChanged("Token");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteDataSyncSystem", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteDataSyncSystem : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool AutoMapUsersField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ConnectionStringField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Custom01Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Custom02Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Custom03Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Custom04Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Custom05Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int DataSyncStatusIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DataSyncStatusNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int DataSyncSystemIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DisplayNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> LastSyncDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LoginField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TimeOffsetHoursField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool AutoMapUsers {
            get {
                return this.AutoMapUsersField;
            }
            set {
                if ((this.AutoMapUsersField.Equals(value) != true)) {
                    this.AutoMapUsersField = value;
                    this.RaisePropertyChanged("AutoMapUsers");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ConnectionString {
            get {
                return this.ConnectionStringField;
            }
            set {
                if ((object.ReferenceEquals(this.ConnectionStringField, value) != true)) {
                    this.ConnectionStringField = value;
                    this.RaisePropertyChanged("ConnectionString");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Custom01 {
            get {
                return this.Custom01Field;
            }
            set {
                if ((object.ReferenceEquals(this.Custom01Field, value) != true)) {
                    this.Custom01Field = value;
                    this.RaisePropertyChanged("Custom01");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Custom02 {
            get {
                return this.Custom02Field;
            }
            set {
                if ((object.ReferenceEquals(this.Custom02Field, value) != true)) {
                    this.Custom02Field = value;
                    this.RaisePropertyChanged("Custom02");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Custom03 {
            get {
                return this.Custom03Field;
            }
            set {
                if ((object.ReferenceEquals(this.Custom03Field, value) != true)) {
                    this.Custom03Field = value;
                    this.RaisePropertyChanged("Custom03");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Custom04 {
            get {
                return this.Custom04Field;
            }
            set {
                if ((object.ReferenceEquals(this.Custom04Field, value) != true)) {
                    this.Custom04Field = value;
                    this.RaisePropertyChanged("Custom04");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Custom05 {
            get {
                return this.Custom05Field;
            }
            set {
                if ((object.ReferenceEquals(this.Custom05Field, value) != true)) {
                    this.Custom05Field = value;
                    this.RaisePropertyChanged("Custom05");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int DataSyncStatusId {
            get {
                return this.DataSyncStatusIdField;
            }
            set {
                if ((this.DataSyncStatusIdField.Equals(value) != true)) {
                    this.DataSyncStatusIdField = value;
                    this.RaisePropertyChanged("DataSyncStatusId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DataSyncStatusName {
            get {
                return this.DataSyncStatusNameField;
            }
            set {
                if ((object.ReferenceEquals(this.DataSyncStatusNameField, value) != true)) {
                    this.DataSyncStatusNameField = value;
                    this.RaisePropertyChanged("DataSyncStatusName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int DataSyncSystemId {
            get {
                return this.DataSyncSystemIdField;
            }
            set {
                if ((this.DataSyncSystemIdField.Equals(value) != true)) {
                    this.DataSyncSystemIdField = value;
                    this.RaisePropertyChanged("DataSyncSystemId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DisplayName {
            get {
                return this.DisplayNameField;
            }
            set {
                if ((object.ReferenceEquals(this.DisplayNameField, value) != true)) {
                    this.DisplayNameField = value;
                    this.RaisePropertyChanged("DisplayName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> LastSyncDate {
            get {
                return this.LastSyncDateField;
            }
            set {
                if ((this.LastSyncDateField.Equals(value) != true)) {
                    this.LastSyncDateField = value;
                    this.RaisePropertyChanged("LastSyncDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Login {
            get {
                return this.LoginField;
            }
            set {
                if ((object.ReferenceEquals(this.LoginField, value) != true)) {
                    this.LoginField = value;
                    this.RaisePropertyChanged("Login");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TimeOffsetHours {
            get {
                return this.TimeOffsetHoursField;
            }
            set {
                if ((this.TimeOffsetHoursField.Equals(value) != true)) {
                    this.TimeOffsetHoursField = value;
                    this.RaisePropertyChanged("TimeOffsetHours");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteDataMapping", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteDataMapping : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ExternalKeyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int InternalIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool PrimaryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ProjectIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ExternalKey {
            get {
                return this.ExternalKeyField;
            }
            set {
                if ((object.ReferenceEquals(this.ExternalKeyField, value) != true)) {
                    this.ExternalKeyField = value;
                    this.RaisePropertyChanged("ExternalKey");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int InternalId {
            get {
                return this.InternalIdField;
            }
            set {
                if ((this.InternalIdField.Equals(value) != true)) {
                    this.InternalIdField = value;
                    this.RaisePropertyChanged("InternalId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Primary {
            get {
                return this.PrimaryField;
            }
            set {
                if ((this.PrimaryField.Equals(value) != true)) {
                    this.PrimaryField = value;
                    this.RaisePropertyChanged("Primary");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ProjectId {
            get {
                return this.ProjectIdField;
            }
            set {
                if ((this.ProjectIdField.Equals(value) != true)) {
                    this.ProjectIdField = value;
                    this.RaisePropertyChanged("ProjectId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteProjectArtifact", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteProjectArtifact : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int[] ArtifactIdsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ProjectIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int[] ArtifactIds {
            get {
                return this.ArtifactIdsField;
            }
            set {
                if ((object.ReferenceEquals(this.ArtifactIdsField, value) != true)) {
                    this.ArtifactIdsField = value;
                    this.RaisePropertyChanged("ArtifactIds");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ProjectId {
            get {
                return this.ProjectIdField;
            }
            set {
                if ((this.ProjectIdField.Equals(value) != true)) {
                    this.ProjectIdField = value;
                    this.RaisePropertyChanged("ProjectId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteDocumentType", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteDocumentType : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool DefaultField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ProjectAttachmentTypeIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ProjectIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Active {
            get {
                return this.ActiveField;
            }
            set {
                if ((this.ActiveField.Equals(value) != true)) {
                    this.ActiveField = value;
                    this.RaisePropertyChanged("Active");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Default {
            get {
                return this.DefaultField;
            }
            set {
                if ((this.DefaultField.Equals(value) != true)) {
                    this.DefaultField = value;
                    this.RaisePropertyChanged("Default");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ProjectAttachmentTypeId {
            get {
                return this.ProjectAttachmentTypeIdField;
            }
            set {
                if ((this.ProjectAttachmentTypeIdField.Equals(value) != true)) {
                    this.ProjectAttachmentTypeIdField = value;
                    this.RaisePropertyChanged("ProjectAttachmentTypeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ProjectId {
            get {
                return this.ProjectIdField;
            }
            set {
                if ((this.ProjectIdField.Equals(value) != true)) {
                    this.ProjectIdField = value;
                    this.RaisePropertyChanged("ProjectId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteDocumentFolder", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteDocumentFolder : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IndentLevelField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ParentProjectAttachmentFolderIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ProjectAttachmentFolderIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ProjectIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IndentLevel {
            get {
                return this.IndentLevelField;
            }
            set {
                if ((object.ReferenceEquals(this.IndentLevelField, value) != true)) {
                    this.IndentLevelField = value;
                    this.RaisePropertyChanged("IndentLevel");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ParentProjectAttachmentFolderId {
            get {
                return this.ParentProjectAttachmentFolderIdField;
            }
            set {
                if ((this.ParentProjectAttachmentFolderIdField.Equals(value) != true)) {
                    this.ParentProjectAttachmentFolderIdField = value;
                    this.RaisePropertyChanged("ParentProjectAttachmentFolderId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ProjectAttachmentFolderId {
            get {
                return this.ProjectAttachmentFolderIdField;
            }
            set {
                if ((this.ProjectAttachmentFolderIdField.Equals(value) != true)) {
                    this.ProjectAttachmentFolderIdField = value;
                    this.RaisePropertyChanged("ProjectAttachmentFolderId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ProjectId {
            get {
                return this.ProjectIdField;
            }
            set {
                if ((this.ProjectIdField.Equals(value) != true)) {
                    this.ProjectIdField = value;
                    this.RaisePropertyChanged("ProjectId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteAssociation", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteAssociation : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ArtifactLinkIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ArtifactLinkTypeIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ArtifactLinkTypeNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CommentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> CreationDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> CreatorIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CreatorNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int DestArtifactIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DestArtifactNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int DestArtifactTypeIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DestArtifactTypeNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SourceArtifactIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SourceArtifactTypeIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ArtifactLinkId {
            get {
                return this.ArtifactLinkIdField;
            }
            set {
                if ((this.ArtifactLinkIdField.Equals(value) != true)) {
                    this.ArtifactLinkIdField = value;
                    this.RaisePropertyChanged("ArtifactLinkId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ArtifactLinkTypeId {
            get {
                return this.ArtifactLinkTypeIdField;
            }
            set {
                if ((this.ArtifactLinkTypeIdField.Equals(value) != true)) {
                    this.ArtifactLinkTypeIdField = value;
                    this.RaisePropertyChanged("ArtifactLinkTypeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ArtifactLinkTypeName {
            get {
                return this.ArtifactLinkTypeNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ArtifactLinkTypeNameField, value) != true)) {
                    this.ArtifactLinkTypeNameField = value;
                    this.RaisePropertyChanged("ArtifactLinkTypeName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Comment {
            get {
                return this.CommentField;
            }
            set {
                if ((object.ReferenceEquals(this.CommentField, value) != true)) {
                    this.CommentField = value;
                    this.RaisePropertyChanged("Comment");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> CreationDate {
            get {
                return this.CreationDateField;
            }
            set {
                if ((this.CreationDateField.Equals(value) != true)) {
                    this.CreationDateField = value;
                    this.RaisePropertyChanged("CreationDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> CreatorId {
            get {
                return this.CreatorIdField;
            }
            set {
                if ((this.CreatorIdField.Equals(value) != true)) {
                    this.CreatorIdField = value;
                    this.RaisePropertyChanged("CreatorId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CreatorName {
            get {
                return this.CreatorNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CreatorNameField, value) != true)) {
                    this.CreatorNameField = value;
                    this.RaisePropertyChanged("CreatorName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int DestArtifactId {
            get {
                return this.DestArtifactIdField;
            }
            set {
                if ((this.DestArtifactIdField.Equals(value) != true)) {
                    this.DestArtifactIdField = value;
                    this.RaisePropertyChanged("DestArtifactId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DestArtifactName {
            get {
                return this.DestArtifactNameField;
            }
            set {
                if ((object.ReferenceEquals(this.DestArtifactNameField, value) != true)) {
                    this.DestArtifactNameField = value;
                    this.RaisePropertyChanged("DestArtifactName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int DestArtifactTypeId {
            get {
                return this.DestArtifactTypeIdField;
            }
            set {
                if ((this.DestArtifactTypeIdField.Equals(value) != true)) {
                    this.DestArtifactTypeIdField = value;
                    this.RaisePropertyChanged("DestArtifactTypeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DestArtifactTypeName {
            get {
                return this.DestArtifactTypeNameField;
            }
            set {
                if ((object.ReferenceEquals(this.DestArtifactTypeNameField, value) != true)) {
                    this.DestArtifactTypeNameField = value;
                    this.RaisePropertyChanged("DestArtifactTypeName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SourceArtifactId {
            get {
                return this.SourceArtifactIdField;
            }
            set {
                if ((this.SourceArtifactIdField.Equals(value) != true)) {
                    this.SourceArtifactIdField = value;
                    this.RaisePropertyChanged("SourceArtifactId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SourceArtifactTypeId {
            get {
                return this.SourceArtifactTypeIdField;
            }
            set {
                if ((this.SourceArtifactTypeIdField.Equals(value) != true)) {
                    this.SourceArtifactTypeIdField = value;
                    this.RaisePropertyChanged("SourceArtifactTypeId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteIncidentPriority", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteIncidentPriority : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ColorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> PriorityIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Active {
            get {
                return this.ActiveField;
            }
            set {
                if ((this.ActiveField.Equals(value) != true)) {
                    this.ActiveField = value;
                    this.RaisePropertyChanged("Active");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Color {
            get {
                return this.ColorField;
            }
            set {
                if ((object.ReferenceEquals(this.ColorField, value) != true)) {
                    this.ColorField = value;
                    this.RaisePropertyChanged("Color");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> PriorityId {
            get {
                return this.PriorityIdField;
            }
            set {
                if ((this.PriorityIdField.Equals(value) != true)) {
                    this.PriorityIdField = value;
                    this.RaisePropertyChanged("PriorityId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteIncidentSeverity", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteIncidentSeverity : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ColorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> SeverityIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Active {
            get {
                return this.ActiveField;
            }
            set {
                if ((this.ActiveField.Equals(value) != true)) {
                    this.ActiveField = value;
                    this.RaisePropertyChanged("Active");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Color {
            get {
                return this.ColorField;
            }
            set {
                if ((object.ReferenceEquals(this.ColorField, value) != true)) {
                    this.ColorField = value;
                    this.RaisePropertyChanged("Color");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> SeverityId {
            get {
                return this.SeverityIdField;
            }
            set {
                if ((this.SeverityIdField.Equals(value) != true)) {
                    this.SeverityIdField = value;
                    this.RaisePropertyChanged("SeverityId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteIncidentStatus", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteIncidentStatus : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> IncidentStatusIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool OpenField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Active {
            get {
                return this.ActiveField;
            }
            set {
                if ((this.ActiveField.Equals(value) != true)) {
                    this.ActiveField = value;
                    this.RaisePropertyChanged("Active");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> IncidentStatusId {
            get {
                return this.IncidentStatusIdField;
            }
            set {
                if ((this.IncidentStatusIdField.Equals(value) != true)) {
                    this.IncidentStatusIdField = value;
                    this.RaisePropertyChanged("IncidentStatusId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Open {
            get {
                return this.OpenField;
            }
            set {
                if ((this.OpenField.Equals(value) != true)) {
                    this.OpenField = value;
                    this.RaisePropertyChanged("Open");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteIncidentType", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteIncidentType : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> IncidentTypeIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IssueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool RiskField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int WorkflowIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Active {
            get {
                return this.ActiveField;
            }
            set {
                if ((this.ActiveField.Equals(value) != true)) {
                    this.ActiveField = value;
                    this.RaisePropertyChanged("Active");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> IncidentTypeId {
            get {
                return this.IncidentTypeIdField;
            }
            set {
                if ((this.IncidentTypeIdField.Equals(value) != true)) {
                    this.IncidentTypeIdField = value;
                    this.RaisePropertyChanged("IncidentTypeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Issue {
            get {
                return this.IssueField;
            }
            set {
                if ((this.IssueField.Equals(value) != true)) {
                    this.IssueField = value;
                    this.RaisePropertyChanged("Issue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Risk {
            get {
                return this.RiskField;
            }
            set {
                if ((this.RiskField.Equals(value) != true)) {
                    this.RiskField = value;
                    this.RaisePropertyChanged("Risk");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int WorkflowId {
            get {
                return this.WorkflowIdField;
            }
            set {
                if ((this.WorkflowIdField.Equals(value) != true)) {
                    this.WorkflowIdField = value;
                    this.RaisePropertyChanged("WorkflowId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteProject", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteProject : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreationDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int NonWorkingHoursField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ProjectIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string WebsiteField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int WorkingDaysField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int WorkingHoursField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Active {
            get {
                return this.ActiveField;
            }
            set {
                if ((this.ActiveField.Equals(value) != true)) {
                    this.ActiveField = value;
                    this.RaisePropertyChanged("Active");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreationDate {
            get {
                return this.CreationDateField;
            }
            set {
                if ((this.CreationDateField.Equals(value) != true)) {
                    this.CreationDateField = value;
                    this.RaisePropertyChanged("CreationDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int NonWorkingHours {
            get {
                return this.NonWorkingHoursField;
            }
            set {
                if ((this.NonWorkingHoursField.Equals(value) != true)) {
                    this.NonWorkingHoursField = value;
                    this.RaisePropertyChanged("NonWorkingHours");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ProjectId {
            get {
                return this.ProjectIdField;
            }
            set {
                if ((this.ProjectIdField.Equals(value) != true)) {
                    this.ProjectIdField = value;
                    this.RaisePropertyChanged("ProjectId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Website {
            get {
                return this.WebsiteField;
            }
            set {
                if ((object.ReferenceEquals(this.WebsiteField, value) != true)) {
                    this.WebsiteField = value;
                    this.RaisePropertyChanged("Website");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int WorkingDays {
            get {
                return this.WorkingDaysField;
            }
            set {
                if ((this.WorkingDaysField.Equals(value) != true)) {
                    this.WorkingDaysField = value;
                    this.RaisePropertyChanged("WorkingDays");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int WorkingHours {
            get {
                return this.WorkingHoursField;
            }
            set {
                if ((this.WorkingHoursField.Equals(value) != true)) {
                    this.WorkingHoursField = value;
                    this.RaisePropertyChanged("WorkingHours");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteProjectRole", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteProjectRole : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool AdminField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool DiscussionsAddField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRolePermission[] PermissionsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ProjectRoleIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool SourceCodeViewField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Active {
            get {
                return this.ActiveField;
            }
            set {
                if ((this.ActiveField.Equals(value) != true)) {
                    this.ActiveField = value;
                    this.RaisePropertyChanged("Active");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Admin {
            get {
                return this.AdminField;
            }
            set {
                if ((this.AdminField.Equals(value) != true)) {
                    this.AdminField = value;
                    this.RaisePropertyChanged("Admin");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool DiscussionsAdd {
            get {
                return this.DiscussionsAddField;
            }
            set {
                if ((this.DiscussionsAddField.Equals(value) != true)) {
                    this.DiscussionsAddField = value;
                    this.RaisePropertyChanged("DiscussionsAdd");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRolePermission[] Permissions {
            get {
                return this.PermissionsField;
            }
            set {
                if ((object.ReferenceEquals(this.PermissionsField, value) != true)) {
                    this.PermissionsField = value;
                    this.RaisePropertyChanged("Permissions");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ProjectRoleId {
            get {
                return this.ProjectRoleIdField;
            }
            set {
                if ((this.ProjectRoleIdField.Equals(value) != true)) {
                    this.ProjectRoleIdField = value;
                    this.RaisePropertyChanged("ProjectRoleId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool SourceCodeView {
            get {
                return this.SourceCodeViewField;
            }
            set {
                if ((this.SourceCodeViewField.Equals(value) != true)) {
                    this.SourceCodeViewField = value;
                    this.RaisePropertyChanged("SourceCodeView");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteRolePermission", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteRolePermission : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ArtifactTypeIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PermissionIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ProjectRoleIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ArtifactTypeId {
            get {
                return this.ArtifactTypeIdField;
            }
            set {
                if ((this.ArtifactTypeIdField.Equals(value) != true)) {
                    this.ArtifactTypeIdField = value;
                    this.RaisePropertyChanged("ArtifactTypeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PermissionId {
            get {
                return this.PermissionIdField;
            }
            set {
                if ((this.PermissionIdField.Equals(value) != true)) {
                    this.PermissionIdField = value;
                    this.RaisePropertyChanged("PermissionId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ProjectRoleId {
            get {
                return this.ProjectRoleIdField;
            }
            set {
                if ((this.ProjectRoleIdField.Equals(value) != true)) {
                    this.ProjectRoleIdField = value;
                    this.RaisePropertyChanged("ProjectRoleId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteReleaseTestCaseMapping", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteReleaseTestCaseMapping : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ReleaseIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TestCaseIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ReleaseId {
            get {
                return this.ReleaseIdField;
            }
            set {
                if ((this.ReleaseIdField.Equals(value) != true)) {
                    this.ReleaseIdField = value;
                    this.RaisePropertyChanged("ReleaseId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TestCaseId {
            get {
                return this.TestCaseIdField;
            }
            set {
                if ((this.TestCaseIdField.Equals(value) != true)) {
                    this.TestCaseIdField = value;
                    this.RaisePropertyChanged("TestCaseId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteReleaseStatus", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteReleaseStatus : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PositionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ReleaseStatusIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Active {
            get {
                return this.ActiveField;
            }
            set {
                if ((this.ActiveField.Equals(value) != true)) {
                    this.ActiveField = value;
                    this.RaisePropertyChanged("Active");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Position {
            get {
                return this.PositionField;
            }
            set {
                if ((this.PositionField.Equals(value) != true)) {
                    this.PositionField = value;
                    this.RaisePropertyChanged("Position");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ReleaseStatusId {
            get {
                return this.ReleaseStatusIdField;
            }
            set {
                if ((this.ReleaseStatusIdField.Equals(value) != true)) {
                    this.ReleaseStatusIdField = value;
                    this.RaisePropertyChanged("ReleaseStatusId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteReleaseType", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteReleaseType : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PositionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ReleaseTypeIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> WorkflowIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Active {
            get {
                return this.ActiveField;
            }
            set {
                if ((this.ActiveField.Equals(value) != true)) {
                    this.ActiveField = value;
                    this.RaisePropertyChanged("Active");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Position {
            get {
                return this.PositionField;
            }
            set {
                if ((this.PositionField.Equals(value) != true)) {
                    this.PositionField = value;
                    this.RaisePropertyChanged("Position");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ReleaseTypeId {
            get {
                return this.ReleaseTypeIdField;
            }
            set {
                if ((this.ReleaseTypeIdField.Equals(value) != true)) {
                    this.ReleaseTypeIdField = value;
                    this.RaisePropertyChanged("ReleaseTypeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> WorkflowId {
            get {
                return this.WorkflowIdField;
            }
            set {
                if ((this.WorkflowIdField.Equals(value) != true)) {
                    this.WorkflowIdField = value;
                    this.RaisePropertyChanged("WorkflowId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteRequirementTestCaseMapping", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteRequirementTestCaseMapping : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int RequirementIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TestCaseIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int RequirementId {
            get {
                return this.RequirementIdField;
            }
            set {
                if ((this.RequirementIdField.Equals(value) != true)) {
                    this.RequirementIdField = value;
                    this.RaisePropertyChanged("RequirementId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TestCaseId {
            get {
                return this.TestCaseIdField;
            }
            set {
                if ((this.TestCaseIdField.Equals(value) != true)) {
                    this.TestCaseIdField = value;
                    this.RaisePropertyChanged("TestCaseId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteRequirementStatus", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteRequirementStatus : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PositionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int RequirementStatusIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Active {
            get {
                return this.ActiveField;
            }
            set {
                if ((this.ActiveField.Equals(value) != true)) {
                    this.ActiveField = value;
                    this.RaisePropertyChanged("Active");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Position {
            get {
                return this.PositionField;
            }
            set {
                if ((this.PositionField.Equals(value) != true)) {
                    this.PositionField = value;
                    this.RaisePropertyChanged("Position");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int RequirementStatusId {
            get {
                return this.RequirementStatusIdField;
            }
            set {
                if ((this.RequirementStatusIdField.Equals(value) != true)) {
                    this.RequirementStatusIdField = value;
                    this.RaisePropertyChanged("RequirementStatusId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteRequirementType", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteRequirementType : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int RequirementTypeIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> WorkflowIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Active {
            get {
                return this.ActiveField;
            }
            set {
                if ((this.ActiveField.Equals(value) != true)) {
                    this.ActiveField = value;
                    this.RaisePropertyChanged("Active");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int RequirementTypeId {
            get {
                return this.RequirementTypeIdField;
            }
            set {
                if ((this.RequirementTypeIdField.Equals(value) != true)) {
                    this.RequirementTypeIdField = value;
                    this.RaisePropertyChanged("RequirementTypeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> WorkflowId {
            get {
                return this.WorkflowIdField;
            }
            set {
                if ((this.WorkflowIdField.Equals(value) != true)) {
                    this.WorkflowIdField = value;
                    this.RaisePropertyChanged("WorkflowId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://www.inflectra.com/SpiraTest/Services/v5.0/", ConfigurationName="SpiraSoapService.ISoapService")]
    public interface ISoapService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/IService/Connection_Authenticate" +
            "", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/IService/Connection_Authenticate" +
            "Response")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/IService/Connection_Authenticate" +
            "ServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        bool Connection_Authenticate(string userName, string password);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/IService/Connection_Authenticate" +
            "", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/IService/Connection_Authenticate" +
            "Response")]
        System.IAsyncResult BeginConnection_Authenticate(string userName, string password, System.AsyncCallback callback, object asyncState);
        
        bool EndConnection_Authenticate(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/IService/Connection_Authenticate" +
            "2", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/IService/Connection_Authenticate" +
            "2Response")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/IService/Connection_Authenticate" +
            "2ServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        bool Connection_Authenticate2(string userName, string password, string plugInName);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/IService/Connection_Authenticate" +
            "2", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/IService/Connection_Authenticate" +
            "2Response")]
        System.IAsyncResult BeginConnection_Authenticate2(string userName, string password, string plugInName, System.AsyncCallback callback, object asyncState);
        
        bool EndConnection_Authenticate2(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/IService/Connection_Authenticate" +
            "3", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/IService/Connection_Authenticate" +
            "3Response")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/IService/Connection_Authenticate" +
            "3ServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        bool Connection_Authenticate3(string userName, string apiKey, string plugInName);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/IService/Connection_Authenticate" +
            "3", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/IService/Connection_Authenticate" +
            "3Response")]
        System.IAsyncResult BeginConnection_Authenticate3(string userName, string apiKey, string plugInName, System.AsyncCallback callback, object asyncState);
        
        bool EndConnection_Authenticate3(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/IService/Connection_ConnectToPro" +
            "ject", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/IService/Connection_ConnectToPro" +
            "jectResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/IService/Connection_ConnectToPro" +
            "jectServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        bool Connection_ConnectToProject(int projectId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/IService/Connection_ConnectToPro" +
            "ject", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/IService/Connection_ConnectToPro" +
            "jectResponse")]
        System.IAsyncResult BeginConnection_ConnectToProject(int projectId, System.AsyncCallback callback, object asyncState);
        
        bool EndConnection_ConnectToProject(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/IService/Connection_Disconnect", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/IService/Connection_DisconnectRe" +
            "sponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/IService/Connection_DisconnectSe" +
            "rviceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        void Connection_Disconnect();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/IService/Connection_Disconnect", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/IService/Connection_DisconnectRe" +
            "sponse")]
        System.IAsyncResult BeginConnection_Disconnect(System.AsyncCallback callback, object asyncState);
        
        void EndConnection_Disconnect(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/IService/System_GetProductName", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/IService/System_GetProductNameRe" +
            "sponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/IService/System_GetProductNameSe" +
            "rviceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        string System_GetProductName();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/IService/System_GetProductName", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/IService/System_GetProductNameRe" +
            "sponse")]
        System.IAsyncResult BeginSystem_GetProductName(System.AsyncCallback callback, object asyncState);
        
        string EndSystem_GetProductName(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/IService/System_GetServerDateTim" +
            "e", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/IService/System_GetServerDateTim" +
            "eResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/IService/System_GetServerDateTim" +
            "eServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        System.DateTime System_GetServerDateTime();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/IService/System_GetServerDateTim" +
            "e", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/IService/System_GetServerDateTim" +
            "eResponse")]
        System.IAsyncResult BeginSystem_GetServerDateTime(System.AsyncCallback callback, object asyncState);
        
        System.DateTime EndSystem_GetServerDateTime(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/IService/System_GetWebServerUrl", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/IService/System_GetWebServerUrlR" +
            "esponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/IService/System_GetWebServerUrlS" +
            "erviceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        string System_GetWebServerUrl();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/IService/System_GetWebServerUrl", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/IService/System_GetWebServerUrlR" +
            "esponse")]
        System.IAsyncResult BeginSystem_GetWebServerUrl(System.AsyncCallback callback, object asyncState);
        
        string EndSystem_GetWebServerUrl(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Component_RetrieveB" +
            "yId", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Component_RetrieveB" +
            "yIdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Component_RetrieveB" +
            "yIdServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComponent Component_RetrieveById(int componentId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Component_RetrieveB" +
            "yId", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Component_RetrieveB" +
            "yIdResponse")]
        System.IAsyncResult BeginComponent_RetrieveById(int componentId, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComponent EndComponent_RetrieveById(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Component_Create", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Component_CreateRes" +
            "ponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Component_CreateSer" +
            "viceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComponent Component_Create(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComponent remoteComponent);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Component_Create", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Component_CreateRes" +
            "ponse")]
        System.IAsyncResult BeginComponent_Create(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComponent remoteComponent, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComponent EndComponent_Create(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Component_Update", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Component_UpdateRes" +
            "ponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Component_UpdateSer" +
            "viceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        void Component_Update(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComponent remoteComponent);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Component_Update", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Component_UpdateRes" +
            "ponse")]
        System.IAsyncResult BeginComponent_Update(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComponent remoteComponent, System.AsyncCallback callback, object asyncState);
        
        void EndComponent_Update(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Component_Delete", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Component_DeleteRes" +
            "ponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Component_DeleteSer" +
            "viceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        void Component_Delete(int componentId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Component_Delete", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Component_DeleteRes" +
            "ponse")]
        System.IAsyncResult BeginComponent_Delete(int componentId, System.AsyncCallback callback, object asyncState);
        
        void EndComponent_Delete(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Component_Undelete", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Component_UndeleteR" +
            "esponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Component_UndeleteS" +
            "erviceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        void Component_Undelete(int componentId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Component_Undelete", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Component_UndeleteR" +
            "esponse")]
        System.IAsyncResult BeginComponent_Undelete(int componentId, System.AsyncCallback callback, object asyncState);
        
        void EndComponent_Undelete(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Build_RetrieveByRel" +
            "easeId", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Build_RetrieveByRel" +
            "easeIdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Build_RetrieveByRel" +
            "easeIdServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteBuild[] Build_RetrieveByReleaseId(int releaseId, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSort remoteSort, int startingRow, int numberOfRows);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Build_RetrieveByRel" +
            "easeId", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Build_RetrieveByRel" +
            "easeIdResponse")]
        System.IAsyncResult BeginBuild_RetrieveByReleaseId(int releaseId, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSort remoteSort, int startingRow, int numberOfRows, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteBuild[] EndBuild_RetrieveByReleaseId(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Build_RetrieveById", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Build_RetrieveByIdR" +
            "esponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Build_RetrieveByIdS" +
            "erviceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteBuild Build_RetrieveById(int releaseId, int buildId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Build_RetrieveById", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Build_RetrieveByIdR" +
            "esponse")]
        System.IAsyncResult BeginBuild_RetrieveById(int releaseId, int buildId, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteBuild EndBuild_RetrieveById(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Build_Create", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Build_CreateRespons" +
            "e")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Build_CreateService" +
            "FaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteBuild Build_Create(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteBuild remoteBuild);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Build_Create", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Build_CreateRespons" +
            "e")]
        System.IAsyncResult BeginBuild_Create(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteBuild remoteBuild, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteBuild EndBuild_Create(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/SourceCode_Retrieve" +
            "Branches", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/SourceCode_Retrieve" +
            "BranchesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/SourceCode_Retrieve" +
            "BranchesServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSourceCodeBranch[] SourceCode_RetrieveBranches();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/SourceCode_Retrieve" +
            "Branches", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/SourceCode_Retrieve" +
            "BranchesResponse")]
        System.IAsyncResult BeginSourceCode_RetrieveBranches(System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSourceCodeBranch[] EndSourceCode_RetrieveBranches(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/SourceCode_Retrieve" +
            "FoldersByParent", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/SourceCode_Retrieve" +
            "FoldersByParentResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/SourceCode_Retrieve" +
            "FoldersByParentServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSourceCodeFolder[] SourceCode_RetrieveFoldersByParent(string branchId, string parentFolderId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/SourceCode_Retrieve" +
            "FoldersByParent", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/SourceCode_Retrieve" +
            "FoldersByParentResponse")]
        System.IAsyncResult BeginSourceCode_RetrieveFoldersByParent(string branchId, string parentFolderId, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSourceCodeFolder[] EndSourceCode_RetrieveFoldersByParent(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/SourceCode_Retrieve" +
            "FilesByFolder", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/SourceCode_Retrieve" +
            "FilesByFolderResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/SourceCode_Retrieve" +
            "FilesByFolderServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSourceCodeFile[] SourceCode_RetrieveFilesByFolder(string branchId, string folderId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/SourceCode_Retrieve" +
            "FilesByFolder", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/SourceCode_Retrieve" +
            "FilesByFolderResponse")]
        System.IAsyncResult BeginSourceCode_RetrieveFilesByFolder(string branchId, string folderId, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSourceCodeFile[] EndSourceCode_RetrieveFilesByFolder(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/SourceCode_Retrieve" +
            "FilesByRevision", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/SourceCode_Retrieve" +
            "FilesByRevisionResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/SourceCode_Retrieve" +
            "FilesByRevisionServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSourceCodeFile[] SourceCode_RetrieveFilesByRevision(string branchId, string revisionId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/SourceCode_Retrieve" +
            "FilesByRevision", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/SourceCode_Retrieve" +
            "FilesByRevisionResponse")]
        System.IAsyncResult BeginSourceCode_RetrieveFilesByRevision(string branchId, string revisionId, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSourceCodeFile[] EndSourceCode_RetrieveFilesByRevision(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/SourceCode_Retrieve" +
            "FileById", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/SourceCode_Retrieve" +
            "FileByIdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/SourceCode_Retrieve" +
            "FileByIdServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSourceCodeFile SourceCode_RetrieveFileById(string branchId, string fileId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/SourceCode_Retrieve" +
            "FileById", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/SourceCode_Retrieve" +
            "FileByIdResponse")]
        System.IAsyncResult BeginSourceCode_RetrieveFileById(string branchId, string fileId, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSourceCodeFile EndSourceCode_RetrieveFileById(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/SourceCode_Retrieve" +
            "FilesForArtifact", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/SourceCode_Retrieve" +
            "FilesForArtifactResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/SourceCode_Retrieve" +
            "FilesForArtifactServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSourceCodeFile[] SourceCode_RetrieveFilesForArtifact(string branchId, int artifactTypeId, int artifactId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/SourceCode_Retrieve" +
            "FilesForArtifact", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/SourceCode_Retrieve" +
            "FilesForArtifactResponse")]
        System.IAsyncResult BeginSourceCode_RetrieveFilesForArtifact(string branchId, int artifactTypeId, int artifactId, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSourceCodeFile[] EndSourceCode_RetrieveFilesForArtifact(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/SourceCode_OpenFile" +
            "ById", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/SourceCode_OpenFile" +
            "ByIdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/SourceCode_OpenFile" +
            "ByIdServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        byte[] SourceCode_OpenFileById(string branchId, string fileId, string revisionId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/SourceCode_OpenFile" +
            "ById", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/SourceCode_OpenFile" +
            "ByIdResponse")]
        System.IAsyncResult BeginSourceCode_OpenFileById(string branchId, string fileId, string revisionId, System.AsyncCallback callback, object asyncState);
        
        byte[] EndSourceCode_OpenFileById(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/SourceCode_Retrieve" +
            "Revisions", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/SourceCode_Retrieve" +
            "RevisionsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/SourceCode_Retrieve" +
            "RevisionsServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSourceCodeRevision[] SourceCode_RetrieveRevisions(string branchId, int startRow, int numberRows, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSort remoteSort, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/SourceCode_Retrieve" +
            "Revisions", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/SourceCode_Retrieve" +
            "RevisionsResponse")]
        System.IAsyncResult BeginSourceCode_RetrieveRevisions(string branchId, int startRow, int numberRows, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSort remoteSort, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSourceCodeRevision[] EndSourceCode_RetrieveRevisions(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/SourceCode_Retrieve" +
            "RevisionsForFile", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/SourceCode_Retrieve" +
            "RevisionsForFileResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/SourceCode_Retrieve" +
            "RevisionsForFileServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSourceCodeRevision[] SourceCode_RetrieveRevisionsForFile(string branchId, string fileId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/SourceCode_Retrieve" +
            "RevisionsForFile", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/SourceCode_Retrieve" +
            "RevisionsForFileResponse")]
        System.IAsyncResult BeginSourceCode_RetrieveRevisionsForFile(string branchId, string fileId, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSourceCodeRevision[] EndSourceCode_RetrieveRevisionsForFile(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/SourceCode_Retrieve" +
            "RevisionById", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/SourceCode_Retrieve" +
            "RevisionByIdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/SourceCode_Retrieve" +
            "RevisionByIdServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSourceCodeRevision SourceCode_RetrieveRevisionById(string branchId, string revisionId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/SourceCode_Retrieve" +
            "RevisionById", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/SourceCode_Retrieve" +
            "RevisionByIdResponse")]
        System.IAsyncResult BeginSourceCode_RetrieveRevisionById(string branchId, string revisionId, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSourceCodeRevision EndSourceCode_RetrieveRevisionById(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/SourceCode_Retrieve" +
            "RevisionsForArtifact", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/SourceCode_Retrieve" +
            "RevisionsForArtifactResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/SourceCode_Retrieve" +
            "RevisionsForArtifactServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSourceCodeRevision[] SourceCode_RetrieveRevisionsForArtifact(string branchId, int artifactTypeId, int artifactId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/SourceCode_Retrieve" +
            "RevisionsForArtifact", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/SourceCode_Retrieve" +
            "RevisionsForArtifactResponse")]
        System.IAsyncResult BeginSourceCode_RetrieveRevisionsForArtifact(string branchId, int artifactTypeId, int artifactId, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSourceCodeRevision[] EndSourceCode_RetrieveRevisionsForArtifact(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/SourceCode_Retrieve" +
            "ArtifactsForRevision", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/SourceCode_Retrieve" +
            "ArtifactsForRevisionResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/SourceCode_Retrieve" +
            "ArtifactsForRevisionServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteLinkedArtifact[] SourceCode_RetrieveArtifactsForRevision(string branchId, string revisionId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/SourceCode_Retrieve" +
            "ArtifactsForRevision", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/SourceCode_Retrieve" +
            "ArtifactsForRevisionResponse")]
        System.IAsyncResult BeginSourceCode_RetrieveArtifactsForRevision(string branchId, string revisionId, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteLinkedArtifact[] EndSourceCode_RetrieveArtifactsForRevision(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Message_GetInfo", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Message_GetInfoResp" +
            "onse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Message_GetInfoServ" +
            "iceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteMessageInfo Message_GetInfo();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Message_GetInfo", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Message_GetInfoResp" +
            "onse")]
        System.IAsyncResult BeginMessage_GetInfo(System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteMessageInfo EndMessage_GetInfo(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Message_PostNew", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Message_PostNewResp" +
            "onse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Message_PostNewServ" +
            "iceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        long Message_PostNew(int recipientUserId, string message);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Message_PostNew", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Message_PostNewResp" +
            "onse")]
        System.IAsyncResult BeginMessage_PostNew(int recipientUserId, string message, System.AsyncCallback callback, object asyncState);
        
        long EndMessage_PostNew(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Message_MarkAllAsRe" +
            "ad", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Message_MarkAllAsRe" +
            "adResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Message_MarkAllAsRe" +
            "adServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        void Message_MarkAllAsRead(int senderUserId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Message_MarkAllAsRe" +
            "ad", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Message_MarkAllAsRe" +
            "adResponse")]
        System.IAsyncResult BeginMessage_MarkAllAsRead(int senderUserId, System.AsyncCallback callback, object asyncState);
        
        void EndMessage_MarkAllAsRead(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Message_GetUnreadMe" +
            "ssageSenders", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Message_GetUnreadMe" +
            "ssageSendersResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Message_GetUnreadMe" +
            "ssageSendersServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteUserMessage[] Message_GetUnreadMessageSenders();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Message_GetUnreadMe" +
            "ssageSenders", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Message_GetUnreadMe" +
            "ssageSendersResponse")]
        System.IAsyncResult BeginMessage_GetUnreadMessageSenders(System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteUserMessage[] EndMessage_GetUnreadMessageSenders(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Message_RetrieveUnr" +
            "ead", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Message_RetrieveUnr" +
            "eadResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Message_RetrieveUnr" +
            "eadServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteMessage[] Message_RetrieveUnread();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Message_RetrieveUnr" +
            "ead", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Message_RetrieveUnr" +
            "eadResponse")]
        System.IAsyncResult BeginMessage_RetrieveUnread(System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteMessage[] EndMessage_RetrieveUnread(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/History_RetrieveFor" +
            "Artifact", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/History_RetrieveFor" +
            "ArtifactResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/History_RetrieveFor" +
            "ArtifactServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteHistoryChange[] History_RetrieveForArtifact(int artifactTypeId, int artifactId, int startingRow, int numberOfRows, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSort remoteSort, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/History_RetrieveFor" +
            "Artifact", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/History_RetrieveFor" +
            "ArtifactResponse")]
        System.IAsyncResult BeginHistory_RetrieveForArtifact(int artifactTypeId, int artifactId, int startingRow, int numberOfRows, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSort remoteSort, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteHistoryChange[] EndHistory_RetrieveForArtifact(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/History_RetrieveByI" +
            "d", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/History_RetrieveByI" +
            "dResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/History_RetrieveByI" +
            "dServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteHistoryChangeSet History_RetrieveById(int historyChangeSetId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/History_RetrieveByI" +
            "d", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/History_RetrieveByI" +
            "dResponse")]
        System.IAsyncResult BeginHistory_RetrieveById(int historyChangeSetId, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteHistoryChangeSet EndHistory_RetrieveById(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Subscription_Subscr" +
            "ibeToArtifact", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Subscription_Subscr" +
            "ibeToArtifactResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Subscription_Subscr" +
            "ibeToArtifactServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        void Subscription_SubscribeToArtifact(int artifactTypeId, int artifactId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Subscription_Subscr" +
            "ibeToArtifact", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Subscription_Subscr" +
            "ibeToArtifactResponse")]
        System.IAsyncResult BeginSubscription_SubscribeToArtifact(int artifactTypeId, int artifactId, System.AsyncCallback callback, object asyncState);
        
        void EndSubscription_SubscribeToArtifact(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Subscription_Unsubs" +
            "cribeFromArtifact", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Subscription_Unsubs" +
            "cribeFromArtifactResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Subscription_Unsubs" +
            "cribeFromArtifactServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        void Subscription_UnsubscribeFromArtifact(int artifactTypeId, int artifactId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Subscription_Unsubs" +
            "cribeFromArtifact", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Subscription_Unsubs" +
            "cribeFromArtifactResponse")]
        System.IAsyncResult BeginSubscription_UnsubscribeFromArtifact(int artifactTypeId, int artifactId, System.AsyncCallback callback, object asyncState);
        
        void EndSubscription_UnsubscribeFromArtifact(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Subscription_Retrie" +
            "veForUser", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Subscription_Retrie" +
            "veForUserResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Subscription_Retrie" +
            "veForUserServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteArtifactSubscription[] Subscription_RetrieveForUser();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Subscription_Retrie" +
            "veForUser", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Subscription_Retrie" +
            "veForUserResponse")]
        System.IAsyncResult BeginSubscription_RetrieveForUser(System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteArtifactSubscription[] EndSubscription_RetrieveForUser(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Subscription_Retrie" +
            "veForArtifact", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Subscription_Retrie" +
            "veForArtifactResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Subscription_Retrie" +
            "veForArtifactServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteArtifactSubscription[] Subscription_RetrieveForArtifact(int artifactTypeId, int artifactId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Subscription_Retrie" +
            "veForArtifact", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Subscription_Retrie" +
            "veForArtifactResponse")]
        System.IAsyncResult BeginSubscription_RetrieveForArtifact(int artifactTypeId, int artifactId, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteArtifactSubscription[] EndSubscription_RetrieveForArtifact(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/SavedFilter_Retriev" +
            "eForUser", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/SavedFilter_Retriev" +
            "eForUserResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/SavedFilter_Retriev" +
            "eForUserServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSavedFilter[] SavedFilter_RetrieveForUser();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/SavedFilter_Retriev" +
            "eForUser", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/SavedFilter_Retriev" +
            "eForUserResponse")]
        System.IAsyncResult BeginSavedFilter_RetrieveForUser(System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSavedFilter[] EndSavedFilter_RetrieveForUser(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Requirement_UpdateS" +
            "tep", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Requirement_UpdateS" +
            "tepResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Requirement_UpdateS" +
            "tepServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        void Requirement_UpdateStep(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRequirementStep remoteRequirementStep);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Requirement_UpdateS" +
            "tep", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Requirement_UpdateS" +
            "tepResponse")]
        System.IAsyncResult BeginRequirement_UpdateStep(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRequirementStep remoteRequirementStep, System.AsyncCallback callback, object asyncState);
        
        void EndRequirement_UpdateStep(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Requirement_MoveSte" +
            "p", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Requirement_MoveSte" +
            "pResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Requirement_MoveSte" +
            "pServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        void Requirement_MoveStep(int requirementId, int sourceRequirementStepId, System.Nullable<int> destinationRequirementStepId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Requirement_MoveSte" +
            "p", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Requirement_MoveSte" +
            "pResponse")]
        System.IAsyncResult BeginRequirement_MoveStep(int requirementId, int sourceRequirementStepId, System.Nullable<int> destinationRequirementStepId, System.AsyncCallback callback, object asyncState);
        
        void EndRequirement_MoveStep(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Requirement_DeleteS" +
            "tep", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Requirement_DeleteS" +
            "tepResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Requirement_DeleteS" +
            "tepServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        void Requirement_DeleteStep(int requirementId, int requirementStepId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Requirement_DeleteS" +
            "tep", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Requirement_DeleteS" +
            "tepResponse")]
        System.IAsyncResult BeginRequirement_DeleteStep(int requirementId, int requirementStepId, System.AsyncCallback callback, object asyncState);
        
        void EndRequirement_DeleteStep(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/System_GetProductVe" +
            "rsion", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/System_GetProductVe" +
            "rsionResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/System_GetProductVe" +
            "rsionServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteVersion System_GetProductVersion();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/System_GetProductVe" +
            "rsion", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/System_GetProductVe" +
            "rsionResponse")]
        System.IAsyncResult BeginSystem_GetProductVersion(System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteVersion EndSystem_GetProductVersion(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/System_GetSettings", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/System_GetSettingsR" +
            "esponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/System_GetSettingsS" +
            "erviceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSetting[] System_GetSettings();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/System_GetSettings", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/System_GetSettingsR" +
            "esponse")]
        System.IAsyncResult BeginSystem_GetSettings(System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSetting[] EndSystem_GetSettings(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/System_GetArtifactU" +
            "rl", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/System_GetArtifactU" +
            "rlResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/System_GetArtifactU" +
            "rlServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        string System_GetArtifactUrl(int navigationLinkId, int projectId, int artifactId, string tabName);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/System_GetArtifactU" +
            "rl", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/System_GetArtifactU" +
            "rlResponse")]
        System.IAsyncResult BeginSystem_GetArtifactUrl(int navigationLinkId, int projectId, int artifactId, string tabName, System.AsyncCallback callback, object asyncState);
        
        string EndSystem_GetArtifactUrl(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/System_GetProjectId" +
            "ForArtifact", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/System_GetProjectId" +
            "ForArtifactResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/System_GetProjectId" +
            "ForArtifactServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        int System_GetProjectIdForArtifact(int artifactTypeId, int artifactId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/System_GetProjectId" +
            "ForArtifact", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/System_GetProjectId" +
            "ForArtifactResponse")]
        System.IAsyncResult BeginSystem_GetProjectIdForArtifact(int artifactTypeId, int artifactId, System.AsyncCallback callback, object asyncState);
        
        int EndSystem_GetProjectIdForArtifact(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Task_Create", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Task_CreateResponse" +
            "")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ValidationFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Task_CreateValidati" +
            "onFaultMessageFault", Name="ValidationFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Task_CreateServiceF" +
            "aultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTask Task_Create(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTask remoteTask);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Task_Create", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Task_CreateResponse" +
            "")]
        System.IAsyncResult BeginTask_Create(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTask remoteTask, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTask EndTask_Create(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Task_Retrieve", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Task_RetrieveRespon" +
            "se")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Task_RetrieveServic" +
            "eFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTask[] Task_Retrieve(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSort remoteSort, int startingRow, int numberOfRows);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Task_Retrieve", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Task_RetrieveRespon" +
            "se")]
        System.IAsyncResult BeginTask_Retrieve(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSort remoteSort, int startingRow, int numberOfRows, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTask[] EndTask_Retrieve(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Task_RetrieveById", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Task_RetrieveByIdRe" +
            "sponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Task_RetrieveByIdSe" +
            "rviceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTask Task_RetrieveById(int taskId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Task_RetrieveById", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Task_RetrieveByIdRe" +
            "sponse")]
        System.IAsyncResult BeginTask_RetrieveById(int taskId, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTask EndTask_RetrieveById(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Task_RetrieveForOwn" +
            "er", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Task_RetrieveForOwn" +
            "erResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Task_RetrieveForOwn" +
            "erServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTask[] Task_RetrieveForOwner();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Task_RetrieveForOwn" +
            "er", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Task_RetrieveForOwn" +
            "erResponse")]
        System.IAsyncResult BeginTask_RetrieveForOwner(System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTask[] EndTask_RetrieveForOwner(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Task_RetrieveNew", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Task_RetrieveNewRes" +
            "ponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Task_RetrieveNewSer" +
            "viceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTask[] Task_RetrieveNew(System.DateTime creationDate, int startRow, int numberOfRows);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Task_RetrieveNew", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Task_RetrieveNewRes" +
            "ponse")]
        System.IAsyncResult BeginTask_RetrieveNew(System.DateTime creationDate, int startRow, int numberOfRows, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTask[] EndTask_RetrieveNew(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Task_Update", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Task_UpdateResponse" +
            "")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Task_UpdateServiceF" +
            "aultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ValidationFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Task_UpdateValidati" +
            "onFaultMessageFault", Name="ValidationFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        void Task_Update(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTask remoteTask);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Task_Update", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Task_UpdateResponse" +
            "")]
        System.IAsyncResult BeginTask_Update(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTask remoteTask, System.AsyncCallback callback, object asyncState);
        
        void EndTask_Update(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Task_Count", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Task_CountResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Task_CountServiceFa" +
            "ultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        long Task_Count(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Task_Count", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Task_CountResponse")]
        System.IAsyncResult BeginTask_Count(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters, System.AsyncCallback callback, object asyncState);
        
        long EndTask_Count(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Task_Delete", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Task_DeleteResponse" +
            "")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Task_DeleteServiceF" +
            "aultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        void Task_Delete(int taskId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Task_Delete", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Task_DeleteResponse" +
            "")]
        System.IAsyncResult BeginTask_Delete(int taskId, System.AsyncCallback callback, object asyncState);
        
        void EndTask_Delete(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Task_RetrieveCommen" +
            "ts", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Task_RetrieveCommen" +
            "tsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Task_RetrieveCommen" +
            "tsServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComment[] Task_RetrieveComments(int TaskId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Task_RetrieveCommen" +
            "ts", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Task_RetrieveCommen" +
            "tsResponse")]
        System.IAsyncResult BeginTask_RetrieveComments(int TaskId, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComment[] EndTask_RetrieveComments(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Task_CreateComment", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Task_CreateCommentR" +
            "esponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Task_CreateCommentS" +
            "erviceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComment Task_CreateComment(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComment remoteComment);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Task_CreateComment", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Task_CreateCommentR" +
            "esponse")]
        System.IAsyncResult BeginTask_CreateComment(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComment remoteComment, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComment EndTask_CreateComment(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Task_RetrieveStatus" +
            "es", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Task_RetrieveStatus" +
            "esResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Task_RetrieveStatus" +
            "esServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTaskStatus[] Task_RetrieveStatuses();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Task_RetrieveStatus" +
            "es", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Task_RetrieveStatus" +
            "esResponse")]
        System.IAsyncResult BeginTask_RetrieveStatuses(System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTaskStatus[] EndTask_RetrieveStatuses(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Task_RetrieveTypes", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Task_RetrieveTypesR" +
            "esponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Task_RetrieveTypesS" +
            "erviceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTaskType[] Task_RetrieveTypes();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Task_RetrieveTypes", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Task_RetrieveTypesR" +
            "esponse")]
        System.IAsyncResult BeginTask_RetrieveTypes(System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTaskType[] EndTask_RetrieveTypes(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Task_RetrieveWorkfl" +
            "owFields", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Task_RetrieveWorkfl" +
            "owFieldsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Task_RetrieveWorkfl" +
            "owFieldsServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteWorkflowField[] Task_RetrieveWorkflowFields(int currentTypeId, int currentStatusId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Task_RetrieveWorkfl" +
            "owFields", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Task_RetrieveWorkfl" +
            "owFieldsResponse")]
        System.IAsyncResult BeginTask_RetrieveWorkflowFields(int currentTypeId, int currentStatusId, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteWorkflowField[] EndTask_RetrieveWorkflowFields(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Task_RetrieveWorkfl" +
            "owTransitions", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Task_RetrieveWorkfl" +
            "owTransitionsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Task_RetrieveWorkfl" +
            "owTransitionsServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteWorkflowTransition[] Task_RetrieveWorkflowTransitions(int currentTypeId, int currentStatusId, bool isCreator, bool isOwner);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Task_RetrieveWorkfl" +
            "owTransitions", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Task_RetrieveWorkfl" +
            "owTransitionsResponse")]
        System.IAsyncResult BeginTask_RetrieveWorkflowTransitions(int currentTypeId, int currentStatusId, bool isCreator, bool isOwner, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteWorkflowTransition[] EndTask_RetrieveWorkflowTransitions(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Task_RetrieveWorkfl" +
            "owCustomProperties", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Task_RetrieveWorkfl" +
            "owCustomPropertiesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Task_RetrieveWorkfl" +
            "owCustomPropertiesServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteWorkflowCustomProperty[] Task_RetrieveWorkflowCustomProperties(int currentTypeId, int currentStatusId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Task_RetrieveWorkfl" +
            "owCustomProperties", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Task_RetrieveWorkfl" +
            "owCustomPropertiesResponse")]
        System.IAsyncResult BeginTask_RetrieveWorkflowCustomProperties(int currentTypeId, int currentStatusId, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteWorkflowCustomProperty[] EndTask_RetrieveWorkflowCustomProperties(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Task_RetrieveFolder" +
            "s", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Task_RetrieveFolder" +
            "sResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Task_RetrieveFolder" +
            "sServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTaskFolder[] Task_RetrieveFolders();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Task_RetrieveFolder" +
            "s", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Task_RetrieveFolder" +
            "sResponse")]
        System.IAsyncResult BeginTask_RetrieveFolders(System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTaskFolder[] EndTask_RetrieveFolders(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Task_RetrieveFolder" +
            "sByParent", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Task_RetrieveFolder" +
            "sByParentResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Task_RetrieveFolder" +
            "sByParentServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTaskFolder[] Task_RetrieveFoldersByParent(System.Nullable<int> parentTaskFolderId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Task_RetrieveFolder" +
            "sByParent", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Task_RetrieveFolder" +
            "sByParentResponse")]
        System.IAsyncResult BeginTask_RetrieveFoldersByParent(System.Nullable<int> parentTaskFolderId, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTaskFolder[] EndTask_RetrieveFoldersByParent(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Task_CreateFolder", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Task_CreateFolderRe" +
            "sponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Task_CreateFolderSe" +
            "rviceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ValidationFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Task_CreateFolderVa" +
            "lidationFaultMessageFault", Name="ValidationFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTaskFolder Task_CreateFolder(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTaskFolder remoteTaskFolder);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Task_CreateFolder", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Task_CreateFolderRe" +
            "sponse")]
        System.IAsyncResult BeginTask_CreateFolder(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTaskFolder remoteTaskFolder, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTaskFolder EndTask_CreateFolder(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Task_RetrieveFolder" +
            "ById", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Task_RetrieveFolder" +
            "ByIdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Task_RetrieveFolder" +
            "ByIdServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTaskFolder Task_RetrieveFolderById(int taskFolderId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Task_RetrieveFolder" +
            "ById", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Task_RetrieveFolder" +
            "ByIdResponse")]
        System.IAsyncResult BeginTask_RetrieveFolderById(int taskFolderId, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTaskFolder EndTask_RetrieveFolderById(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Task_DeleteFolder", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Task_DeleteFolderRe" +
            "sponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Task_DeleteFolderSe" +
            "rviceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        void Task_DeleteFolder(int taskFolderId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Task_DeleteFolder", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Task_DeleteFolderRe" +
            "sponse")]
        System.IAsyncResult BeginTask_DeleteFolder(int taskFolderId, System.AsyncCallback callback, object asyncState);
        
        void EndTask_DeleteFolder(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Task_UpdateFolder", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Task_UpdateFolderRe" +
            "sponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Task_UpdateFolderSe" +
            "rviceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ValidationFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Task_UpdateFolderVa" +
            "lidationFaultMessageFault", Name="ValidationFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        void Task_UpdateFolder(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTaskFolder remoteTaskFolder);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Task_UpdateFolder", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Task_UpdateFolderRe" +
            "sponse")]
        System.IAsyncResult BeginTask_UpdateFolder(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTaskFolder remoteTaskFolder, System.AsyncCallback callback, object asyncState);
        
        void EndTask_UpdateFolder(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_Create", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_CreateResp" +
            "onse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ValidationFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_CreateVali" +
            "dationFaultMessageFault", Name="ValidationFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_CreateServ" +
            "iceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestCase TestCase_Create(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestCase remoteTestCase);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_Create", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_CreateResp" +
            "onse")]
        System.IAsyncResult BeginTestCase_Create(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestCase remoteTestCase, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestCase EndTestCase_Create(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_CreateFold" +
            "er", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_CreateFold" +
            "erResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_CreateFold" +
            "erServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ValidationFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_CreateFold" +
            "erValidationFaultMessageFault", Name="ValidationFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestCaseFolder TestCase_CreateFolder(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestCaseFolder remoteTestCaseFolder);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_CreateFold" +
            "er", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_CreateFold" +
            "erResponse")]
        System.IAsyncResult BeginTestCase_CreateFolder(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestCaseFolder remoteTestCaseFolder, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestCaseFolder EndTestCase_CreateFolder(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_RetrieveBy" +
            "Id", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_RetrieveBy" +
            "IdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_RetrieveBy" +
            "IdServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestCase TestCase_RetrieveById(int testCaseId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_RetrieveBy" +
            "Id", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_RetrieveBy" +
            "IdResponse")]
        System.IAsyncResult BeginTestCase_RetrieveById(int testCaseId, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestCase EndTestCase_RetrieveById(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_RetrieveFo" +
            "lderById", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_RetrieveFo" +
            "lderByIdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_RetrieveFo" +
            "lderByIdServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestCaseFolder TestCase_RetrieveFolderById(int testCaseFolderId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_RetrieveFo" +
            "lderById", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_RetrieveFo" +
            "lderByIdResponse")]
        System.IAsyncResult BeginTestCase_RetrieveFolderById(int testCaseFolderId, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestCaseFolder EndTestCase_RetrieveFolderById(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_Update", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_UpdateResp" +
            "onse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ValidationFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_UpdateVali" +
            "dationFaultMessageFault", Name="ValidationFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_UpdateServ" +
            "iceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        void TestCase_Update(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestCase remoteTestCase);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_Update", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_UpdateResp" +
            "onse")]
        System.IAsyncResult BeginTestCase_Update(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestCase remoteTestCase, System.AsyncCallback callback, object asyncState);
        
        void EndTestCase_Update(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_DeleteFold" +
            "er", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_DeleteFold" +
            "erResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_DeleteFold" +
            "erServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        void TestCase_DeleteFolder(int testCaseFolderId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_DeleteFold" +
            "er", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_DeleteFold" +
            "erResponse")]
        System.IAsyncResult BeginTestCase_DeleteFolder(int testCaseFolderId, System.AsyncCallback callback, object asyncState);
        
        void EndTestCase_DeleteFolder(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_UpdateFold" +
            "er", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_UpdateFold" +
            "erResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_UpdateFold" +
            "erServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ValidationFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_UpdateFold" +
            "erValidationFaultMessageFault", Name="ValidationFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        void TestCase_UpdateFolder(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestCaseFolder remoteTestCaseFolder);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_UpdateFold" +
            "er", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_UpdateFold" +
            "erResponse")]
        System.IAsyncResult BeginTestCase_UpdateFolder(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestCaseFolder remoteTestCaseFolder, System.AsyncCallback callback, object asyncState);
        
        void EndTestCase_UpdateFolder(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_Delete", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_DeleteResp" +
            "onse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_DeleteServ" +
            "iceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        void TestCase_Delete(int testCaseId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_Delete", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_DeleteResp" +
            "onse")]
        System.IAsyncResult BeginTestCase_Delete(int testCaseId, System.AsyncCallback callback, object asyncState);
        
        void EndTestCase_Delete(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_AddParamet" +
            "er", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_AddParamet" +
            "erResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_AddParamet" +
            "erServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestCaseParameter TestCase_AddParameter(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestCaseParameter remoteTestCaseParameter);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_AddParamet" +
            "er", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_AddParamet" +
            "erResponse")]
        System.IAsyncResult BeginTestCase_AddParameter(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestCaseParameter remoteTestCaseParameter, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestCaseParameter EndTestCase_AddParameter(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_CreatePara" +
            "meterToken", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_CreatePara" +
            "meterTokenResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_CreatePara" +
            "meterTokenServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        string TestCase_CreateParameterToken(string parameterName);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_CreatePara" +
            "meterToken", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_CreatePara" +
            "meterTokenResponse")]
        System.IAsyncResult BeginTestCase_CreateParameterToken(string parameterName, System.AsyncCallback callback, object asyncState);
        
        string EndTestCase_CreateParameterToken(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_RetrievePa" +
            "rameters", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_RetrievePa" +
            "rametersResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_RetrievePa" +
            "rametersServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestCaseParameter[] TestCase_RetrieveParameters(int testCaseId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_RetrievePa" +
            "rameters", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_RetrievePa" +
            "rametersResponse")]
        System.IAsyncResult BeginTestCase_RetrieveParameters(int testCaseId, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestCaseParameter[] EndTestCase_RetrieveParameters(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_RetrieveSt" +
            "epParameters", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_RetrieveSt" +
            "epParametersResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_RetrieveSt" +
            "epParametersServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestStepParameter[] TestCase_RetrieveStepParameters(int testCaseId, int testStepId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_RetrieveSt" +
            "epParameters", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_RetrieveSt" +
            "epParametersResponse")]
        System.IAsyncResult BeginTestCase_RetrieveStepParameters(int testCaseId, int testStepId, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestStepParameter[] EndTestCase_RetrieveStepParameters(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_RetrieveSt" +
            "eps", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_RetrieveSt" +
            "epsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_RetrieveSt" +
            "epsServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestStep[] TestCase_RetrieveSteps(int testCaseId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_RetrieveSt" +
            "eps", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_RetrieveSt" +
            "epsResponse")]
        System.IAsyncResult BeginTestCase_RetrieveSteps(int testCaseId, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestStep[] EndTestCase_RetrieveSteps(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_RetrieveSt" +
            "epById", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_RetrieveSt" +
            "epByIdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_RetrieveSt" +
            "epByIdServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestStep TestCase_RetrieveStepById(int testStepId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_RetrieveSt" +
            "epById", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_RetrieveSt" +
            "epByIdResponse")]
        System.IAsyncResult BeginTestCase_RetrieveStepById(int testStepId, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestStep EndTestCase_RetrieveStepById(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_MoveStep", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_MoveStepRe" +
            "sponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_MoveStepSe" +
            "rviceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        void TestCase_MoveStep(int testCaseId, int sourceTestStepId, System.Nullable<int> destinationTestStepId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_MoveStep", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_MoveStepRe" +
            "sponse")]
        System.IAsyncResult BeginTestCase_MoveStep(int testCaseId, int sourceTestStepId, System.Nullable<int> destinationTestStepId, System.AsyncCallback callback, object asyncState);
        
        void EndTestCase_MoveStep(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_DeleteStep" +
            "", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_DeleteStep" +
            "Response")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_DeleteStep" +
            "ServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        void TestCase_DeleteStep(int testCaseId, int testStepId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_DeleteStep" +
            "", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_DeleteStep" +
            "Response")]
        System.IAsyncResult BeginTestCase_DeleteStep(int testCaseId, int testStepId, System.AsyncCallback callback, object asyncState);
        
        void EndTestCase_DeleteStep(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_AddStep", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_AddStepRes" +
            "ponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_AddStepSer" +
            "viceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestStep TestCase_AddStep(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestStep remoteTestStep, int testCaseId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_AddStep", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_AddStepRes" +
            "ponse")]
        System.IAsyncResult BeginTestCase_AddStep(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestStep remoteTestStep, int testCaseId, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestStep EndTestCase_AddStep(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_UpdateStep" +
            "", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_UpdateStep" +
            "Response")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_UpdateStep" +
            "ServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        void TestCase_UpdateStep(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestStep remoteTestStep);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_UpdateStep" +
            "", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_UpdateStep" +
            "Response")]
        System.IAsyncResult BeginTestCase_UpdateStep(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestStep remoteTestStep, System.AsyncCallback callback, object asyncState);
        
        void EndTestCase_UpdateStep(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_AddLink", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_AddLinkRes" +
            "ponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_AddLinkSer" +
            "viceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        int TestCase_AddLink(int testCaseId, int position, int linkedTestCaseId, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestStepParameter[] parameters);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_AddLink", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_AddLinkRes" +
            "ponse")]
        System.IAsyncResult BeginTestCase_AddLink(int testCaseId, int position, int linkedTestCaseId, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestStepParameter[] parameters, System.AsyncCallback callback, object asyncState);
        
        int EndTestCase_AddLink(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_AddUpdateA" +
            "utomationScript", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_AddUpdateA" +
            "utomationScriptResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_AddUpdateA" +
            "utomationScriptServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        void TestCase_AddUpdateAutomationScript(int testCaseId, System.Nullable<int> automationEngineId, string urlOrFilename, string description, byte[] binaryData, string version, System.Nullable<int> projectAttachmentTypeId, System.Nullable<int> projectAttachmentFolderId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_AddUpdateA" +
            "utomationScript", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_AddUpdateA" +
            "utomationScriptResponse")]
        System.IAsyncResult BeginTestCase_AddUpdateAutomationScript(int testCaseId, System.Nullable<int> automationEngineId, string urlOrFilename, string description, byte[] binaryData, string version, System.Nullable<int> projectAttachmentTypeId, System.Nullable<int> projectAttachmentFolderId, System.AsyncCallback callback, object asyncState);
        
        void EndTestCase_AddUpdateAutomationScript(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_Count", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_CountRespo" +
            "nse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_CountServi" +
            "ceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        long TestCase_Count(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters, System.Nullable<int> releaseId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_Count", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_CountRespo" +
            "nse")]
        System.IAsyncResult BeginTestCase_Count(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters, System.Nullable<int> releaseId, System.AsyncCallback callback, object asyncState);
        
        long EndTestCase_Count(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_CountForFo" +
            "lder", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_CountForFo" +
            "lderResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_CountForFo" +
            "lderServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        long TestCase_CountForFolder(System.Nullable<int> testCaseFolderId, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters, System.Nullable<int> releaseId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_CountForFo" +
            "lder", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_CountForFo" +
            "lderResponse")]
        System.IAsyncResult BeginTestCase_CountForFolder(System.Nullable<int> testCaseFolderId, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters, System.Nullable<int> releaseId, System.AsyncCallback callback, object asyncState);
        
        long EndTestCase_CountForFolder(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_Retrieve", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_RetrieveRe" +
            "sponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_RetrieveSe" +
            "rviceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestCase[] TestCase_Retrieve(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSort remoteSort, int startingRow, int numberOfRows, System.Nullable<int> releaseId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_Retrieve", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_RetrieveRe" +
            "sponse")]
        System.IAsyncResult BeginTestCase_Retrieve(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSort remoteSort, int startingRow, int numberOfRows, System.Nullable<int> releaseId, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestCase[] EndTestCase_Retrieve(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_RetrieveBy" +
            "Folder", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_RetrieveBy" +
            "FolderResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_RetrieveBy" +
            "FolderServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestCase[] TestCase_RetrieveByFolder(System.Nullable<int> testCaseFolderId, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSort remoteSort, int startingRow, int numberOfRows, System.Nullable<int> releaseId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_RetrieveBy" +
            "Folder", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_RetrieveBy" +
            "FolderResponse")]
        System.IAsyncResult BeginTestCase_RetrieveByFolder(System.Nullable<int> testCaseFolderId, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSort remoteSort, int startingRow, int numberOfRows, System.Nullable<int> releaseId, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestCase[] EndTestCase_RetrieveByFolder(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_RetrieveBy" +
            "TestSetId", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_RetrieveBy" +
            "TestSetIdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_RetrieveBy" +
            "TestSetIdServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestCase[] TestCase_RetrieveByTestSetId(int testSetId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_RetrieveBy" +
            "TestSetId", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_RetrieveBy" +
            "TestSetIdResponse")]
        System.IAsyncResult BeginTestCase_RetrieveByTestSetId(int testSetId, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestCase[] EndTestCase_RetrieveByTestSetId(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_RetrieveFo" +
            "rOwner", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_RetrieveFo" +
            "rOwnerResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_RetrieveFo" +
            "rOwnerServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestCase[] TestCase_RetrieveForOwner();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_RetrieveFo" +
            "rOwner", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_RetrieveFo" +
            "rOwnerResponse")]
        System.IAsyncResult BeginTestCase_RetrieveForOwner(System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestCase[] EndTestCase_RetrieveForOwner(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_Move", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_MoveRespon" +
            "se")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_MoveServic" +
            "eFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        void TestCase_Move(int testCaseId, System.Nullable<int> testCaseFolderId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_Move", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_MoveRespon" +
            "se")]
        System.IAsyncResult BeginTestCase_Move(int testCaseId, System.Nullable<int> testCaseFolderId, System.AsyncCallback callback, object asyncState);
        
        void EndTestCase_Move(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_RetrieveFo" +
            "lders", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_RetrieveFo" +
            "ldersResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_RetrieveFo" +
            "ldersServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestCaseFolder[] TestCase_RetrieveFolders();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_RetrieveFo" +
            "lders", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_RetrieveFo" +
            "ldersResponse")]
        System.IAsyncResult BeginTestCase_RetrieveFolders(System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestCaseFolder[] EndTestCase_RetrieveFolders(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_RetrieveFo" +
            "ldersByParent", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_RetrieveFo" +
            "ldersByParentResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_RetrieveFo" +
            "ldersByParentServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestCaseFolder[] TestCase_RetrieveFoldersByParent(System.Nullable<int> parentTestCaseFolderId, System.Nullable<int> releaseId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_RetrieveFo" +
            "ldersByParent", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_RetrieveFo" +
            "ldersByParentResponse")]
        System.IAsyncResult BeginTestCase_RetrieveFoldersByParent(System.Nullable<int> parentTestCaseFolderId, System.Nullable<int> releaseId, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestCaseFolder[] EndTestCase_RetrieveFoldersByParent(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_RetrieveCo" +
            "mments", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_RetrieveCo" +
            "mmentsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_RetrieveCo" +
            "mmentsServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComment[] TestCase_RetrieveComments(int TestCaseId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_RetrieveCo" +
            "mments", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_RetrieveCo" +
            "mmentsResponse")]
        System.IAsyncResult BeginTestCase_RetrieveComments(int TestCaseId, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComment[] EndTestCase_RetrieveComments(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_CreateComm" +
            "ent", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_CreateComm" +
            "entResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_CreateComm" +
            "entServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComment TestCase_CreateComment(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComment remoteComment);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_CreateComm" +
            "ent", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_CreateComm" +
            "entResponse")]
        System.IAsyncResult BeginTestCase_CreateComment(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComment remoteComment, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComment EndTestCase_CreateComment(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_RetrieveSt" +
            "atuses", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_RetrieveSt" +
            "atusesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_RetrieveSt" +
            "atusesServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestCaseStatus[] TestCase_RetrieveStatuses();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_RetrieveSt" +
            "atuses", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_RetrieveSt" +
            "atusesResponse")]
        System.IAsyncResult BeginTestCase_RetrieveStatuses(System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestCaseStatus[] EndTestCase_RetrieveStatuses(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_RetrieveTy" +
            "pes", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_RetrieveTy" +
            "pesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_RetrieveTy" +
            "pesServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestCaseType[] TestCase_RetrieveTypes();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_RetrieveTy" +
            "pes", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_RetrieveTy" +
            "pesResponse")]
        System.IAsyncResult BeginTestCase_RetrieveTypes(System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestCaseType[] EndTestCase_RetrieveTypes(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_RetrieveWo" +
            "rkflowFields", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_RetrieveWo" +
            "rkflowFieldsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_RetrieveWo" +
            "rkflowFieldsServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteWorkflowField[] TestCase_RetrieveWorkflowFields(int currentTypeId, int currentStatusId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_RetrieveWo" +
            "rkflowFields", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_RetrieveWo" +
            "rkflowFieldsResponse")]
        System.IAsyncResult BeginTestCase_RetrieveWorkflowFields(int currentTypeId, int currentStatusId, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteWorkflowField[] EndTestCase_RetrieveWorkflowFields(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_RetrieveWo" +
            "rkflowTransitions", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_RetrieveWo" +
            "rkflowTransitionsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_RetrieveWo" +
            "rkflowTransitionsServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteWorkflowTransition[] TestCase_RetrieveWorkflowTransitions(int currentTypeId, int currentStatusId, bool isCreator, bool isOwner);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_RetrieveWo" +
            "rkflowTransitions", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_RetrieveWo" +
            "rkflowTransitionsResponse")]
        System.IAsyncResult BeginTestCase_RetrieveWorkflowTransitions(int currentTypeId, int currentStatusId, bool isCreator, bool isOwner, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteWorkflowTransition[] EndTestCase_RetrieveWorkflowTransitions(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_RetrieveWo" +
            "rkflowCustomProperties", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_RetrieveWo" +
            "rkflowCustomPropertiesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_RetrieveWo" +
            "rkflowCustomPropertiesServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteWorkflowCustomProperty[] TestCase_RetrieveWorkflowCustomProperties(int currentTypeId, int currentStatusId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_RetrieveWo" +
            "rkflowCustomProperties", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestCase_RetrieveWo" +
            "rkflowCustomPropertiesResponse")]
        System.IAsyncResult BeginTestCase_RetrieveWorkflowCustomProperties(int currentTypeId, int currentStatusId, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteWorkflowCustomProperty[] EndTestCase_RetrieveWorkflowCustomProperties(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestRun_CreateFromT" +
            "estCases", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestRun_CreateFromT" +
            "estCasesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestRun_CreateFromT" +
            "estCasesServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteManualTestRun[] TestRun_CreateFromTestCases(int[] testCaseIds, System.Nullable<int> releaseId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestRun_CreateFromT" +
            "estCases", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestRun_CreateFromT" +
            "estCasesResponse")]
        System.IAsyncResult BeginTestRun_CreateFromTestCases(int[] testCaseIds, System.Nullable<int> releaseId, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteManualTestRun[] EndTestRun_CreateFromTestCases(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestRun_Count", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestRun_CountRespon" +
            "se")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestRun_CountServic" +
            "eFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        long TestRun_Count(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestRun_Count", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestRun_CountRespon" +
            "se")]
        System.IAsyncResult BeginTestRun_Count(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters, System.AsyncCallback callback, object asyncState);
        
        long EndTestRun_Count(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestRun_CreateFromT" +
            "estSet", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestRun_CreateFromT" +
            "estSetResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestRun_CreateFromT" +
            "estSetServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteManualTestRun[] TestRun_CreateFromTestSet(int testSetId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestRun_CreateFromT" +
            "estSet", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestRun_CreateFromT" +
            "estSetResponse")]
        System.IAsyncResult BeginTestRun_CreateFromTestSet(int testSetId, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteManualTestRun[] EndTestRun_CreateFromTestSet(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestRun_Delete", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestRun_DeleteRespo" +
            "nse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestRun_DeleteServi" +
            "ceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        void TestRun_Delete(int testRunId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestRun_Delete", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestRun_DeleteRespo" +
            "nse")]
        System.IAsyncResult BeginTestRun_Delete(int testRunId, System.AsyncCallback callback, object asyncState);
        
        void EndTestRun_Delete(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestRun_CreateForAu" +
            "tomationHost", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestRun_CreateForAu" +
            "tomationHostResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestRun_CreateForAu" +
            "tomationHostServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAutomatedTestRun[] TestRun_CreateForAutomationHost(string automationHostToken, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.DateRange dateRange);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestRun_CreateForAu" +
            "tomationHost", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestRun_CreateForAu" +
            "tomationHostResponse")]
        System.IAsyncResult BeginTestRun_CreateForAutomationHost(string automationHostToken, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.DateRange dateRange, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAutomatedTestRun[] EndTestRun_CreateForAutomationHost(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestRun_CreateForAu" +
            "tomatedTestSet", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestRun_CreateForAu" +
            "tomatedTestSetResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestRun_CreateForAu" +
            "tomatedTestSetServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAutomatedTestRun[] TestRun_CreateForAutomatedTestSet(int testSetId, string automationHostToken);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestRun_CreateForAu" +
            "tomatedTestSet", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestRun_CreateForAu" +
            "tomatedTestSetResponse")]
        System.IAsyncResult BeginTestRun_CreateForAutomatedTestSet(int testSetId, string automationHostToken, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAutomatedTestRun[] EndTestRun_CreateForAutomatedTestSet(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestRun_RecordAutom" +
            "ated1", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestRun_RecordAutom" +
            "ated1Response")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestRun_RecordAutom" +
            "ated1ServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ValidationFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestRun_RecordAutom" +
            "ated1ValidationFaultMessageFault", Name="ValidationFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAutomatedTestRun TestRun_RecordAutomated1(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAutomatedTestRun remoteTestRun);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestRun_RecordAutom" +
            "ated1", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestRun_RecordAutom" +
            "ated1Response")]
        System.IAsyncResult BeginTestRun_RecordAutomated1(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAutomatedTestRun remoteTestRun, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAutomatedTestRun EndTestRun_RecordAutomated1(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestRun_RecordAutom" +
            "ated2", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestRun_RecordAutom" +
            "ated2Response")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestRun_RecordAutom" +
            "ated2ServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ValidationFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestRun_RecordAutom" +
            "ated2ValidationFaultMessageFault", Name="ValidationFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        int TestRun_RecordAutomated2(
                    string userName, 
                    string password, 
                    int projectId, 
                    System.Nullable<int> testerUserId, 
                    int testCaseId, 
                    System.Nullable<int> releaseId, 
                    System.Nullable<int> testSetId, 
                    System.Nullable<int> testSetTestCaseId, 
                    System.Nullable<int> buildId, 
                    System.DateTime startDate, 
                    System.DateTime endDate, 
                    int executionStatusId, 
                    string runnerName, 
                    string runnerTestName, 
                    int runnerAssertCount, 
                    string runnerMessage, 
                    string runnerStackTrace, 
                    int testRunFormatId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestRun_RecordAutom" +
            "ated2", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestRun_RecordAutom" +
            "ated2Response")]
        System.IAsyncResult BeginTestRun_RecordAutomated2(
                    string userName, 
                    string password, 
                    int projectId, 
                    System.Nullable<int> testerUserId, 
                    int testCaseId, 
                    System.Nullable<int> releaseId, 
                    System.Nullable<int> testSetId, 
                    System.Nullable<int> testSetTestCaseId, 
                    System.Nullable<int> buildId, 
                    System.DateTime startDate, 
                    System.DateTime endDate, 
                    int executionStatusId, 
                    string runnerName, 
                    string runnerTestName, 
                    int runnerAssertCount, 
                    string runnerMessage, 
                    string runnerStackTrace, 
                    int testRunFormatId, 
                    System.AsyncCallback callback, 
                    object asyncState);
        
        int EndTestRun_RecordAutomated2(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestRun_RecordAutom" +
            "ated3", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestRun_RecordAutom" +
            "ated3Response")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ValidationFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestRun_RecordAutom" +
            "ated3ValidationFaultMessageFault", Name="ValidationFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestRun_RecordAutom" +
            "ated3ServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAutomatedTestRun[] TestRun_RecordAutomated3(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAutomatedTestRun[] remoteTestRuns);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestRun_RecordAutom" +
            "ated3", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestRun_RecordAutom" +
            "ated3Response")]
        System.IAsyncResult BeginTestRun_RecordAutomated3(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAutomatedTestRun[] remoteTestRuns, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAutomatedTestRun[] EndTestRun_RecordAutomated3(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestRun_Retrieve", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestRun_RetrieveRes" +
            "ponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestRun_RetrieveSer" +
            "viceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestRun[] TestRun_Retrieve(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSort remoteSort, int startingRow, int numberOfRows);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestRun_Retrieve", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestRun_RetrieveRes" +
            "ponse")]
        System.IAsyncResult BeginTestRun_Retrieve(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSort remoteSort, int startingRow, int numberOfRows, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestRun[] EndTestRun_Retrieve(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestRun_RetrieveMan" +
            "ual", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestRun_RetrieveMan" +
            "ualResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestRun_RetrieveMan" +
            "ualServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteManualTestRun[] TestRun_RetrieveManual(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSort remoteSort, int startingRow, int numberOfRows);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestRun_RetrieveMan" +
            "ual", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestRun_RetrieveMan" +
            "ualResponse")]
        System.IAsyncResult BeginTestRun_RetrieveManual(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSort remoteSort, int startingRow, int numberOfRows, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteManualTestRun[] EndTestRun_RetrieveManual(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestRun_RetrieveAut" +
            "omated", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestRun_RetrieveAut" +
            "omatedResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestRun_RetrieveAut" +
            "omatedServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAutomatedTestRun[] TestRun_RetrieveAutomated(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSort remoteSort, int startingRow, int numberOfRows);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestRun_RetrieveAut" +
            "omated", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestRun_RetrieveAut" +
            "omatedResponse")]
        System.IAsyncResult BeginTestRun_RetrieveAutomated(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSort remoteSort, int startingRow, int numberOfRows, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAutomatedTestRun[] EndTestRun_RetrieveAutomated(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestRun_RetrieveByI" +
            "d", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestRun_RetrieveByI" +
            "dResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestRun_RetrieveByI" +
            "dServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestRun TestRun_RetrieveById(int testRunId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestRun_RetrieveByI" +
            "d", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestRun_RetrieveByI" +
            "dResponse")]
        System.IAsyncResult BeginTestRun_RetrieveById(int testRunId, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestRun EndTestRun_RetrieveById(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestRun_RetrieveByT" +
            "estCaseId", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestRun_RetrieveByT" +
            "estCaseIdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestRun_RetrieveByT" +
            "estCaseIdServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestRun[] TestRun_RetrieveByTestCaseId(int testCaseId, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSort remoteSort, int startingRow, int numberOfRows);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestRun_RetrieveByT" +
            "estCaseId", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestRun_RetrieveByT" +
            "estCaseIdResponse")]
        System.IAsyncResult BeginTestRun_RetrieveByTestCaseId(int testCaseId, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSort remoteSort, int startingRow, int numberOfRows, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestRun[] EndTestRun_RetrieveByTestCaseId(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestRun_RetrieveAut" +
            "omatedById", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestRun_RetrieveAut" +
            "omatedByIdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestRun_RetrieveAut" +
            "omatedByIdServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAutomatedTestRun TestRun_RetrieveAutomatedById(int testRunId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestRun_RetrieveAut" +
            "omatedById", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestRun_RetrieveAut" +
            "omatedByIdResponse")]
        System.IAsyncResult BeginTestRun_RetrieveAutomatedById(int testRunId, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAutomatedTestRun EndTestRun_RetrieveAutomatedById(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestRun_RetrieveMan" +
            "ualById", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestRun_RetrieveMan" +
            "ualByIdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestRun_RetrieveMan" +
            "ualByIdServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteManualTestRun TestRun_RetrieveManualById(int testRunId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestRun_RetrieveMan" +
            "ualById", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestRun_RetrieveMan" +
            "ualByIdResponse")]
        System.IAsyncResult BeginTestRun_RetrieveManualById(int testRunId, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteManualTestRun EndTestRun_RetrieveManualById(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestRun_Save", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestRun_SaveRespons" +
            "e")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ValidationFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestRun_SaveValidat" +
            "ionFaultMessageFault", Name="ValidationFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestRun_SaveService" +
            "FaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteManualTestRun[] TestRun_Save(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteManualTestRun[] remoteTestRuns, System.Nullable<System.DateTime> endDate);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestRun_Save", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestRun_SaveRespons" +
            "e")]
        System.IAsyncResult BeginTestRun_Save(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteManualTestRun[] remoteTestRuns, System.Nullable<System.DateTime> endDate, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteManualTestRun[] EndTestRun_Save(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestSet_AddTestMapp" +
            "ing", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestSet_AddTestMapp" +
            "ingResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestSet_AddTestMapp" +
            "ingServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestSetTestCaseMapping[] TestSet_AddTestMapping(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestSetTestCaseMapping remoteTestSetTestCaseMapping, System.Nullable<int> existingTestSetTestCaseId, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestSetTestCaseParameter[] parameters);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestSet_AddTestMapp" +
            "ing", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestSet_AddTestMapp" +
            "ingResponse")]
        System.IAsyncResult BeginTestSet_AddTestMapping(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestSetTestCaseMapping remoteTestSetTestCaseMapping, System.Nullable<int> existingTestSetTestCaseId, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestSetTestCaseParameter[] parameters, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestSetTestCaseMapping[] EndTestSet_AddTestMapping(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestSet_RemoveTestM" +
            "apping", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestSet_RemoveTestM" +
            "appingResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestSet_RemoveTestM" +
            "appingServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        void TestSet_RemoveTestMapping(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestSetTestCaseMapping remoteTestSetTestCaseMapping);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestSet_RemoveTestM" +
            "apping", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestSet_RemoveTestM" +
            "appingResponse")]
        System.IAsyncResult BeginTestSet_RemoveTestMapping(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestSetTestCaseMapping remoteTestSetTestCaseMapping, System.AsyncCallback callback, object asyncState);
        
        void EndTestSet_RemoveTestMapping(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestSet_RetrieveTes" +
            "tCaseMapping", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestSet_RetrieveTes" +
            "tCaseMappingResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestSet_RetrieveTes" +
            "tCaseMappingServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestSetTestCaseMapping[] TestSet_RetrieveTestCaseMapping(int testSetId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestSet_RetrieveTes" +
            "tCaseMapping", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestSet_RetrieveTes" +
            "tCaseMappingResponse")]
        System.IAsyncResult BeginTestSet_RetrieveTestCaseMapping(int testSetId, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestSetTestCaseMapping[] EndTestSet_RetrieveTestCaseMapping(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestSet_Create", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestSet_CreateRespo" +
            "nse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ValidationFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestSet_CreateValid" +
            "ationFaultMessageFault", Name="ValidationFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestSet_CreateServi" +
            "ceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestSet TestSet_Create(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestSet remoteTestSet);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestSet_Create", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestSet_CreateRespo" +
            "nse")]
        System.IAsyncResult BeginTestSet_Create(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestSet remoteTestSet, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestSet EndTestSet_Create(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestSet_CreateFolde" +
            "r", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestSet_CreateFolde" +
            "rResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestSet_CreateFolde" +
            "rServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ValidationFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestSet_CreateFolde" +
            "rValidationFaultMessageFault", Name="ValidationFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestSetFolder TestSet_CreateFolder(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestSetFolder remoteTestSetFolder);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestSet_CreateFolde" +
            "r", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestSet_CreateFolde" +
            "rResponse")]
        System.IAsyncResult BeginTestSet_CreateFolder(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestSetFolder remoteTestSetFolder, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestSetFolder EndTestSet_CreateFolder(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestSet_Count", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestSet_CountRespon" +
            "se")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestSet_CountServic" +
            "eFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        long TestSet_Count(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters, System.Nullable<int> releaseId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestSet_Count", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestSet_CountRespon" +
            "se")]
        System.IAsyncResult BeginTestSet_Count(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters, System.Nullable<int> releaseId, System.AsyncCallback callback, object asyncState);
        
        long EndTestSet_Count(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestSet_CountForFol" +
            "der", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestSet_CountForFol" +
            "derResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestSet_CountForFol" +
            "derServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        long TestSet_CountForFolder(System.Nullable<int> testSetFolderId, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters, System.Nullable<int> releaseId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestSet_CountForFol" +
            "der", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestSet_CountForFol" +
            "derResponse")]
        System.IAsyncResult BeginTestSet_CountForFolder(System.Nullable<int> testSetFolderId, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters, System.Nullable<int> releaseId, System.AsyncCallback callback, object asyncState);
        
        long EndTestSet_CountForFolder(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestSet_Retrieve", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestSet_RetrieveRes" +
            "ponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestSet_RetrieveSer" +
            "viceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestSet[] TestSet_Retrieve(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSort remoteSort, int startingRow, int numberOfRows, System.Nullable<int> releaseId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestSet_Retrieve", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestSet_RetrieveRes" +
            "ponse")]
        System.IAsyncResult BeginTestSet_Retrieve(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSort remoteSort, int startingRow, int numberOfRows, System.Nullable<int> releaseId, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestSet[] EndTestSet_Retrieve(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestSet_RetrieveByF" +
            "older", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestSet_RetrieveByF" +
            "olderResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestSet_RetrieveByF" +
            "olderServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestSet[] TestSet_RetrieveByFolder(System.Nullable<int> testSetFolderId, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSort remoteSort, int startingRow, int numberOfRows, System.Nullable<int> releaseId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestSet_RetrieveByF" +
            "older", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestSet_RetrieveByF" +
            "olderResponse")]
        System.IAsyncResult BeginTestSet_RetrieveByFolder(System.Nullable<int> testSetFolderId, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSort remoteSort, int startingRow, int numberOfRows, System.Nullable<int> releaseId, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestSet[] EndTestSet_RetrieveByFolder(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestSet_Update", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestSet_UpdateRespo" +
            "nse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ValidationFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestSet_UpdateValid" +
            "ationFaultMessageFault", Name="ValidationFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestSet_UpdateServi" +
            "ceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        void TestSet_Update(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestSet remoteTestSet);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestSet_Update", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestSet_UpdateRespo" +
            "nse")]
        System.IAsyncResult BeginTestSet_Update(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestSet remoteTestSet, System.AsyncCallback callback, object asyncState);
        
        void EndTestSet_Update(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestSet_Delete", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestSet_DeleteRespo" +
            "nse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestSet_DeleteServi" +
            "ceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        void TestSet_Delete(int testSetId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestSet_Delete", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestSet_DeleteRespo" +
            "nse")]
        System.IAsyncResult BeginTestSet_Delete(int testSetId, System.AsyncCallback callback, object asyncState);
        
        void EndTestSet_Delete(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestSet_UpdateFolde" +
            "r", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestSet_UpdateFolde" +
            "rResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestSet_UpdateFolde" +
            "rServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ValidationFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestSet_UpdateFolde" +
            "rValidationFaultMessageFault", Name="ValidationFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        void TestSet_UpdateFolder(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestSetFolder remoteTestSetFolder);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestSet_UpdateFolde" +
            "r", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestSet_UpdateFolde" +
            "rResponse")]
        System.IAsyncResult BeginTestSet_UpdateFolder(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestSetFolder remoteTestSetFolder, System.AsyncCallback callback, object asyncState);
        
        void EndTestSet_UpdateFolder(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestSet_DeleteFolde" +
            "r", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestSet_DeleteFolde" +
            "rResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestSet_DeleteFolde" +
            "rServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        void TestSet_DeleteFolder(int testSetFolderId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestSet_DeleteFolde" +
            "r", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestSet_DeleteFolde" +
            "rResponse")]
        System.IAsyncResult BeginTestSet_DeleteFolder(int testSetFolderId, System.AsyncCallback callback, object asyncState);
        
        void EndTestSet_DeleteFolder(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestSet_RetrieveByI" +
            "d", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestSet_RetrieveByI" +
            "dResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestSet_RetrieveByI" +
            "dServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestSet TestSet_RetrieveById(int testSetId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestSet_RetrieveByI" +
            "d", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestSet_RetrieveByI" +
            "dResponse")]
        System.IAsyncResult BeginTestSet_RetrieveById(int testSetId, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestSet EndTestSet_RetrieveById(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestSet_RetrieveFol" +
            "derById", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestSet_RetrieveFol" +
            "derByIdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestSet_RetrieveFol" +
            "derByIdServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestSetFolder TestSet_RetrieveFolderById(int testSetFolderId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestSet_RetrieveFol" +
            "derById", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestSet_RetrieveFol" +
            "derByIdResponse")]
        System.IAsyncResult BeginTestSet_RetrieveFolderById(int testSetFolderId, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestSetFolder EndTestSet_RetrieveFolderById(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestSet_RetrieveFol" +
            "ders", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestSet_RetrieveFol" +
            "dersResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestSet_RetrieveFol" +
            "dersServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestSetFolder[] TestSet_RetrieveFolders();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestSet_RetrieveFol" +
            "ders", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestSet_RetrieveFol" +
            "dersResponse")]
        System.IAsyncResult BeginTestSet_RetrieveFolders(System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestSetFolder[] EndTestSet_RetrieveFolders(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestSet_RetrieveFol" +
            "dersByParent", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestSet_RetrieveFol" +
            "dersByParentResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestSet_RetrieveFol" +
            "dersByParentServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestSetFolder[] TestSet_RetrieveFoldersByParent(System.Nullable<int> parentTestSetFolderId, System.Nullable<int> releaseId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestSet_RetrieveFol" +
            "dersByParent", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestSet_RetrieveFol" +
            "dersByParentResponse")]
        System.IAsyncResult BeginTestSet_RetrieveFoldersByParent(System.Nullable<int> parentTestSetFolderId, System.Nullable<int> releaseId, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestSetFolder[] EndTestSet_RetrieveFoldersByParent(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestSet_RetrieveFor" +
            "Owner", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestSet_RetrieveFor" +
            "OwnerResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestSet_RetrieveFor" +
            "OwnerServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestSet[] TestSet_RetrieveForOwner();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestSet_RetrieveFor" +
            "Owner", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestSet_RetrieveFor" +
            "OwnerResponse")]
        System.IAsyncResult BeginTestSet_RetrieveForOwner(System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestSet[] EndTestSet_RetrieveForOwner(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestSet_Move", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestSet_MoveRespons" +
            "e")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestSet_MoveService" +
            "FaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        void TestSet_Move(int testSetId, System.Nullable<int> destinationTestSetId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestSet_Move", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestSet_MoveRespons" +
            "e")]
        System.IAsyncResult BeginTestSet_Move(int testSetId, System.Nullable<int> destinationTestSetId, System.AsyncCallback callback, object asyncState);
        
        void EndTestSet_Move(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestSet_RetrieveCom" +
            "ments", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestSet_RetrieveCom" +
            "mentsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestSet_RetrieveCom" +
            "mentsServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComment[] TestSet_RetrieveComments(int TestSetId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestSet_RetrieveCom" +
            "ments", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestSet_RetrieveCom" +
            "mentsResponse")]
        System.IAsyncResult BeginTestSet_RetrieveComments(int TestSetId, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComment[] EndTestSet_RetrieveComments(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestSet_CreateComme" +
            "nt", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestSet_CreateComme" +
            "ntResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestSet_CreateComme" +
            "ntServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComment TestSet_CreateComment(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComment remoteComment);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestSet_CreateComme" +
            "nt", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestSet_CreateComme" +
            "ntResponse")]
        System.IAsyncResult BeginTestSet_CreateComment(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComment remoteComment, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComment EndTestSet_CreateComment(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestSet_RetrievePar" +
            "ameters", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestSet_RetrievePar" +
            "ametersResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestSet_RetrievePar" +
            "ametersServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestSetParameter[] TestSet_RetrieveParameters(int testSetId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestSet_RetrievePar" +
            "ameters", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestSet_RetrievePar" +
            "ametersResponse")]
        System.IAsyncResult BeginTestSet_RetrieveParameters(int testSetId, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestSetParameter[] EndTestSet_RetrieveParameters(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestSet_RetrieveTes" +
            "tCaseParameters", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestSet_RetrieveTes" +
            "tCaseParametersResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestSet_RetrieveTes" +
            "tCaseParametersServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestSetTestCaseParameter[] TestSet_RetrieveTestCaseParameters(int testSetId, int testSetTestCaseId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestSet_RetrieveTes" +
            "tCaseParameters", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestSet_RetrieveTes" +
            "tCaseParametersResponse")]
        System.IAsyncResult BeginTestSet_RetrieveTestCaseParameters(int testSetId, int testSetTestCaseId, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestSetTestCaseParameter[] EndTestSet_RetrieveTestCaseParameters(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestConfiguration_R" +
            "etrieveForTestSet", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestConfiguration_R" +
            "etrieveForTestSetResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestConfiguration_R" +
            "etrieveForTestSetServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestConfigurationSet TestConfiguration_RetrieveForTestSet(int testSetId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestConfiguration_R" +
            "etrieveForTestSet", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestConfiguration_R" +
            "etrieveForTestSetResponse")]
        System.IAsyncResult BeginTestConfiguration_RetrieveForTestSet(int testSetId, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestConfigurationSet EndTestConfiguration_RetrieveForTestSet(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestConfiguration_R" +
            "etrieveSetById", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestConfiguration_R" +
            "etrieveSetByIdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestConfiguration_R" +
            "etrieveSetByIdServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestConfigurationSet TestConfiguration_RetrieveSetById(int testConfigurationSetId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestConfiguration_R" +
            "etrieveSetById", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestConfiguration_R" +
            "etrieveSetByIdResponse")]
        System.IAsyncResult BeginTestConfiguration_RetrieveSetById(int testConfigurationSetId, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestConfigurationSet EndTestConfiguration_RetrieveSetById(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestConfiguration_R" +
            "etrieveSets", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestConfiguration_R" +
            "etrieveSetsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestConfiguration_R" +
            "etrieveSetsServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestConfigurationSet[] TestConfiguration_RetrieveSets();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestConfiguration_R" +
            "etrieveSets", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/TestConfiguration_R" +
            "etrieveSetsResponse")]
        System.IAsyncResult BeginTestConfiguration_RetrieveSets(System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestConfigurationSet[] EndTestConfiguration_RetrieveSets(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/User_Create", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/User_CreateResponse" +
            "")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/User_CreateServiceF" +
            "aultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteUser User_Create(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteUser remoteUser, string password, string passwordQuestion, string passwordAnswer, System.Nullable<int> projectRoleId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/User_Create", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/User_CreateResponse" +
            "")]
        System.IAsyncResult BeginUser_Create(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteUser remoteUser, string password, string passwordQuestion, string passwordAnswer, System.Nullable<int> projectRoleId, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteUser EndUser_Create(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/User_RetrieveById", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/User_RetrieveByIdRe" +
            "sponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/User_RetrieveByIdSe" +
            "rviceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteUser User_RetrieveById(int userId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/User_RetrieveById", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/User_RetrieveByIdRe" +
            "sponse")]
        System.IAsyncResult BeginUser_RetrieveById(int userId, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteUser EndUser_RetrieveById(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/User_RetrieveByUser" +
            "Name", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/User_RetrieveByUser" +
            "NameResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/User_RetrieveByUser" +
            "NameServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteUser User_RetrieveByUserName(string userName, bool includeInactive);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/User_RetrieveByUser" +
            "Name", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/User_RetrieveByUser" +
            "NameResponse")]
        System.IAsyncResult BeginUser_RetrieveByUserName(string userName, bool includeInactive, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteUser EndUser_RetrieveByUserName(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/User_Delete", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/User_DeleteResponse" +
            "")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/User_DeleteServiceF" +
            "aultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        void User_Delete(int userId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/User_Delete", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/User_DeleteResponse" +
            "")]
        System.IAsyncResult BeginUser_Delete(int userId, System.AsyncCallback callback, object asyncState);
        
        void EndUser_Delete(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/User_Update", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/User_UpdateResponse" +
            "")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/User_UpdateServiceF" +
            "aultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        void User_Update(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteUser remoteUser);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/User_Update", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/User_UpdateResponse" +
            "")]
        System.IAsyncResult BeginUser_Update(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteUser remoteUser, System.AsyncCallback callback, object asyncState);
        
        void EndUser_Update(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/User_Retrieve", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/User_RetrieveRespon" +
            "se")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/User_RetrieveServic" +
            "eFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteUser[] User_Retrieve();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/User_Retrieve", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/User_RetrieveRespon" +
            "se")]
        System.IAsyncResult BeginUser_Retrieve(System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteUser[] EndUser_Retrieve(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/User_RetrieveContac" +
            "ts", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/User_RetrieveContac" +
            "tsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/User_RetrieveContac" +
            "tsServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteUser[] User_RetrieveContacts();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/User_RetrieveContac" +
            "ts", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/User_RetrieveContac" +
            "tsResponse")]
        System.IAsyncResult BeginUser_RetrieveContacts(System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteUser[] EndUser_RetrieveContacts(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/User_AddContact", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/User_AddContactResp" +
            "onse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/User_AddContactServ" +
            "iceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        void User_AddContact(int userId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/User_AddContact", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/User_AddContactResp" +
            "onse")]
        System.IAsyncResult BeginUser_AddContact(int userId, System.AsyncCallback callback, object asyncState);
        
        void EndUser_AddContact(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/User_RemoveContact", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/User_RemoveContactR" +
            "esponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/User_RemoveContactS" +
            "erviceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        void User_RemoveContact(int userId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/User_RemoveContact", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/User_RemoveContactR" +
            "esponse")]
        System.IAsyncResult BeginUser_RemoveContact(int userId, System.AsyncCallback callback, object asyncState);
        
        void EndUser_RemoveContact(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/AutomationHost_Retr" +
            "ieve", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/AutomationHost_Retr" +
            "ieveResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/AutomationHost_Retr" +
            "ieveServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAutomationHost[] AutomationHost_Retrieve(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSort remoteSort, int startingRow, int numberOfRows);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/AutomationHost_Retr" +
            "ieve", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/AutomationHost_Retr" +
            "ieveResponse")]
        System.IAsyncResult BeginAutomationHost_Retrieve(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSort remoteSort, int startingRow, int numberOfRows, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAutomationHost[] EndAutomationHost_Retrieve(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/AutomationHost_Retr" +
            "ieveById", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/AutomationHost_Retr" +
            "ieveByIdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/AutomationHost_Retr" +
            "ieveByIdServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAutomationHost AutomationHost_RetrieveById(int automationHostId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/AutomationHost_Retr" +
            "ieveById", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/AutomationHost_Retr" +
            "ieveByIdResponse")]
        System.IAsyncResult BeginAutomationHost_RetrieveById(int automationHostId, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAutomationHost EndAutomationHost_RetrieveById(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/AutomationHost_Retr" +
            "ieveByToken", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/AutomationHost_Retr" +
            "ieveByTokenResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/AutomationHost_Retr" +
            "ieveByTokenServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAutomationHost AutomationHost_RetrieveByToken(string token);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/AutomationHost_Retr" +
            "ieveByToken", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/AutomationHost_Retr" +
            "ieveByTokenResponse")]
        System.IAsyncResult BeginAutomationHost_RetrieveByToken(string token, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAutomationHost EndAutomationHost_RetrieveByToken(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/AutomationHost_Crea" +
            "te", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/AutomationHost_Crea" +
            "teResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ValidationFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/AutomationHost_Crea" +
            "teValidationFaultMessageFault", Name="ValidationFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/AutomationHost_Crea" +
            "teServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAutomationHost AutomationHost_Create(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAutomationHost remoteAutomationHost);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/AutomationHost_Crea" +
            "te", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/AutomationHost_Crea" +
            "teResponse")]
        System.IAsyncResult BeginAutomationHost_Create(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAutomationHost remoteAutomationHost, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAutomationHost EndAutomationHost_Create(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/AutomationHost_Upda" +
            "te", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/AutomationHost_Upda" +
            "teResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ValidationFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/AutomationHost_Upda" +
            "teValidationFaultMessageFault", Name="ValidationFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/AutomationHost_Upda" +
            "teServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        void AutomationHost_Update(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAutomationHost remoteAutomationHost);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/AutomationHost_Upda" +
            "te", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/AutomationHost_Upda" +
            "teResponse")]
        System.IAsyncResult BeginAutomationHost_Update(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAutomationHost remoteAutomationHost, System.AsyncCallback callback, object asyncState);
        
        void EndAutomationHost_Update(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/AutomationHost_Dele" +
            "te", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/AutomationHost_Dele" +
            "teResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/AutomationHost_Dele" +
            "teServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        void AutomationHost_Delete(int automationHostId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/AutomationHost_Dele" +
            "te", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/AutomationHost_Dele" +
            "teResponse")]
        System.IAsyncResult BeginAutomationHost_Delete(int automationHostId, System.AsyncCallback callback, object asyncState);
        
        void EndAutomationHost_Delete(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/AutomationEngine_Re" +
            "trieveByToken", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/AutomationEngine_Re" +
            "trieveByTokenResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/AutomationEngine_Re" +
            "trieveByTokenServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAutomationEngine AutomationEngine_RetrieveByToken(string token);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/AutomationEngine_Re" +
            "trieveByToken", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/AutomationEngine_Re" +
            "trieveByTokenResponse")]
        System.IAsyncResult BeginAutomationEngine_RetrieveByToken(string token, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAutomationEngine EndAutomationEngine_RetrieveByToken(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/AutomationEngine_Re" +
            "trieve", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/AutomationEngine_Re" +
            "trieveResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/AutomationEngine_Re" +
            "trieveServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAutomationEngine[] AutomationEngine_Retrieve(bool activeOnly);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/AutomationEngine_Re" +
            "trieve", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/AutomationEngine_Re" +
            "trieveResponse")]
        System.IAsyncResult BeginAutomationEngine_Retrieve(bool activeOnly, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAutomationEngine[] EndAutomationEngine_Retrieve(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/AutomationEngine_Cr" +
            "eate", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/AutomationEngine_Cr" +
            "eateResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/AutomationEngine_Cr" +
            "eateServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAutomationEngine AutomationEngine_Create(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAutomationEngine remoteEngine);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/AutomationEngine_Cr" +
            "eate", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/AutomationEngine_Cr" +
            "eateResponse")]
        System.IAsyncResult BeginAutomationEngine_Create(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAutomationEngine remoteEngine, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAutomationEngine EndAutomationEngine_Create(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/AutomationEngine_Re" +
            "trieveById", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/AutomationEngine_Re" +
            "trieveByIdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/AutomationEngine_Re" +
            "trieveByIdServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAutomationEngine AutomationEngine_RetrieveById(int automationEngineId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/AutomationEngine_Re" +
            "trieveById", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/AutomationEngine_Re" +
            "trieveByIdResponse")]
        System.IAsyncResult BeginAutomationEngine_RetrieveById(int automationEngineId, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAutomationEngine EndAutomationEngine_RetrieveById(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/AutomationEngine_Up" +
            "date", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/AutomationEngine_Up" +
            "dateResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/AutomationEngine_Up" +
            "dateServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        void AutomationEngine_Update(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAutomationEngine remoteEngine);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/AutomationEngine_Up" +
            "date", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/AutomationEngine_Up" +
            "dateResponse")]
        System.IAsyncResult BeginAutomationEngine_Update(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAutomationEngine remoteEngine, System.AsyncCallback callback, object asyncState);
        
        void EndAutomationEngine_Update(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Component_Retrieve", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Component_RetrieveR" +
            "esponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Component_RetrieveS" +
            "erviceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComponent[] Component_Retrieve(bool activeOnly, bool includeDeleted);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Component_Retrieve", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Component_RetrieveR" +
            "esponse")]
        System.IAsyncResult BeginComponent_Retrieve(bool activeOnly, bool includeDeleted, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComponent[] EndComponent_Retrieve(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/DataSyncSystem_Retr" +
            "ieve", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/DataSyncSystem_Retr" +
            "ieveResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/DataSyncSystem_Retr" +
            "ieveServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDataSyncSystem[] DataSyncSystem_Retrieve();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/DataSyncSystem_Retr" +
            "ieve", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/DataSyncSystem_Retr" +
            "ieveResponse")]
        System.IAsyncResult BeginDataSyncSystem_Retrieve(System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDataSyncSystem[] EndDataSyncSystem_Retrieve(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/DataSyncSystem_Retr" +
            "ieveById", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/DataSyncSystem_Retr" +
            "ieveByIdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/DataSyncSystem_Retr" +
            "ieveByIdServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDataSyncSystem DataSyncSystem_RetrieveById(int dataSyncSystemId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/DataSyncSystem_Retr" +
            "ieveById", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/DataSyncSystem_Retr" +
            "ieveByIdResponse")]
        System.IAsyncResult BeginDataSyncSystem_RetrieveById(int dataSyncSystemId, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDataSyncSystem EndDataSyncSystem_RetrieveById(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/DataSyncSystem_Crea" +
            "te", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/DataSyncSystem_Crea" +
            "teResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/DataSyncSystem_Crea" +
            "teServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDataSyncSystem DataSyncSystem_Create(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDataSyncSystem remoteDataSyncSystem);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/DataSyncSystem_Crea" +
            "te", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/DataSyncSystem_Crea" +
            "teResponse")]
        System.IAsyncResult BeginDataSyncSystem_Create(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDataSyncSystem remoteDataSyncSystem, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDataSyncSystem EndDataSyncSystem_Create(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/DataSyncSystem_Upda" +
            "te", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/DataSyncSystem_Upda" +
            "teResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/DataSyncSystem_Upda" +
            "teServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        void DataSyncSystem_Update(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDataSyncSystem remoteDataSyncSystem);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/DataSyncSystem_Upda" +
            "te", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/DataSyncSystem_Upda" +
            "teResponse")]
        System.IAsyncResult BeginDataSyncSystem_Update(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDataSyncSystem remoteDataSyncSystem, System.AsyncCallback callback, object asyncState);
        
        void EndDataSyncSystem_Update(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/DataSyncSystem_Save" +
            "RunFailure", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/DataSyncSystem_Save" +
            "RunFailureResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/DataSyncSystem_Save" +
            "RunFailureServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        void DataSyncSystem_SaveRunFailure(int dataSyncSystemId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/DataSyncSystem_Save" +
            "RunFailure", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/DataSyncSystem_Save" +
            "RunFailureResponse")]
        System.IAsyncResult BeginDataSyncSystem_SaveRunFailure(int dataSyncSystemId, System.AsyncCallback callback, object asyncState);
        
        void EndDataSyncSystem_SaveRunFailure(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/DataSyncSystem_Save" +
            "RunSuccess", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/DataSyncSystem_Save" +
            "RunSuccessResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/DataSyncSystem_Save" +
            "RunSuccessServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        void DataSyncSystem_SaveRunSuccess(int dataSyncSystemId, System.DateTime lastRunDate);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/DataSyncSystem_Save" +
            "RunSuccess", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/DataSyncSystem_Save" +
            "RunSuccessResponse")]
        System.IAsyncResult BeginDataSyncSystem_SaveRunSuccess(int dataSyncSystemId, System.DateTime lastRunDate, System.AsyncCallback callback, object asyncState);
        
        void EndDataSyncSystem_SaveRunSuccess(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/DataSyncSystem_Save" +
            "RunWarning", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/DataSyncSystem_Save" +
            "RunWarningResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/DataSyncSystem_Save" +
            "RunWarningServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        void DataSyncSystem_SaveRunWarning(int dataSyncSystemId, System.DateTime lastRunDate);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/DataSyncSystem_Save" +
            "RunWarning", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/DataSyncSystem_Save" +
            "RunWarningResponse")]
        System.IAsyncResult BeginDataSyncSystem_SaveRunWarning(int dataSyncSystemId, System.DateTime lastRunDate, System.AsyncCallback callback, object asyncState);
        
        void EndDataSyncSystem_SaveRunWarning(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/DataSyncSystem_Writ" +
            "eEvent", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/DataSyncSystem_Writ" +
            "eEventResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/DataSyncSystem_Writ" +
            "eEventServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        void DataSyncSystem_WriteEvent(string message, string details, int eventLogEntryType);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/DataSyncSystem_Writ" +
            "eEvent", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/DataSyncSystem_Writ" +
            "eEventResponse")]
        System.IAsyncResult BeginDataSyncSystem_WriteEvent(string message, string details, int eventLogEntryType, System.AsyncCallback callback, object asyncState);
        
        void EndDataSyncSystem_WriteEvent(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/CustomProperty_Retr" +
            "ieveForArtifactType", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/CustomProperty_Retr" +
            "ieveForArtifactTypeResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/CustomProperty_Retr" +
            "ieveForArtifactTypeServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteCustomProperty[] CustomProperty_RetrieveForArtifactType(int artifactTypeId, bool includeDeleted);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/CustomProperty_Retr" +
            "ieveForArtifactType", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/CustomProperty_Retr" +
            "ieveForArtifactTypeResponse")]
        System.IAsyncResult BeginCustomProperty_RetrieveForArtifactType(int artifactTypeId, bool includeDeleted, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteCustomProperty[] EndCustomProperty_RetrieveForArtifactType(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/CustomProperty_AddC" +
            "ustomList", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/CustomProperty_AddC" +
            "ustomListResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/CustomProperty_AddC" +
            "ustomListServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteCustomList CustomProperty_AddCustomList(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteCustomList remoteCustomList);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/CustomProperty_AddC" +
            "ustomList", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/CustomProperty_AddC" +
            "ustomListResponse")]
        System.IAsyncResult BeginCustomProperty_AddCustomList(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteCustomList remoteCustomList, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteCustomList EndCustomProperty_AddCustomList(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/CustomProperty_AddC" +
            "ustomListValue", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/CustomProperty_AddC" +
            "ustomListValueResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/CustomProperty_AddC" +
            "ustomListValueServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteCustomListValue CustomProperty_AddCustomListValue(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteCustomListValue remoteCustomListValue);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/CustomProperty_AddC" +
            "ustomListValue", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/CustomProperty_AddC" +
            "ustomListValueResponse")]
        System.IAsyncResult BeginCustomProperty_AddCustomListValue(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteCustomListValue remoteCustomListValue, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteCustomListValue EndCustomProperty_AddCustomListValue(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/CustomProperty_AddD" +
            "efinition", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/CustomProperty_AddD" +
            "efinitionResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/CustomProperty_AddD" +
            "efinitionServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteCustomProperty CustomProperty_AddDefinition(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteCustomProperty remoteCustomProperty, System.Nullable<int> customListId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/CustomProperty_AddD" +
            "efinition", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/CustomProperty_AddD" +
            "efinitionResponse")]
        System.IAsyncResult BeginCustomProperty_AddDefinition(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteCustomProperty remoteCustomProperty, System.Nullable<int> customListId, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteCustomProperty EndCustomProperty_AddDefinition(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/CustomProperty_Upda" +
            "teDefinition", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/CustomProperty_Upda" +
            "teDefinitionResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/CustomProperty_Upda" +
            "teDefinitionServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        void CustomProperty_UpdateDefinition(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteCustomProperty remoteCustomProperty);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/CustomProperty_Upda" +
            "teDefinition", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/CustomProperty_Upda" +
            "teDefinitionResponse")]
        System.IAsyncResult BeginCustomProperty_UpdateDefinition(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteCustomProperty remoteCustomProperty, System.AsyncCallback callback, object asyncState);
        
        void EndCustomProperty_UpdateDefinition(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/CustomProperty_Dele" +
            "teDefinition", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/CustomProperty_Dele" +
            "teDefinitionResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/CustomProperty_Dele" +
            "teDefinitionServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        void CustomProperty_DeleteDefinition(int customPropertyId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/CustomProperty_Dele" +
            "teDefinition", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/CustomProperty_Dele" +
            "teDefinitionResponse")]
        System.IAsyncResult BeginCustomProperty_DeleteDefinition(int customPropertyId, System.AsyncCallback callback, object asyncState);
        
        void EndCustomProperty_DeleteDefinition(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/CustomProperty_Retr" +
            "ieveCustomListById", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/CustomProperty_Retr" +
            "ieveCustomListByIdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/CustomProperty_Retr" +
            "ieveCustomListByIdServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteCustomList CustomProperty_RetrieveCustomListById(int customListId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/CustomProperty_Retr" +
            "ieveCustomListById", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/CustomProperty_Retr" +
            "ieveCustomListByIdResponse")]
        System.IAsyncResult BeginCustomProperty_RetrieveCustomListById(int customListId, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteCustomList EndCustomProperty_RetrieveCustomListById(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/CustomProperty_Retr" +
            "ieveCustomLists", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/CustomProperty_Retr" +
            "ieveCustomListsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/CustomProperty_Retr" +
            "ieveCustomListsServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteCustomList[] CustomProperty_RetrieveCustomLists();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/CustomProperty_Retr" +
            "ieveCustomLists", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/CustomProperty_Retr" +
            "ieveCustomListsResponse")]
        System.IAsyncResult BeginCustomProperty_RetrieveCustomLists(System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteCustomList[] EndCustomProperty_RetrieveCustomLists(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/CustomProperty_Upda" +
            "teCustomList", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/CustomProperty_Upda" +
            "teCustomListResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/CustomProperty_Upda" +
            "teCustomListServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        void CustomProperty_UpdateCustomList(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteCustomList remoteCustomList);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/CustomProperty_Upda" +
            "teCustomList", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/CustomProperty_Upda" +
            "teCustomListResponse")]
        System.IAsyncResult BeginCustomProperty_UpdateCustomList(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteCustomList remoteCustomList, System.AsyncCallback callback, object asyncState);
        
        void EndCustomProperty_UpdateCustomList(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/DataMapping_AddArti" +
            "factMappings", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/DataMapping_AddArti" +
            "factMappingsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/DataMapping_AddArti" +
            "factMappingsServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        void DataMapping_AddArtifactMappings(int dataSyncSystemId, int artifactTypeId, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDataMapping[] remoteDataMappings);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/DataMapping_AddArti" +
            "factMappings", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/DataMapping_AddArti" +
            "factMappingsResponse")]
        System.IAsyncResult BeginDataMapping_AddArtifactMappings(int dataSyncSystemId, int artifactTypeId, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDataMapping[] remoteDataMappings, System.AsyncCallback callback, object asyncState);
        
        void EndDataMapping_AddArtifactMappings(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/DataMapping_AddUser" +
            "Mappings", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/DataMapping_AddUser" +
            "MappingsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/DataMapping_AddUser" +
            "MappingsServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        void DataMapping_AddUserMappings(int dataSyncSystemId, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDataMapping[] remoteDataMappings);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/DataMapping_AddUser" +
            "Mappings", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/DataMapping_AddUser" +
            "MappingsResponse")]
        System.IAsyncResult BeginDataMapping_AddUserMappings(int dataSyncSystemId, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDataMapping[] remoteDataMappings, System.AsyncCallback callback, object asyncState);
        
        void EndDataMapping_AddUserMappings(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/DataMapping_RemoveA" +
            "rtifactMappings", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/DataMapping_RemoveA" +
            "rtifactMappingsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/DataMapping_RemoveA" +
            "rtifactMappingsServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        void DataMapping_RemoveArtifactMappings(int dataSyncSystemId, int artifactTypeId, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDataMapping[] remoteDataMappings);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/DataMapping_RemoveA" +
            "rtifactMappings", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/DataMapping_RemoveA" +
            "rtifactMappingsResponse")]
        System.IAsyncResult BeginDataMapping_RemoveArtifactMappings(int dataSyncSystemId, int artifactTypeId, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDataMapping[] remoteDataMappings, System.AsyncCallback callback, object asyncState);
        
        void EndDataMapping_RemoveArtifactMappings(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/DataMapping_Retriev" +
            "eArtifactMappings", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/DataMapping_Retriev" +
            "eArtifactMappingsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/DataMapping_Retriev" +
            "eArtifactMappingsServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDataMapping[] DataMapping_RetrieveArtifactMappings(int dataSyncSystemId, int artifactTypeId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/DataMapping_Retriev" +
            "eArtifactMappings", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/DataMapping_Retriev" +
            "eArtifactMappingsResponse")]
        System.IAsyncResult BeginDataMapping_RetrieveArtifactMappings(int dataSyncSystemId, int artifactTypeId, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDataMapping[] EndDataMapping_RetrieveArtifactMappings(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/DataMapping_Retriev" +
            "eCustomPropertyMapping", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/DataMapping_Retriev" +
            "eCustomPropertyMappingResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/DataMapping_Retriev" +
            "eCustomPropertyMappingServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDataMapping DataMapping_RetrieveCustomPropertyMapping(int dataSyncSystemId, int artifactTypeId, int customPropertyId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/DataMapping_Retriev" +
            "eCustomPropertyMapping", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/DataMapping_Retriev" +
            "eCustomPropertyMappingResponse")]
        System.IAsyncResult BeginDataMapping_RetrieveCustomPropertyMapping(int dataSyncSystemId, int artifactTypeId, int customPropertyId, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDataMapping EndDataMapping_RetrieveCustomPropertyMapping(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/DataMapping_Retriev" +
            "eCustomPropertyValueMappings", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/DataMapping_Retriev" +
            "eCustomPropertyValueMappingsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/DataMapping_Retriev" +
            "eCustomPropertyValueMappingsServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDataMapping[] DataMapping_RetrieveCustomPropertyValueMappings(int dataSyncSystemId, int artifactTypeId, int customPropertyId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/DataMapping_Retriev" +
            "eCustomPropertyValueMappings", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/DataMapping_Retriev" +
            "eCustomPropertyValueMappingsResponse")]
        System.IAsyncResult BeginDataMapping_RetrieveCustomPropertyValueMappings(int dataSyncSystemId, int artifactTypeId, int customPropertyId, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDataMapping[] EndDataMapping_RetrieveCustomPropertyValueMappings(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/DataMapping_Retriev" +
            "eFieldValueMappings", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/DataMapping_Retriev" +
            "eFieldValueMappingsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/DataMapping_Retriev" +
            "eFieldValueMappingsServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDataMapping[] DataMapping_RetrieveFieldValueMappings(int dataSyncSystemId, int artifactFieldId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/DataMapping_Retriev" +
            "eFieldValueMappings", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/DataMapping_Retriev" +
            "eFieldValueMappingsResponse")]
        System.IAsyncResult BeginDataMapping_RetrieveFieldValueMappings(int dataSyncSystemId, int artifactFieldId, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDataMapping[] EndDataMapping_RetrieveFieldValueMappings(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/DataMapping_Retriev" +
            "eProjectMappings", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/DataMapping_Retriev" +
            "eProjectMappingsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/DataMapping_Retriev" +
            "eProjectMappingsServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDataMapping[] DataMapping_RetrieveProjectMappings(int dataSyncSystemId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/DataMapping_Retriev" +
            "eProjectMappings", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/DataMapping_Retriev" +
            "eProjectMappingsResponse")]
        System.IAsyncResult BeginDataMapping_RetrieveProjectMappings(int dataSyncSystemId, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDataMapping[] EndDataMapping_RetrieveProjectMappings(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/DataMapping_Retriev" +
            "eUserMappings", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/DataMapping_Retriev" +
            "eUserMappingsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/DataMapping_Retriev" +
            "eUserMappingsServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDataMapping[] DataMapping_RetrieveUserMappings(int dataSyncSystemId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/DataMapping_Retriev" +
            "eUserMappings", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/DataMapping_Retriev" +
            "eUserMappingsResponse")]
        System.IAsyncResult BeginDataMapping_RetrieveUserMappings(int dataSyncSystemId, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDataMapping[] EndDataMapping_RetrieveUserMappings(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/DataMapping_SearchA" +
            "rtifactMappings", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/DataMapping_SearchA" +
            "rtifactMappingsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/DataMapping_SearchA" +
            "rtifactMappingsServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteProjectArtifact[] DataMapping_SearchArtifactMappings(int dataSyncSystemId, int artifactTypeId, string externalKey);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/DataMapping_SearchA" +
            "rtifactMappings", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/DataMapping_SearchA" +
            "rtifactMappingsResponse")]
        System.IAsyncResult BeginDataMapping_SearchArtifactMappings(int dataSyncSystemId, int artifactTypeId, string externalKey, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteProjectArtifact[] EndDataMapping_SearchArtifactMappings(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Document_OpenFile", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Document_OpenFileRe" +
            "sponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Document_OpenFileSe" +
            "rviceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        byte[] Document_OpenFile(int attachmentId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Document_OpenFile", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Document_OpenFileRe" +
            "sponse")]
        System.IAsyncResult BeginDocument_OpenFile(int attachmentId, System.AsyncCallback callback, object asyncState);
        
        byte[] EndDocument_OpenFile(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Document_AddFile", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Document_AddFileRes" +
            "ponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Document_AddFileSer" +
            "viceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDocument Document_AddFile(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDocument remoteDocument, byte[] binaryData);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Document_AddFile", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Document_AddFileRes" +
            "ponse")]
        System.IAsyncResult BeginDocument_AddFile(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDocument remoteDocument, byte[] binaryData, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDocument EndDocument_AddFile(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Document_AddUrl", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Document_AddUrlResp" +
            "onse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Document_AddUrlServ" +
            "iceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDocument Document_AddUrl(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDocument remoteDocument);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Document_AddUrl", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Document_AddUrlResp" +
            "onse")]
        System.IAsyncResult BeginDocument_AddUrl(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDocument remoteDocument, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDocument EndDocument_AddUrl(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Document_AddFileVer" +
            "sion", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Document_AddFileVer" +
            "sionResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Document_AddFileVer" +
            "sionServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDocumentVersion Document_AddFileVersion(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDocumentVersion remoteDocumentVersion, byte[] binaryData, bool makeCurrent);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Document_AddFileVer" +
            "sion", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Document_AddFileVer" +
            "sionResponse")]
        System.IAsyncResult BeginDocument_AddFileVersion(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDocumentVersion remoteDocumentVersion, byte[] binaryData, bool makeCurrent, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDocumentVersion EndDocument_AddFileVersion(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Document_AddUrlVers" +
            "ion", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Document_AddUrlVers" +
            "ionResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Document_AddUrlVers" +
            "ionServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDocumentVersion Document_AddUrlVersion(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDocumentVersion remoteDocumentVersion, bool makeCurrent);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Document_AddUrlVers" +
            "ion", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Document_AddUrlVers" +
            "ionResponse")]
        System.IAsyncResult BeginDocument_AddUrlVersion(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDocumentVersion remoteDocumentVersion, bool makeCurrent, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDocumentVersion EndDocument_AddUrlVersion(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Document_DeleteFrom" +
            "Artifact", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Document_DeleteFrom" +
            "ArtifactResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Document_DeleteFrom" +
            "ArtifactServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        void Document_DeleteFromArtifact(int attachmentId, int artifactTypeId, int artifactId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Document_DeleteFrom" +
            "Artifact", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Document_DeleteFrom" +
            "ArtifactResponse")]
        System.IAsyncResult BeginDocument_DeleteFromArtifact(int attachmentId, int artifactTypeId, int artifactId, System.AsyncCallback callback, object asyncState);
        
        void EndDocument_DeleteFromArtifact(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Document_Delete", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Document_DeleteResp" +
            "onse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Document_DeleteServ" +
            "iceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        void Document_Delete(int attachmentId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Document_Delete", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Document_DeleteResp" +
            "onse")]
        System.IAsyncResult BeginDocument_Delete(int attachmentId, System.AsyncCallback callback, object asyncState);
        
        void EndDocument_Delete(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Document_Retrieve", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Document_RetrieveRe" +
            "sponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Document_RetrieveSe" +
            "rviceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDocument[] Document_Retrieve(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSort remoteSort, int startingRow, int numberRows);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Document_Retrieve", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Document_RetrieveRe" +
            "sponse")]
        System.IAsyncResult BeginDocument_Retrieve(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSort remoteSort, int startingRow, int numberRows, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDocument[] EndDocument_Retrieve(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Document_RetrieveFo" +
            "rFolder", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Document_RetrieveFo" +
            "rFolderResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Document_RetrieveFo" +
            "rFolderServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDocument[] Document_RetrieveForFolder(int folderId, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSort remoteSort, int startingRow, int numberRows);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Document_RetrieveFo" +
            "rFolder", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Document_RetrieveFo" +
            "rFolderResponse")]
        System.IAsyncResult BeginDocument_RetrieveForFolder(int folderId, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSort remoteSort, int startingRow, int numberRows, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDocument[] EndDocument_RetrieveForFolder(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Document_RetrieveFo" +
            "rArtifact", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Document_RetrieveFo" +
            "rArtifactResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Document_RetrieveFo" +
            "rArtifactServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDocument[] Document_RetrieveForArtifact(int artifactTypeId, int artifactId, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSort remoteSort);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Document_RetrieveFo" +
            "rArtifact", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Document_RetrieveFo" +
            "rArtifactResponse")]
        System.IAsyncResult BeginDocument_RetrieveForArtifact(int artifactTypeId, int artifactId, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSort remoteSort, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDocument[] EndDocument_RetrieveForArtifact(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Document_AddToArtif" +
            "actId", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Document_AddToArtif" +
            "actIdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Document_AddToArtif" +
            "actIdServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        void Document_AddToArtifactId(int artifactTypeId, int artifactId, int attachmentId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Document_AddToArtif" +
            "actId", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Document_AddToArtif" +
            "actIdResponse")]
        System.IAsyncResult BeginDocument_AddToArtifactId(int artifactTypeId, int artifactId, int attachmentId, System.AsyncCallback callback, object asyncState);
        
        void EndDocument_AddToArtifactId(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Document_RetrieveBy" +
            "Id", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Document_RetrieveBy" +
            "IdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Document_RetrieveBy" +
            "IdServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDocument Document_RetrieveById(int attachmentId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Document_RetrieveBy" +
            "Id", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Document_RetrieveBy" +
            "IdResponse")]
        System.IAsyncResult BeginDocument_RetrieveById(int attachmentId, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDocument EndDocument_RetrieveById(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Document_RetrieveTy" +
            "pes", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Document_RetrieveTy" +
            "pesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Document_RetrieveTy" +
            "pesServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDocumentType[] Document_RetrieveTypes(bool activeOnly);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Document_RetrieveTy" +
            "pes", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Document_RetrieveTy" +
            "pesResponse")]
        System.IAsyncResult BeginDocument_RetrieveTypes(bool activeOnly, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDocumentType[] EndDocument_RetrieveTypes(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Document_RetrieveFo" +
            "lders", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Document_RetrieveFo" +
            "ldersResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Document_RetrieveFo" +
            "ldersServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDocumentFolder[] Document_RetrieveFolders();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Document_RetrieveFo" +
            "lders", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Document_RetrieveFo" +
            "ldersResponse")]
        System.IAsyncResult BeginDocument_RetrieveFolders(System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDocumentFolder[] EndDocument_RetrieveFolders(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Document_RetrieveFo" +
            "lderById", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Document_RetrieveFo" +
            "lderByIdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Document_RetrieveFo" +
            "lderByIdServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDocumentFolder Document_RetrieveFolderById(int folderId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Document_RetrieveFo" +
            "lderById", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Document_RetrieveFo" +
            "lderByIdResponse")]
        System.IAsyncResult BeginDocument_RetrieveFolderById(int folderId, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDocumentFolder EndDocument_RetrieveFolderById(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Document_AddFolder", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Document_AddFolderR" +
            "esponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Document_AddFolderS" +
            "erviceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDocumentFolder Document_AddFolder(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDocumentFolder remoteDocumentFolder);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Document_AddFolder", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Document_AddFolderR" +
            "esponse")]
        System.IAsyncResult BeginDocument_AddFolder(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDocumentFolder remoteDocumentFolder, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDocumentFolder EndDocument_AddFolder(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Document_DeleteFold" +
            "er", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Document_DeleteFold" +
            "erResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Document_DeleteFold" +
            "erServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        void Document_DeleteFolder(int projectAttachmentFolderId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Document_DeleteFold" +
            "er", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Document_DeleteFold" +
            "erResponse")]
        System.IAsyncResult BeginDocument_DeleteFolder(int projectAttachmentFolderId, System.AsyncCallback callback, object asyncState);
        
        void EndDocument_DeleteFolder(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Document_UpdateFold" +
            "er", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Document_UpdateFold" +
            "erResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Document_UpdateFold" +
            "erServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        void Document_UpdateFolder(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDocumentFolder remoteDocumentFolder);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Document_UpdateFold" +
            "er", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Document_UpdateFold" +
            "erResponse")]
        System.IAsyncResult BeginDocument_UpdateFolder(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDocumentFolder remoteDocumentFolder, System.AsyncCallback callback, object asyncState);
        
        void EndDocument_UpdateFolder(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Association_Create", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Association_CreateR" +
            "esponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Association_CreateS" +
            "erviceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAssociation Association_Create(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAssociation remoteAssociation);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Association_Create", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Association_CreateR" +
            "esponse")]
        System.IAsyncResult BeginAssociation_Create(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAssociation remoteAssociation, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAssociation EndAssociation_Create(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Association_Update", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Association_UpdateR" +
            "esponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ValidationFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Association_UpdateV" +
            "alidationFaultMessageFault", Name="ValidationFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Association_UpdateS" +
            "erviceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        void Association_Update(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAssociation remoteAssociation);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Association_Update", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Association_UpdateR" +
            "esponse")]
        System.IAsyncResult BeginAssociation_Update(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAssociation remoteAssociation, System.AsyncCallback callback, object asyncState);
        
        void EndAssociation_Update(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Association_Retriev" +
            "eForArtifact", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Association_Retriev" +
            "eForArtifactResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Association_Retriev" +
            "eForArtifactServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAssociation[] Association_RetrieveForArtifact(int artifactTypeId, int artifactId, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSort remoteSort);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Association_Retriev" +
            "eForArtifact", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Association_Retriev" +
            "eForArtifactResponse")]
        System.IAsyncResult BeginAssociation_RetrieveForArtifact(int artifactTypeId, int artifactId, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSort remoteSort, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAssociation[] EndAssociation_RetrieveForArtifact(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Incident_AddPriorit" +
            "y", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Incident_AddPriorit" +
            "yResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Incident_AddPriorit" +
            "yServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncidentPriority Incident_AddPriority(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncidentPriority remoteIncidentPriority);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Incident_AddPriorit" +
            "y", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Incident_AddPriorit" +
            "yResponse")]
        System.IAsyncResult BeginIncident_AddPriority(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncidentPriority remoteIncidentPriority, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncidentPriority EndIncident_AddPriority(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Incident_Count", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Incident_CountRespo" +
            "nse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Incident_CountServi" +
            "ceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        long Incident_Count(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Incident_Count", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Incident_CountRespo" +
            "nse")]
        System.IAsyncResult BeginIncident_Count(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters, System.AsyncCallback callback, object asyncState);
        
        long EndIncident_Count(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Incident_AddComment" +
            "s", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Incident_AddComment" +
            "sResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Incident_AddComment" +
            "sServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComment[] Incident_AddComments(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComment[] remoteComments);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Incident_AddComment" +
            "s", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Incident_AddComment" +
            "sResponse")]
        System.IAsyncResult BeginIncident_AddComments(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComment[] remoteComments, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComment[] EndIncident_AddComments(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Incident_AddSeverit" +
            "y", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Incident_AddSeverit" +
            "yResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Incident_AddSeverit" +
            "yServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncidentSeverity Incident_AddSeverity(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncidentSeverity remoteIncidentSeverity);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Incident_AddSeverit" +
            "y", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Incident_AddSeverit" +
            "yResponse")]
        System.IAsyncResult BeginIncident_AddSeverity(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncidentSeverity remoteIncidentSeverity, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncidentSeverity EndIncident_AddSeverity(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Incident_AddStatus", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Incident_AddStatusR" +
            "esponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Incident_AddStatusS" +
            "erviceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncidentStatus Incident_AddStatus(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncidentStatus remoteIncidentStatus);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Incident_AddStatus", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Incident_AddStatusR" +
            "esponse")]
        System.IAsyncResult BeginIncident_AddStatus(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncidentStatus remoteIncidentStatus, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncidentStatus EndIncident_AddStatus(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Incident_AddType", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Incident_AddTypeRes" +
            "ponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Incident_AddTypeSer" +
            "viceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncidentType Incident_AddType(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncidentType remoteIncidentType);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Incident_AddType", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Incident_AddTypeRes" +
            "ponse")]
        System.IAsyncResult BeginIncident_AddType(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncidentType remoteIncidentType, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncidentType EndIncident_AddType(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Incident_Create", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Incident_CreateResp" +
            "onse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Incident_CreateServ" +
            "iceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ValidationFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Incident_CreateVali" +
            "dationFaultMessageFault", Name="ValidationFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncident Incident_Create(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncident remoteIncident);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Incident_Create", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Incident_CreateResp" +
            "onse")]
        System.IAsyncResult BeginIncident_Create(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncident remoteIncident, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncident EndIncident_Create(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Incident_Retrieve", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Incident_RetrieveRe" +
            "sponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Incident_RetrieveSe" +
            "rviceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncident[] Incident_Retrieve(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSort remoteSort, int startingRow, int numberOfRows);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Incident_Retrieve", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Incident_RetrieveRe" +
            "sponse")]
        System.IAsyncResult BeginIncident_Retrieve(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSort remoteSort, int startingRow, int numberOfRows, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncident[] EndIncident_Retrieve(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Incident_RetrieveBy" +
            "Id", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Incident_RetrieveBy" +
            "IdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Incident_RetrieveBy" +
            "IdServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncident Incident_RetrieveById(int incidentId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Incident_RetrieveBy" +
            "Id", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Incident_RetrieveBy" +
            "IdResponse")]
        System.IAsyncResult BeginIncident_RetrieveById(int incidentId, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncident EndIncident_RetrieveById(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Incident_RetrieveBy" +
            "TestCase", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Incident_RetrieveBy" +
            "TestCaseResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Incident_RetrieveBy" +
            "TestCaseServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncident[] Incident_RetrieveByTestCase(int testCaseId, bool openOnly);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Incident_RetrieveBy" +
            "TestCase", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Incident_RetrieveBy" +
            "TestCaseResponse")]
        System.IAsyncResult BeginIncident_RetrieveByTestCase(int testCaseId, bool openOnly, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncident[] EndIncident_RetrieveByTestCase(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Incident_RetrieveBy" +
            "TestRunStep", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Incident_RetrieveBy" +
            "TestRunStepResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Incident_RetrieveBy" +
            "TestRunStepServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncident[] Incident_RetrieveByTestRunStep(int testRunStepId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Incident_RetrieveBy" +
            "TestRunStep", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Incident_RetrieveBy" +
            "TestRunStepResponse")]
        System.IAsyncResult BeginIncident_RetrieveByTestRunStep(int testRunStepId, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncident[] EndIncident_RetrieveByTestRunStep(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Incident_RetrieveBy" +
            "TestStep", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Incident_RetrieveBy" +
            "TestStepResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Incident_RetrieveBy" +
            "TestStepServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncident[] Incident_RetrieveByTestStep(int testStepId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Incident_RetrieveBy" +
            "TestStep", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Incident_RetrieveBy" +
            "TestStepResponse")]
        System.IAsyncResult BeginIncident_RetrieveByTestStep(int testStepId, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncident[] EndIncident_RetrieveByTestStep(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Incident_RetrieveFo" +
            "rOwner", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Incident_RetrieveFo" +
            "rOwnerResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Incident_RetrieveFo" +
            "rOwnerServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncident[] Incident_RetrieveForOwner();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Incident_RetrieveFo" +
            "rOwner", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Incident_RetrieveFo" +
            "rOwnerResponse")]
        System.IAsyncResult BeginIncident_RetrieveForOwner(System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncident[] EndIncident_RetrieveForOwner(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Incident_RetrieveNe" +
            "w", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Incident_RetrieveNe" +
            "wResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Incident_RetrieveNe" +
            "wServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncident[] Incident_RetrieveNew(System.DateTime creationDate, int startRow, int numberOfRows);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Incident_RetrieveNe" +
            "w", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Incident_RetrieveNe" +
            "wResponse")]
        System.IAsyncResult BeginIncident_RetrieveNew(System.DateTime creationDate, int startRow, int numberOfRows, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncident[] EndIncident_RetrieveNew(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Incident_RetrievePr" +
            "iorities", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Incident_RetrievePr" +
            "ioritiesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Incident_RetrievePr" +
            "ioritiesServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncidentPriority[] Incident_RetrievePriorities();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Incident_RetrievePr" +
            "iorities", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Incident_RetrievePr" +
            "ioritiesResponse")]
        System.IAsyncResult BeginIncident_RetrievePriorities(System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncidentPriority[] EndIncident_RetrievePriorities(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Incident_RetrieveCo" +
            "mments", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Incident_RetrieveCo" +
            "mmentsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Incident_RetrieveCo" +
            "mmentsServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComment[] Incident_RetrieveComments(int incidentId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Incident_RetrieveCo" +
            "mments", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Incident_RetrieveCo" +
            "mmentsResponse")]
        System.IAsyncResult BeginIncident_RetrieveComments(int incidentId, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComment[] EndIncident_RetrieveComments(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Incident_RetrieveSe" +
            "verities", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Incident_RetrieveSe" +
            "veritiesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Incident_RetrieveSe" +
            "veritiesServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncidentSeverity[] Incident_RetrieveSeverities();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Incident_RetrieveSe" +
            "verities", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Incident_RetrieveSe" +
            "veritiesResponse")]
        System.IAsyncResult BeginIncident_RetrieveSeverities(System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncidentSeverity[] EndIncident_RetrieveSeverities(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Incident_RetrieveSt" +
            "atuses", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Incident_RetrieveSt" +
            "atusesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Incident_RetrieveSt" +
            "atusesServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncidentStatus[] Incident_RetrieveStatuses();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Incident_RetrieveSt" +
            "atuses", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Incident_RetrieveSt" +
            "atusesResponse")]
        System.IAsyncResult BeginIncident_RetrieveStatuses(System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncidentStatus[] EndIncident_RetrieveStatuses(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Incident_RetrieveTy" +
            "pes", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Incident_RetrieveTy" +
            "pesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Incident_RetrieveTy" +
            "pesServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncidentType[] Incident_RetrieveTypes();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Incident_RetrieveTy" +
            "pes", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Incident_RetrieveTy" +
            "pesResponse")]
        System.IAsyncResult BeginIncident_RetrieveTypes(System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncidentType[] EndIncident_RetrieveTypes(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Incident_RetrieveWo" +
            "rkflowFields", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Incident_RetrieveWo" +
            "rkflowFieldsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Incident_RetrieveWo" +
            "rkflowFieldsServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteWorkflowField[] Incident_RetrieveWorkflowFields(int currentTypeId, int currentStatusId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Incident_RetrieveWo" +
            "rkflowFields", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Incident_RetrieveWo" +
            "rkflowFieldsResponse")]
        System.IAsyncResult BeginIncident_RetrieveWorkflowFields(int currentTypeId, int currentStatusId, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteWorkflowField[] EndIncident_RetrieveWorkflowFields(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Incident_RetrieveWo" +
            "rkflowTransitions", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Incident_RetrieveWo" +
            "rkflowTransitionsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Incident_RetrieveWo" +
            "rkflowTransitionsServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteWorkflowTransition[] Incident_RetrieveWorkflowTransitions(int currentTypeId, int currentStatusId, bool isDetector, bool isOwner);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Incident_RetrieveWo" +
            "rkflowTransitions", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Incident_RetrieveWo" +
            "rkflowTransitionsResponse")]
        System.IAsyncResult BeginIncident_RetrieveWorkflowTransitions(int currentTypeId, int currentStatusId, bool isDetector, bool isOwner, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteWorkflowTransition[] EndIncident_RetrieveWorkflowTransitions(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Incident_RetrieveWo" +
            "rkflowCustomProperties", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Incident_RetrieveWo" +
            "rkflowCustomPropertiesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Incident_RetrieveWo" +
            "rkflowCustomPropertiesServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteWorkflowCustomProperty[] Incident_RetrieveWorkflowCustomProperties(int currentTypeId, int currentStatusId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Incident_RetrieveWo" +
            "rkflowCustomProperties", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Incident_RetrieveWo" +
            "rkflowCustomPropertiesResponse")]
        System.IAsyncResult BeginIncident_RetrieveWorkflowCustomProperties(int currentTypeId, int currentStatusId, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteWorkflowCustomProperty[] EndIncident_RetrieveWorkflowCustomProperties(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Incident_Update", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Incident_UpdateResp" +
            "onse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ValidationFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Incident_UpdateVali" +
            "dationFaultMessageFault", Name="ValidationFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Incident_UpdateServ" +
            "iceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        void Incident_Update(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncident remoteIncident);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Incident_Update", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Incident_UpdateResp" +
            "onse")]
        System.IAsyncResult BeginIncident_Update(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncident remoteIncident, System.AsyncCallback callback, object asyncState);
        
        void EndIncident_Update(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Incident_Delete", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Incident_DeleteResp" +
            "onse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Incident_DeleteServ" +
            "iceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        void Incident_Delete(int incidentId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Incident_Delete", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Incident_DeleteResp" +
            "onse")]
        System.IAsyncResult BeginIncident_Delete(int incidentId, System.AsyncCallback callback, object asyncState);
        
        void EndIncident_Delete(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Incident_RetrieveDe" +
            "faultStatus", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Incident_RetrieveDe" +
            "faultStatusResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Incident_RetrieveDe" +
            "faultStatusServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncidentStatus Incident_RetrieveDefaultStatus();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Incident_RetrieveDe" +
            "faultStatus", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Incident_RetrieveDe" +
            "faultStatusResponse")]
        System.IAsyncResult BeginIncident_RetrieveDefaultStatus(System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncidentStatus EndIncident_RetrieveDefaultStatus(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Incident_RetrieveDe" +
            "faultType", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Incident_RetrieveDe" +
            "faultTypeResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Incident_RetrieveDe" +
            "faultTypeServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncidentType Incident_RetrieveDefaultType();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Incident_RetrieveDe" +
            "faultType", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Incident_RetrieveDe" +
            "faultTypeResponse")]
        System.IAsyncResult BeginIncident_RetrieveDefaultType(System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncidentType EndIncident_RetrieveDefaultType(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Project_Create", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Project_CreateRespo" +
            "nse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Project_CreateServi" +
            "ceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteProject Project_Create(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteProject remoteProject, System.Nullable<int> existingProjectId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Project_Create", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Project_CreateRespo" +
            "nse")]
        System.IAsyncResult BeginProject_Create(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteProject remoteProject, System.Nullable<int> existingProjectId, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteProject EndProject_Create(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Project_Delete", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Project_DeleteRespo" +
            "nse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Project_DeleteServi" +
            "ceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        void Project_Delete(int projectId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Project_Delete", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Project_DeleteRespo" +
            "nse")]
        System.IAsyncResult BeginProject_Delete(int projectId, System.AsyncCallback callback, object asyncState);
        
        void EndProject_Delete(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Project_Retrieve", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Project_RetrieveRes" +
            "ponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Project_RetrieveSer" +
            "viceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteProject[] Project_Retrieve();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Project_Retrieve", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Project_RetrieveRes" +
            "ponse")]
        System.IAsyncResult BeginProject_Retrieve(System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteProject[] EndProject_Retrieve(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Project_RetrieveByI" +
            "d", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Project_RetrieveByI" +
            "dResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Project_RetrieveByI" +
            "dServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteProject Project_RetrieveById(int projectId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Project_RetrieveByI" +
            "d", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Project_RetrieveByI" +
            "dResponse")]
        System.IAsyncResult BeginProject_RetrieveById(int projectId, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteProject EndProject_RetrieveById(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Project_RetrieveUse" +
            "rMembership", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Project_RetrieveUse" +
            "rMembershipResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Project_RetrieveUse" +
            "rMembershipServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteProjectUser[] Project_RetrieveUserMembership();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Project_RetrieveUse" +
            "rMembership", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Project_RetrieveUse" +
            "rMembershipResponse")]
        System.IAsyncResult BeginProject_RetrieveUserMembership(System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteProjectUser[] EndProject_RetrieveUserMembership(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Project_RefreshProg" +
            "ressExecutionStatusCaches", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Project_RefreshProg" +
            "ressExecutionStatusCachesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Project_RefreshProg" +
            "ressExecutionStatusCachesServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        void Project_RefreshProgressExecutionStatusCaches(System.Nullable<int> releaseId, bool runInBackground);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Project_RefreshProg" +
            "ressExecutionStatusCaches", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Project_RefreshProg" +
            "ressExecutionStatusCachesResponse")]
        System.IAsyncResult BeginProject_RefreshProgressExecutionStatusCaches(System.Nullable<int> releaseId, bool runInBackground, System.AsyncCallback callback, object asyncState);
        
        void EndProject_RefreshProgressExecutionStatusCaches(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Project_AddUserMemb" +
            "ership", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Project_AddUserMemb" +
            "ershipResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Project_AddUserMemb" +
            "ershipServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        void Project_AddUserMembership(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteProjectUser remoteProjectUser);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Project_AddUserMemb" +
            "ership", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Project_AddUserMemb" +
            "ershipResponse")]
        System.IAsyncResult BeginProject_AddUserMembership(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteProjectUser remoteProjectUser, System.AsyncCallback callback, object asyncState);
        
        void EndProject_AddUserMembership(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Project_UpdateUserM" +
            "embership", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Project_UpdateUserM" +
            "embershipResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Project_UpdateUserM" +
            "embershipServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        void Project_UpdateUserMembership(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteProjectUser remoteProjectUser);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Project_UpdateUserM" +
            "embership", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Project_UpdateUserM" +
            "embershipResponse")]
        System.IAsyncResult BeginProject_UpdateUserMembership(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteProjectUser remoteProjectUser, System.AsyncCallback callback, object asyncState);
        
        void EndProject_UpdateUserMembership(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/ProjectRole_Retriev" +
            "e", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/ProjectRole_Retriev" +
            "eResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/ProjectRole_Retriev" +
            "eServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteProjectRole[] ProjectRole_Retrieve();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/ProjectRole_Retriev" +
            "e", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/ProjectRole_Retriev" +
            "eResponse")]
        System.IAsyncResult BeginProjectRole_Retrieve(System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteProjectRole[] EndProjectRole_Retrieve(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Release_AddTestMapp" +
            "ing", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Release_AddTestMapp" +
            "ingResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Release_AddTestMapp" +
            "ingServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        void Release_AddTestMapping(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteReleaseTestCaseMapping remoteReleaseTestCaseMapping);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Release_AddTestMapp" +
            "ing", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Release_AddTestMapp" +
            "ingResponse")]
        System.IAsyncResult BeginRelease_AddTestMapping(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteReleaseTestCaseMapping remoteReleaseTestCaseMapping, System.AsyncCallback callback, object asyncState);
        
        void EndRelease_AddTestMapping(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Release_AddTestMapp" +
            "ing2", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Release_AddTestMapp" +
            "ing2Response")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Release_AddTestMapp" +
            "ing2ServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        void Release_AddTestMapping2(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteReleaseTestCaseMapping[] remoteReleaseTestCaseMappings);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Release_AddTestMapp" +
            "ing2", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Release_AddTestMapp" +
            "ing2Response")]
        System.IAsyncResult BeginRelease_AddTestMapping2(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteReleaseTestCaseMapping[] remoteReleaseTestCaseMappings, System.AsyncCallback callback, object asyncState);
        
        void EndRelease_AddTestMapping2(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Release_Count", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Release_CountRespon" +
            "se")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Release_CountServic" +
            "eFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        long Release_Count(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Release_Count", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Release_CountRespon" +
            "se")]
        System.IAsyncResult BeginRelease_Count(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters, System.AsyncCallback callback, object asyncState);
        
        long EndRelease_Count(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Release_Create", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Release_CreateRespo" +
            "nse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ValidationFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Release_CreateValid" +
            "ationFaultMessageFault", Name="ValidationFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Release_CreateServi" +
            "ceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRelease Release_Create(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRelease remoteRelease, System.Nullable<int> parentReleaseId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Release_Create", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Release_CreateRespo" +
            "nse")]
        System.IAsyncResult BeginRelease_Create(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRelease remoteRelease, System.Nullable<int> parentReleaseId, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRelease EndRelease_Create(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Release_RemoveTestM" +
            "apping", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Release_RemoveTestM" +
            "appingResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Release_RemoveTestM" +
            "appingServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        void Release_RemoveTestMapping(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteReleaseTestCaseMapping remoteReleaseTestCaseMapping);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Release_RemoveTestM" +
            "apping", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Release_RemoveTestM" +
            "appingResponse")]
        System.IAsyncResult BeginRelease_RemoveTestMapping(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteReleaseTestCaseMapping remoteReleaseTestCaseMapping, System.AsyncCallback callback, object asyncState);
        
        void EndRelease_RemoveTestMapping(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Release_Retrieve", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Release_RetrieveRes" +
            "ponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Release_RetrieveSer" +
            "viceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRelease[] Release_Retrieve(bool activeOnly);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Release_Retrieve", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Release_RetrieveRes" +
            "ponse")]
        System.IAsyncResult BeginRelease_Retrieve(bool activeOnly, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRelease[] EndRelease_Retrieve(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Release_Retrieve2", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Release_Retrieve2Re" +
            "sponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Release_Retrieve2Se" +
            "rviceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRelease[] Release_Retrieve2(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters, int startingRow, int numberOfRows);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Release_Retrieve2", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Release_Retrieve2Re" +
            "sponse")]
        System.IAsyncResult BeginRelease_Retrieve2(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters, int startingRow, int numberOfRows, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRelease[] EndRelease_Retrieve2(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Release_RetrieveByI" +
            "d", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Release_RetrieveByI" +
            "dResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Release_RetrieveByI" +
            "dServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRelease Release_RetrieveById(int releaseId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Release_RetrieveByI" +
            "d", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Release_RetrieveByI" +
            "dResponse")]
        System.IAsyncResult BeginRelease_RetrieveById(int releaseId, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRelease EndRelease_RetrieveById(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Release_Update", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Release_UpdateRespo" +
            "nse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ValidationFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Release_UpdateValid" +
            "ationFaultMessageFault", Name="ValidationFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Release_UpdateServi" +
            "ceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        void Release_Update(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRelease remoteRelease);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Release_Update", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Release_UpdateRespo" +
            "nse")]
        System.IAsyncResult BeginRelease_Update(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRelease remoteRelease, System.AsyncCallback callback, object asyncState);
        
        void EndRelease_Update(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Release_Delete", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Release_DeleteRespo" +
            "nse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Release_DeleteServi" +
            "ceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        void Release_Delete(int releaseId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Release_Delete", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Release_DeleteRespo" +
            "nse")]
        System.IAsyncResult BeginRelease_Delete(int releaseId, System.AsyncCallback callback, object asyncState);
        
        void EndRelease_Delete(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Release_Move", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Release_MoveRespons" +
            "e")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Release_MoveService" +
            "FaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        void Release_Move(int releaseId, System.Nullable<int> destinationReleaseId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Release_Move", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Release_MoveRespons" +
            "e")]
        System.IAsyncResult BeginRelease_Move(int releaseId, System.Nullable<int> destinationReleaseId, System.AsyncCallback callback, object asyncState);
        
        void EndRelease_Move(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Release_Indent", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Release_IndentRespo" +
            "nse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Release_IndentServi" +
            "ceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        void Release_Indent(int releaseId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Release_Indent", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Release_IndentRespo" +
            "nse")]
        System.IAsyncResult BeginRelease_Indent(int releaseId, System.AsyncCallback callback, object asyncState);
        
        void EndRelease_Indent(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Release_Outdent", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Release_OutdentResp" +
            "onse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Release_OutdentServ" +
            "iceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        void Release_Outdent(int releaseId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Release_Outdent", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Release_OutdentResp" +
            "onse")]
        System.IAsyncResult BeginRelease_Outdent(int releaseId, System.AsyncCallback callback, object asyncState);
        
        void EndRelease_Outdent(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Release_RetrieveCom" +
            "ments", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Release_RetrieveCom" +
            "mentsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Release_RetrieveCom" +
            "mentsServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComment[] Release_RetrieveComments(int ReleaseId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Release_RetrieveCom" +
            "ments", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Release_RetrieveCom" +
            "mentsResponse")]
        System.IAsyncResult BeginRelease_RetrieveComments(int ReleaseId, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComment[] EndRelease_RetrieveComments(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Release_RetrieveTes" +
            "tMapping", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Release_RetrieveTes" +
            "tMappingResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Release_RetrieveTes" +
            "tMappingServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteReleaseTestCaseMapping[] Release_RetrieveTestMapping(int releaseId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Release_RetrieveTes" +
            "tMapping", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Release_RetrieveTes" +
            "tMappingResponse")]
        System.IAsyncResult BeginRelease_RetrieveTestMapping(int releaseId, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteReleaseTestCaseMapping[] EndRelease_RetrieveTestMapping(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Release_CreateComme" +
            "nt", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Release_CreateComme" +
            "ntResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Release_CreateComme" +
            "ntServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComment Release_CreateComment(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComment remoteComment);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Release_CreateComme" +
            "nt", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Release_CreateComme" +
            "ntResponse")]
        System.IAsyncResult BeginRelease_CreateComment(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComment remoteComment, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComment EndRelease_CreateComment(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Release_RetrieveSta" +
            "tuses", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Release_RetrieveSta" +
            "tusesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Release_RetrieveSta" +
            "tusesServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteReleaseStatus[] Release_RetrieveStatuses();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Release_RetrieveSta" +
            "tuses", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Release_RetrieveSta" +
            "tusesResponse")]
        System.IAsyncResult BeginRelease_RetrieveStatuses(System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteReleaseStatus[] EndRelease_RetrieveStatuses(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Release_RetrieveTyp" +
            "es", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Release_RetrieveTyp" +
            "esResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Release_RetrieveTyp" +
            "esServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteReleaseType[] Release_RetrieveTypes();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Release_RetrieveTyp" +
            "es", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Release_RetrieveTyp" +
            "esResponse")]
        System.IAsyncResult BeginRelease_RetrieveTypes(System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteReleaseType[] EndRelease_RetrieveTypes(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Release_RetrieveWor" +
            "kflowFields", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Release_RetrieveWor" +
            "kflowFieldsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Release_RetrieveWor" +
            "kflowFieldsServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteWorkflowField[] Release_RetrieveWorkflowFields(int currentTypeId, int currentStatusId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Release_RetrieveWor" +
            "kflowFields", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Release_RetrieveWor" +
            "kflowFieldsResponse")]
        System.IAsyncResult BeginRelease_RetrieveWorkflowFields(int currentTypeId, int currentStatusId, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteWorkflowField[] EndRelease_RetrieveWorkflowFields(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Release_RetrieveWor" +
            "kflowTransitions", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Release_RetrieveWor" +
            "kflowTransitionsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Release_RetrieveWor" +
            "kflowTransitionsServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteWorkflowTransition[] Release_RetrieveWorkflowTransitions(int currentTypeId, int currentStatusId, bool isCreator, bool isOwner);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Release_RetrieveWor" +
            "kflowTransitions", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Release_RetrieveWor" +
            "kflowTransitionsResponse")]
        System.IAsyncResult BeginRelease_RetrieveWorkflowTransitions(int currentTypeId, int currentStatusId, bool isCreator, bool isOwner, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteWorkflowTransition[] EndRelease_RetrieveWorkflowTransitions(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Release_RetrieveWor" +
            "kflowCustomProperties", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Release_RetrieveWor" +
            "kflowCustomPropertiesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Release_RetrieveWor" +
            "kflowCustomPropertiesServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteWorkflowCustomProperty[] Release_RetrieveWorkflowCustomProperties(int currentTypeId, int currentStatusId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Release_RetrieveWor" +
            "kflowCustomProperties", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Release_RetrieveWor" +
            "kflowCustomPropertiesResponse")]
        System.IAsyncResult BeginRelease_RetrieveWorkflowCustomProperties(int currentTypeId, int currentStatusId, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteWorkflowCustomProperty[] EndRelease_RetrieveWorkflowCustomProperties(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Requirement_AddTest" +
            "Coverage", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Requirement_AddTest" +
            "CoverageResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Requirement_AddTest" +
            "CoverageServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        void Requirement_AddTestCoverage(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRequirementTestCaseMapping remoteReqTestCaseMapping);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Requirement_AddTest" +
            "Coverage", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Requirement_AddTest" +
            "CoverageResponse")]
        System.IAsyncResult BeginRequirement_AddTestCoverage(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRequirementTestCaseMapping remoteReqTestCaseMapping, System.AsyncCallback callback, object asyncState);
        
        void EndRequirement_AddTestCoverage(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Requirement_Count", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Requirement_CountRe" +
            "sponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Requirement_CountSe" +
            "rviceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        long Requirement_Count(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Requirement_Count", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Requirement_CountRe" +
            "sponse")]
        System.IAsyncResult BeginRequirement_Count(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters, System.AsyncCallback callback, object asyncState);
        
        long EndRequirement_Count(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Requirement_Create1" +
            "", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Requirement_Create1" +
            "Response")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ValidationFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Requirement_Create1" +
            "ValidationFaultMessageFault", Name="ValidationFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Requirement_Create1" +
            "ServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRequirement Requirement_Create1(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRequirement remoteRequirement, int indentPosition);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Requirement_Create1" +
            "", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Requirement_Create1" +
            "Response")]
        System.IAsyncResult BeginRequirement_Create1(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRequirement remoteRequirement, int indentPosition, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRequirement EndRequirement_Create1(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Requirement_Create2" +
            "", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Requirement_Create2" +
            "Response")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Requirement_Create2" +
            "ServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ValidationFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Requirement_Create2" +
            "ValidationFaultMessageFault", Name="ValidationFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRequirement Requirement_Create2(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRequirement remoteRequirement, System.Nullable<int> parentRequirementId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Requirement_Create2" +
            "", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Requirement_Create2" +
            "Response")]
        System.IAsyncResult BeginRequirement_Create2(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRequirement remoteRequirement, System.Nullable<int> parentRequirementId, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRequirement EndRequirement_Create2(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Requirement_RemoveT" +
            "estCoverage", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Requirement_RemoveT" +
            "estCoverageResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Requirement_RemoveT" +
            "estCoverageServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        void Requirement_RemoveTestCoverage(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRequirementTestCaseMapping remoteReqTestCaseMapping);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Requirement_RemoveT" +
            "estCoverage", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Requirement_RemoveT" +
            "estCoverageResponse")]
        System.IAsyncResult BeginRequirement_RemoveTestCoverage(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRequirementTestCaseMapping remoteReqTestCaseMapping, System.AsyncCallback callback, object asyncState);
        
        void EndRequirement_RemoveTestCoverage(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Requirement_Retriev" +
            "e", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Requirement_Retriev" +
            "eResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Requirement_Retriev" +
            "eServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRequirement[] Requirement_Retrieve(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters, int startingRow, int numberOfRows);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Requirement_Retriev" +
            "e", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Requirement_Retriev" +
            "eResponse")]
        System.IAsyncResult BeginRequirement_Retrieve(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters, int startingRow, int numberOfRows, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRequirement[] EndRequirement_Retrieve(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Requirement_Retriev" +
            "eById", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Requirement_Retriev" +
            "eByIdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Requirement_Retriev" +
            "eByIdServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRequirement Requirement_RetrieveById(int requirementId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Requirement_Retriev" +
            "eById", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Requirement_Retriev" +
            "eByIdResponse")]
        System.IAsyncResult BeginRequirement_RetrieveById(int requirementId, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRequirement EndRequirement_RetrieveById(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Requirement_Retriev" +
            "eForOwner", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Requirement_Retriev" +
            "eForOwnerResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Requirement_Retriev" +
            "eForOwnerServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRequirement[] Requirement_RetrieveForOwner();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Requirement_Retriev" +
            "eForOwner", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Requirement_Retriev" +
            "eForOwnerResponse")]
        System.IAsyncResult BeginRequirement_RetrieveForOwner(System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRequirement[] EndRequirement_RetrieveForOwner(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Requirement_Retriev" +
            "eTestCoverage", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Requirement_Retriev" +
            "eTestCoverageResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Requirement_Retriev" +
            "eTestCoverageServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRequirementTestCaseMapping[] Requirement_RetrieveTestCoverage(int requirementId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Requirement_Retriev" +
            "eTestCoverage", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Requirement_Retriev" +
            "eTestCoverageResponse")]
        System.IAsyncResult BeginRequirement_RetrieveTestCoverage(int requirementId, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRequirementTestCaseMapping[] EndRequirement_RetrieveTestCoverage(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Requirement_Update", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Requirement_UpdateR" +
            "esponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Requirement_UpdateS" +
            "erviceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ValidationFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Requirement_UpdateV" +
            "alidationFaultMessageFault", Name="ValidationFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        void Requirement_Update(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRequirement remoteRequirement);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Requirement_Update", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Requirement_UpdateR" +
            "esponse")]
        System.IAsyncResult BeginRequirement_Update(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRequirement remoteRequirement, System.AsyncCallback callback, object asyncState);
        
        void EndRequirement_Update(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Requirement_Delete", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Requirement_DeleteR" +
            "esponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Requirement_DeleteS" +
            "erviceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        void Requirement_Delete(int requirementId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Requirement_Delete", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Requirement_DeleteR" +
            "esponse")]
        System.IAsyncResult BeginRequirement_Delete(int requirementId, System.AsyncCallback callback, object asyncState);
        
        void EndRequirement_Delete(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Requirement_Move", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Requirement_MoveRes" +
            "ponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Requirement_MoveSer" +
            "viceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        void Requirement_Move(int requirementId, System.Nullable<int> destinationRequirementId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Requirement_Move", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Requirement_MoveRes" +
            "ponse")]
        System.IAsyncResult BeginRequirement_Move(int requirementId, System.Nullable<int> destinationRequirementId, System.AsyncCallback callback, object asyncState);
        
        void EndRequirement_Move(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Requirement_Indent", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Requirement_IndentR" +
            "esponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Requirement_IndentS" +
            "erviceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        void Requirement_Indent(int requirementId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Requirement_Indent", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Requirement_IndentR" +
            "esponse")]
        System.IAsyncResult BeginRequirement_Indent(int requirementId, System.AsyncCallback callback, object asyncState);
        
        void EndRequirement_Indent(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Requirement_Outdent" +
            "", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Requirement_Outdent" +
            "Response")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Requirement_Outdent" +
            "ServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        void Requirement_Outdent(int requirementId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Requirement_Outdent" +
            "", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Requirement_Outdent" +
            "Response")]
        System.IAsyncResult BeginRequirement_Outdent(int requirementId, System.AsyncCallback callback, object asyncState);
        
        void EndRequirement_Outdent(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Requirement_Retriev" +
            "eComments", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Requirement_Retriev" +
            "eCommentsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Requirement_Retriev" +
            "eCommentsServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComment[] Requirement_RetrieveComments(int RequirementId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Requirement_Retriev" +
            "eComments", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Requirement_Retriev" +
            "eCommentsResponse")]
        System.IAsyncResult BeginRequirement_RetrieveComments(int RequirementId, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComment[] EndRequirement_RetrieveComments(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Requirement_CreateC" +
            "omment", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Requirement_CreateC" +
            "ommentResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Requirement_CreateC" +
            "ommentServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComment Requirement_CreateComment(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComment remoteComment);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Requirement_CreateC" +
            "omment", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Requirement_CreateC" +
            "ommentResponse")]
        System.IAsyncResult BeginRequirement_CreateComment(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComment remoteComment, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComment EndRequirement_CreateComment(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Requirement_Retriev" +
            "eStatuses", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Requirement_Retriev" +
            "eStatusesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Requirement_Retriev" +
            "eStatusesServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRequirementStatus[] Requirement_RetrieveStatuses();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Requirement_Retriev" +
            "eStatuses", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Requirement_Retriev" +
            "eStatusesResponse")]
        System.IAsyncResult BeginRequirement_RetrieveStatuses(System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRequirementStatus[] EndRequirement_RetrieveStatuses(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Requirement_Retriev" +
            "eTypes", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Requirement_Retriev" +
            "eTypesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Requirement_Retriev" +
            "eTypesServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRequirementType[] Requirement_RetrieveTypes();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Requirement_Retriev" +
            "eTypes", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Requirement_Retriev" +
            "eTypesResponse")]
        System.IAsyncResult BeginRequirement_RetrieveTypes(System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRequirementType[] EndRequirement_RetrieveTypes(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Requirement_Retriev" +
            "eWorkflowFields", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Requirement_Retriev" +
            "eWorkflowFieldsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Requirement_Retriev" +
            "eWorkflowFieldsServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteWorkflowField[] Requirement_RetrieveWorkflowFields(int currentTypeId, int currentStatusId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Requirement_Retriev" +
            "eWorkflowFields", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Requirement_Retriev" +
            "eWorkflowFieldsResponse")]
        System.IAsyncResult BeginRequirement_RetrieveWorkflowFields(int currentTypeId, int currentStatusId, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteWorkflowField[] EndRequirement_RetrieveWorkflowFields(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Requirement_Retriev" +
            "eWorkflowTransitions", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Requirement_Retriev" +
            "eWorkflowTransitionsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Requirement_Retriev" +
            "eWorkflowTransitionsServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteWorkflowTransition[] Requirement_RetrieveWorkflowTransitions(int currentTypeId, int currentStatusId, bool isCreator, bool isOwner);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Requirement_Retriev" +
            "eWorkflowTransitions", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Requirement_Retriev" +
            "eWorkflowTransitionsResponse")]
        System.IAsyncResult BeginRequirement_RetrieveWorkflowTransitions(int currentTypeId, int currentStatusId, bool isCreator, bool isOwner, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteWorkflowTransition[] EndRequirement_RetrieveWorkflowTransitions(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Requirement_Retriev" +
            "eWorkflowCustomProperties", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Requirement_Retriev" +
            "eWorkflowCustomPropertiesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Requirement_Retriev" +
            "eWorkflowCustomPropertiesServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteWorkflowCustomProperty[] Requirement_RetrieveWorkflowCustomProperties(int currentTypeId, int currentStatusId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Requirement_Retriev" +
            "eWorkflowCustomProperties", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Requirement_Retriev" +
            "eWorkflowCustomPropertiesResponse")]
        System.IAsyncResult BeginRequirement_RetrieveWorkflowCustomProperties(int currentTypeId, int currentStatusId, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteWorkflowCustomProperty[] EndRequirement_RetrieveWorkflowCustomProperties(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Requirement_Retriev" +
            "eSteps", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Requirement_Retriev" +
            "eStepsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Requirement_Retriev" +
            "eStepsServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRequirementStep[] Requirement_RetrieveSteps(int requirementId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Requirement_Retriev" +
            "eSteps", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Requirement_Retriev" +
            "eStepsResponse")]
        System.IAsyncResult BeginRequirement_RetrieveSteps(int requirementId, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRequirementStep[] EndRequirement_RetrieveSteps(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Requirement_Retriev" +
            "eStepById", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Requirement_Retriev" +
            "eStepByIdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Requirement_Retriev" +
            "eStepByIdServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRequirementStep Requirement_RetrieveStepById(int requirementStepId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Requirement_Retriev" +
            "eStepById", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Requirement_Retriev" +
            "eStepByIdResponse")]
        System.IAsyncResult BeginRequirement_RetrieveStepById(int requirementStepId, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRequirementStep EndRequirement_RetrieveStepById(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Requirement_AddStep" +
            "", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Requirement_AddStep" +
            "Response")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Requirement_AddStep" +
            "ServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v5_0")]
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRequirementStep Requirement_AddStep(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRequirementStep remoteRequirementStep, System.Nullable<int> existingRequirementStepId, System.Nullable<int> creatorId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Requirement_AddStep" +
            "", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v5.0/ISoapService/Requirement_AddStep" +
            "Response")]
        System.IAsyncResult BeginRequirement_AddStep(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRequirementStep remoteRequirementStep, System.Nullable<int> existingRequirementStepId, System.Nullable<int> creatorId, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRequirementStep EndRequirement_AddStep(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISoapServiceChannel : Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ISoapService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Connection_AuthenticateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Connection_AuthenticateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Connection_Authenticate2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Connection_Authenticate2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Connection_Authenticate3CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Connection_Authenticate3CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Connection_ConnectToProjectCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Connection_ConnectToProjectCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class System_GetProductNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public System_GetProductNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class System_GetServerDateTimeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public System_GetServerDateTimeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.DateTime Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.DateTime)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class System_GetWebServerUrlCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public System_GetWebServerUrlCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Component_RetrieveByIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Component_RetrieveByIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComponent Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComponent)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Component_CreateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Component_CreateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComponent Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComponent)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Build_RetrieveByReleaseIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Build_RetrieveByReleaseIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteBuild[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteBuild[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Build_RetrieveByIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Build_RetrieveByIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteBuild Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteBuild)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Build_CreateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Build_CreateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteBuild Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteBuild)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SourceCode_RetrieveBranchesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SourceCode_RetrieveBranchesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSourceCodeBranch[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSourceCodeBranch[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SourceCode_RetrieveFoldersByParentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SourceCode_RetrieveFoldersByParentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSourceCodeFolder[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSourceCodeFolder[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SourceCode_RetrieveFilesByFolderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SourceCode_RetrieveFilesByFolderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSourceCodeFile[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSourceCodeFile[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SourceCode_RetrieveFilesByRevisionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SourceCode_RetrieveFilesByRevisionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSourceCodeFile[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSourceCodeFile[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SourceCode_RetrieveFileByIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SourceCode_RetrieveFileByIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSourceCodeFile Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSourceCodeFile)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SourceCode_RetrieveFilesForArtifactCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SourceCode_RetrieveFilesForArtifactCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSourceCodeFile[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSourceCodeFile[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SourceCode_OpenFileByIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SourceCode_OpenFileByIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public byte[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SourceCode_RetrieveRevisionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SourceCode_RetrieveRevisionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSourceCodeRevision[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSourceCodeRevision[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SourceCode_RetrieveRevisionsForFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SourceCode_RetrieveRevisionsForFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSourceCodeRevision[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSourceCodeRevision[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SourceCode_RetrieveRevisionByIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SourceCode_RetrieveRevisionByIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSourceCodeRevision Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSourceCodeRevision)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SourceCode_RetrieveRevisionsForArtifactCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SourceCode_RetrieveRevisionsForArtifactCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSourceCodeRevision[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSourceCodeRevision[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SourceCode_RetrieveArtifactsForRevisionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SourceCode_RetrieveArtifactsForRevisionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteLinkedArtifact[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteLinkedArtifact[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Message_GetInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Message_GetInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteMessageInfo Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteMessageInfo)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Message_PostNewCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Message_PostNewCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public long Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Message_GetUnreadMessageSendersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Message_GetUnreadMessageSendersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteUserMessage[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteUserMessage[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Message_RetrieveUnreadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Message_RetrieveUnreadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteMessage[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteMessage[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class History_RetrieveForArtifactCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public History_RetrieveForArtifactCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteHistoryChange[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteHistoryChange[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class History_RetrieveByIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public History_RetrieveByIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteHistoryChangeSet Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteHistoryChangeSet)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Subscription_RetrieveForUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Subscription_RetrieveForUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteArtifactSubscription[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteArtifactSubscription[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Subscription_RetrieveForArtifactCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Subscription_RetrieveForArtifactCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteArtifactSubscription[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteArtifactSubscription[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SavedFilter_RetrieveForUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SavedFilter_RetrieveForUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSavedFilter[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSavedFilter[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class System_GetProductVersionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public System_GetProductVersionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteVersion Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteVersion)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class System_GetSettingsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public System_GetSettingsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSetting[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSetting[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class System_GetArtifactUrlCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public System_GetArtifactUrlCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class System_GetProjectIdForArtifactCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public System_GetProjectIdForArtifactCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Task_CreateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Task_CreateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTask Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTask)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Task_RetrieveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Task_RetrieveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTask[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTask[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Task_RetrieveByIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Task_RetrieveByIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTask Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTask)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Task_RetrieveForOwnerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Task_RetrieveForOwnerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTask[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTask[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Task_RetrieveNewCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Task_RetrieveNewCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTask[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTask[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Task_CountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Task_CountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public long Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Task_RetrieveCommentsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Task_RetrieveCommentsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComment[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComment[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Task_CreateCommentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Task_CreateCommentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComment Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComment)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Task_RetrieveStatusesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Task_RetrieveStatusesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTaskStatus[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTaskStatus[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Task_RetrieveTypesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Task_RetrieveTypesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTaskType[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTaskType[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Task_RetrieveWorkflowFieldsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Task_RetrieveWorkflowFieldsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteWorkflowField[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteWorkflowField[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Task_RetrieveWorkflowTransitionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Task_RetrieveWorkflowTransitionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteWorkflowTransition[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteWorkflowTransition[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Task_RetrieveWorkflowCustomPropertiesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Task_RetrieveWorkflowCustomPropertiesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteWorkflowCustomProperty[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteWorkflowCustomProperty[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Task_RetrieveFoldersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Task_RetrieveFoldersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTaskFolder[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTaskFolder[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Task_RetrieveFoldersByParentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Task_RetrieveFoldersByParentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTaskFolder[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTaskFolder[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Task_CreateFolderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Task_CreateFolderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTaskFolder Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTaskFolder)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Task_RetrieveFolderByIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Task_RetrieveFolderByIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTaskFolder Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTaskFolder)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TestCase_CreateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TestCase_CreateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestCase Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestCase)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TestCase_CreateFolderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TestCase_CreateFolderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestCaseFolder Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestCaseFolder)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TestCase_RetrieveByIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TestCase_RetrieveByIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestCase Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestCase)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TestCase_RetrieveFolderByIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TestCase_RetrieveFolderByIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestCaseFolder Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestCaseFolder)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TestCase_AddParameterCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TestCase_AddParameterCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestCaseParameter Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestCaseParameter)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TestCase_CreateParameterTokenCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TestCase_CreateParameterTokenCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TestCase_RetrieveParametersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TestCase_RetrieveParametersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestCaseParameter[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestCaseParameter[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TestCase_RetrieveStepParametersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TestCase_RetrieveStepParametersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestStepParameter[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestStepParameter[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TestCase_RetrieveStepsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TestCase_RetrieveStepsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestStep[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestStep[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TestCase_RetrieveStepByIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TestCase_RetrieveStepByIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestStep Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestStep)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TestCase_AddStepCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TestCase_AddStepCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestStep Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestStep)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TestCase_AddLinkCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TestCase_AddLinkCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TestCase_CountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TestCase_CountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public long Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TestCase_CountForFolderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TestCase_CountForFolderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public long Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TestCase_RetrieveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TestCase_RetrieveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestCase[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestCase[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TestCase_RetrieveByFolderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TestCase_RetrieveByFolderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestCase[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestCase[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TestCase_RetrieveByTestSetIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TestCase_RetrieveByTestSetIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestCase[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestCase[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TestCase_RetrieveForOwnerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TestCase_RetrieveForOwnerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestCase[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestCase[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TestCase_RetrieveFoldersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TestCase_RetrieveFoldersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestCaseFolder[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestCaseFolder[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TestCase_RetrieveFoldersByParentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TestCase_RetrieveFoldersByParentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestCaseFolder[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestCaseFolder[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TestCase_RetrieveCommentsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TestCase_RetrieveCommentsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComment[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComment[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TestCase_CreateCommentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TestCase_CreateCommentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComment Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComment)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TestCase_RetrieveStatusesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TestCase_RetrieveStatusesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestCaseStatus[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestCaseStatus[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TestCase_RetrieveTypesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TestCase_RetrieveTypesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestCaseType[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestCaseType[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TestCase_RetrieveWorkflowFieldsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TestCase_RetrieveWorkflowFieldsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteWorkflowField[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteWorkflowField[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TestCase_RetrieveWorkflowTransitionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TestCase_RetrieveWorkflowTransitionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteWorkflowTransition[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteWorkflowTransition[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TestCase_RetrieveWorkflowCustomPropertiesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TestCase_RetrieveWorkflowCustomPropertiesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteWorkflowCustomProperty[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteWorkflowCustomProperty[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TestRun_CreateFromTestCasesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TestRun_CreateFromTestCasesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteManualTestRun[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteManualTestRun[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TestRun_CountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TestRun_CountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public long Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TestRun_CreateFromTestSetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TestRun_CreateFromTestSetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteManualTestRun[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteManualTestRun[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TestRun_CreateForAutomationHostCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TestRun_CreateForAutomationHostCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAutomatedTestRun[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAutomatedTestRun[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TestRun_CreateForAutomatedTestSetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TestRun_CreateForAutomatedTestSetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAutomatedTestRun[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAutomatedTestRun[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TestRun_RecordAutomated1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TestRun_RecordAutomated1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAutomatedTestRun Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAutomatedTestRun)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TestRun_RecordAutomated2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TestRun_RecordAutomated2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TestRun_RecordAutomated3CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TestRun_RecordAutomated3CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAutomatedTestRun[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAutomatedTestRun[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TestRun_RetrieveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TestRun_RetrieveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestRun[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestRun[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TestRun_RetrieveManualCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TestRun_RetrieveManualCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteManualTestRun[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteManualTestRun[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TestRun_RetrieveAutomatedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TestRun_RetrieveAutomatedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAutomatedTestRun[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAutomatedTestRun[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TestRun_RetrieveByIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TestRun_RetrieveByIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestRun Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestRun)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TestRun_RetrieveByTestCaseIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TestRun_RetrieveByTestCaseIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestRun[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestRun[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TestRun_RetrieveAutomatedByIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TestRun_RetrieveAutomatedByIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAutomatedTestRun Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAutomatedTestRun)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TestRun_RetrieveManualByIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TestRun_RetrieveManualByIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteManualTestRun Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteManualTestRun)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TestRun_SaveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TestRun_SaveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteManualTestRun[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteManualTestRun[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TestSet_AddTestMappingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TestSet_AddTestMappingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestSetTestCaseMapping[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestSetTestCaseMapping[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TestSet_RetrieveTestCaseMappingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TestSet_RetrieveTestCaseMappingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestSetTestCaseMapping[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestSetTestCaseMapping[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TestSet_CreateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TestSet_CreateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestSet Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestSet)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TestSet_CreateFolderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TestSet_CreateFolderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestSetFolder Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestSetFolder)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TestSet_CountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TestSet_CountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public long Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TestSet_CountForFolderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TestSet_CountForFolderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public long Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TestSet_RetrieveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TestSet_RetrieveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestSet[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestSet[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TestSet_RetrieveByFolderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TestSet_RetrieveByFolderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestSet[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestSet[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TestSet_RetrieveByIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TestSet_RetrieveByIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestSet Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestSet)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TestSet_RetrieveFolderByIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TestSet_RetrieveFolderByIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestSetFolder Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestSetFolder)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TestSet_RetrieveFoldersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TestSet_RetrieveFoldersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestSetFolder[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestSetFolder[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TestSet_RetrieveFoldersByParentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TestSet_RetrieveFoldersByParentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestSetFolder[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestSetFolder[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TestSet_RetrieveForOwnerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TestSet_RetrieveForOwnerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestSet[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestSet[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TestSet_RetrieveCommentsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TestSet_RetrieveCommentsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComment[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComment[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TestSet_CreateCommentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TestSet_CreateCommentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComment Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComment)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TestSet_RetrieveParametersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TestSet_RetrieveParametersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestSetParameter[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestSetParameter[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TestSet_RetrieveTestCaseParametersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TestSet_RetrieveTestCaseParametersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestSetTestCaseParameter[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestSetTestCaseParameter[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TestConfiguration_RetrieveForTestSetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TestConfiguration_RetrieveForTestSetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestConfigurationSet Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestConfigurationSet)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TestConfiguration_RetrieveSetByIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TestConfiguration_RetrieveSetByIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestConfigurationSet Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestConfigurationSet)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TestConfiguration_RetrieveSetsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TestConfiguration_RetrieveSetsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestConfigurationSet[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestConfigurationSet[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class User_CreateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public User_CreateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteUser Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteUser)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class User_RetrieveByIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public User_RetrieveByIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteUser Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteUser)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class User_RetrieveByUserNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public User_RetrieveByUserNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteUser Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteUser)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class User_RetrieveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public User_RetrieveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteUser[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteUser[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class User_RetrieveContactsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public User_RetrieveContactsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteUser[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteUser[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AutomationHost_RetrieveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AutomationHost_RetrieveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAutomationHost[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAutomationHost[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AutomationHost_RetrieveByIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AutomationHost_RetrieveByIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAutomationHost Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAutomationHost)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AutomationHost_RetrieveByTokenCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AutomationHost_RetrieveByTokenCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAutomationHost Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAutomationHost)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AutomationHost_CreateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AutomationHost_CreateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAutomationHost Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAutomationHost)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AutomationEngine_RetrieveByTokenCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AutomationEngine_RetrieveByTokenCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAutomationEngine Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAutomationEngine)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AutomationEngine_RetrieveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AutomationEngine_RetrieveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAutomationEngine[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAutomationEngine[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AutomationEngine_CreateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AutomationEngine_CreateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAutomationEngine Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAutomationEngine)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AutomationEngine_RetrieveByIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AutomationEngine_RetrieveByIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAutomationEngine Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAutomationEngine)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Component_RetrieveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Component_RetrieveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComponent[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComponent[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DataSyncSystem_RetrieveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DataSyncSystem_RetrieveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDataSyncSystem[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDataSyncSystem[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DataSyncSystem_RetrieveByIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DataSyncSystem_RetrieveByIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDataSyncSystem Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDataSyncSystem)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DataSyncSystem_CreateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DataSyncSystem_CreateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDataSyncSystem Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDataSyncSystem)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CustomProperty_RetrieveForArtifactTypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CustomProperty_RetrieveForArtifactTypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteCustomProperty[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteCustomProperty[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CustomProperty_AddCustomListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CustomProperty_AddCustomListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteCustomList Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteCustomList)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CustomProperty_AddCustomListValueCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CustomProperty_AddCustomListValueCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteCustomListValue Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteCustomListValue)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CustomProperty_AddDefinitionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CustomProperty_AddDefinitionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteCustomProperty Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteCustomProperty)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CustomProperty_RetrieveCustomListByIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CustomProperty_RetrieveCustomListByIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteCustomList Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteCustomList)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CustomProperty_RetrieveCustomListsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CustomProperty_RetrieveCustomListsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteCustomList[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteCustomList[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DataMapping_RetrieveArtifactMappingsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DataMapping_RetrieveArtifactMappingsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDataMapping[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDataMapping[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DataMapping_RetrieveCustomPropertyMappingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DataMapping_RetrieveCustomPropertyMappingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDataMapping Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDataMapping)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DataMapping_RetrieveCustomPropertyValueMappingsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DataMapping_RetrieveCustomPropertyValueMappingsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDataMapping[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDataMapping[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DataMapping_RetrieveFieldValueMappingsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DataMapping_RetrieveFieldValueMappingsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDataMapping[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDataMapping[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DataMapping_RetrieveProjectMappingsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DataMapping_RetrieveProjectMappingsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDataMapping[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDataMapping[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DataMapping_RetrieveUserMappingsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DataMapping_RetrieveUserMappingsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDataMapping[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDataMapping[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DataMapping_SearchArtifactMappingsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DataMapping_SearchArtifactMappingsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteProjectArtifact[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteProjectArtifact[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Document_OpenFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Document_OpenFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public byte[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Document_AddFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Document_AddFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDocument Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDocument)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Document_AddUrlCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Document_AddUrlCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDocument Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDocument)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Document_AddFileVersionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Document_AddFileVersionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDocumentVersion Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDocumentVersion)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Document_AddUrlVersionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Document_AddUrlVersionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDocumentVersion Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDocumentVersion)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Document_RetrieveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Document_RetrieveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDocument[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDocument[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Document_RetrieveForFolderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Document_RetrieveForFolderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDocument[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDocument[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Document_RetrieveForArtifactCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Document_RetrieveForArtifactCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDocument[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDocument[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Document_RetrieveByIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Document_RetrieveByIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDocument Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDocument)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Document_RetrieveTypesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Document_RetrieveTypesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDocumentType[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDocumentType[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Document_RetrieveFoldersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Document_RetrieveFoldersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDocumentFolder[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDocumentFolder[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Document_RetrieveFolderByIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Document_RetrieveFolderByIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDocumentFolder Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDocumentFolder)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Document_AddFolderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Document_AddFolderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDocumentFolder Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDocumentFolder)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Association_CreateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Association_CreateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAssociation Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAssociation)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Association_RetrieveForArtifactCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Association_RetrieveForArtifactCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAssociation[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAssociation[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Incident_AddPriorityCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Incident_AddPriorityCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncidentPriority Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncidentPriority)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Incident_CountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Incident_CountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public long Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Incident_AddCommentsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Incident_AddCommentsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComment[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComment[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Incident_AddSeverityCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Incident_AddSeverityCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncidentSeverity Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncidentSeverity)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Incident_AddStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Incident_AddStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncidentStatus Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncidentStatus)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Incident_AddTypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Incident_AddTypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncidentType Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncidentType)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Incident_CreateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Incident_CreateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncident Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncident)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Incident_RetrieveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Incident_RetrieveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncident[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncident[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Incident_RetrieveByIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Incident_RetrieveByIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncident Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncident)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Incident_RetrieveByTestCaseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Incident_RetrieveByTestCaseCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncident[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncident[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Incident_RetrieveByTestRunStepCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Incident_RetrieveByTestRunStepCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncident[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncident[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Incident_RetrieveByTestStepCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Incident_RetrieveByTestStepCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncident[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncident[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Incident_RetrieveForOwnerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Incident_RetrieveForOwnerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncident[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncident[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Incident_RetrieveNewCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Incident_RetrieveNewCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncident[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncident[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Incident_RetrievePrioritiesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Incident_RetrievePrioritiesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncidentPriority[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncidentPriority[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Incident_RetrieveCommentsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Incident_RetrieveCommentsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComment[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComment[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Incident_RetrieveSeveritiesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Incident_RetrieveSeveritiesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncidentSeverity[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncidentSeverity[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Incident_RetrieveStatusesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Incident_RetrieveStatusesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncidentStatus[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncidentStatus[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Incident_RetrieveTypesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Incident_RetrieveTypesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncidentType[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncidentType[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Incident_RetrieveWorkflowFieldsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Incident_RetrieveWorkflowFieldsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteWorkflowField[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteWorkflowField[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Incident_RetrieveWorkflowTransitionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Incident_RetrieveWorkflowTransitionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteWorkflowTransition[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteWorkflowTransition[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Incident_RetrieveWorkflowCustomPropertiesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Incident_RetrieveWorkflowCustomPropertiesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteWorkflowCustomProperty[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteWorkflowCustomProperty[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Incident_RetrieveDefaultStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Incident_RetrieveDefaultStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncidentStatus Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncidentStatus)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Incident_RetrieveDefaultTypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Incident_RetrieveDefaultTypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncidentType Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncidentType)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Project_CreateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Project_CreateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteProject Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteProject)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Project_RetrieveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Project_RetrieveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteProject[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteProject[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Project_RetrieveByIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Project_RetrieveByIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteProject Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteProject)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Project_RetrieveUserMembershipCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Project_RetrieveUserMembershipCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteProjectUser[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteProjectUser[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ProjectRole_RetrieveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ProjectRole_RetrieveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteProjectRole[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteProjectRole[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Release_CountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Release_CountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public long Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Release_CreateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Release_CreateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRelease Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRelease)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Release_RetrieveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Release_RetrieveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRelease[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRelease[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Release_Retrieve2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Release_Retrieve2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRelease[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRelease[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Release_RetrieveByIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Release_RetrieveByIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRelease Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRelease)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Release_RetrieveCommentsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Release_RetrieveCommentsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComment[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComment[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Release_RetrieveTestMappingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Release_RetrieveTestMappingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteReleaseTestCaseMapping[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteReleaseTestCaseMapping[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Release_CreateCommentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Release_CreateCommentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComment Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComment)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Release_RetrieveStatusesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Release_RetrieveStatusesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteReleaseStatus[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteReleaseStatus[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Release_RetrieveTypesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Release_RetrieveTypesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteReleaseType[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteReleaseType[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Release_RetrieveWorkflowFieldsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Release_RetrieveWorkflowFieldsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteWorkflowField[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteWorkflowField[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Release_RetrieveWorkflowTransitionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Release_RetrieveWorkflowTransitionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteWorkflowTransition[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteWorkflowTransition[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Release_RetrieveWorkflowCustomPropertiesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Release_RetrieveWorkflowCustomPropertiesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteWorkflowCustomProperty[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteWorkflowCustomProperty[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Requirement_CountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Requirement_CountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public long Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Requirement_Create1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Requirement_Create1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRequirement Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRequirement)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Requirement_Create2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Requirement_Create2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRequirement Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRequirement)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Requirement_RetrieveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Requirement_RetrieveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRequirement[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRequirement[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Requirement_RetrieveByIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Requirement_RetrieveByIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRequirement Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRequirement)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Requirement_RetrieveForOwnerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Requirement_RetrieveForOwnerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRequirement[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRequirement[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Requirement_RetrieveTestCoverageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Requirement_RetrieveTestCoverageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRequirementTestCaseMapping[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRequirementTestCaseMapping[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Requirement_RetrieveCommentsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Requirement_RetrieveCommentsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComment[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComment[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Requirement_CreateCommentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Requirement_CreateCommentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComment Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComment)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Requirement_RetrieveStatusesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Requirement_RetrieveStatusesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRequirementStatus[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRequirementStatus[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Requirement_RetrieveTypesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Requirement_RetrieveTypesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRequirementType[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRequirementType[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Requirement_RetrieveWorkflowFieldsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Requirement_RetrieveWorkflowFieldsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteWorkflowField[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteWorkflowField[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Requirement_RetrieveWorkflowTransitionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Requirement_RetrieveWorkflowTransitionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteWorkflowTransition[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteWorkflowTransition[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Requirement_RetrieveWorkflowCustomPropertiesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Requirement_RetrieveWorkflowCustomPropertiesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteWorkflowCustomProperty[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteWorkflowCustomProperty[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Requirement_RetrieveStepsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Requirement_RetrieveStepsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRequirementStep[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRequirementStep[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Requirement_RetrieveStepByIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Requirement_RetrieveStepByIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRequirementStep Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRequirementStep)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Requirement_AddStepCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Requirement_AddStepCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRequirementStep Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRequirementStep)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SoapServiceClient : System.ServiceModel.ClientBase<Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ISoapService>, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.ISoapService {
        
        private BeginOperationDelegate onBeginConnection_AuthenticateDelegate;
        
        private EndOperationDelegate onEndConnection_AuthenticateDelegate;
        
        private System.Threading.SendOrPostCallback onConnection_AuthenticateCompletedDelegate;
        
        private BeginOperationDelegate onBeginConnection_Authenticate2Delegate;
        
        private EndOperationDelegate onEndConnection_Authenticate2Delegate;
        
        private System.Threading.SendOrPostCallback onConnection_Authenticate2CompletedDelegate;
        
        private BeginOperationDelegate onBeginConnection_Authenticate3Delegate;
        
        private EndOperationDelegate onEndConnection_Authenticate3Delegate;
        
        private System.Threading.SendOrPostCallback onConnection_Authenticate3CompletedDelegate;
        
        private BeginOperationDelegate onBeginConnection_ConnectToProjectDelegate;
        
        private EndOperationDelegate onEndConnection_ConnectToProjectDelegate;
        
        private System.Threading.SendOrPostCallback onConnection_ConnectToProjectCompletedDelegate;
        
        private BeginOperationDelegate onBeginConnection_DisconnectDelegate;
        
        private EndOperationDelegate onEndConnection_DisconnectDelegate;
        
        private System.Threading.SendOrPostCallback onConnection_DisconnectCompletedDelegate;
        
        private BeginOperationDelegate onBeginSystem_GetProductNameDelegate;
        
        private EndOperationDelegate onEndSystem_GetProductNameDelegate;
        
        private System.Threading.SendOrPostCallback onSystem_GetProductNameCompletedDelegate;
        
        private BeginOperationDelegate onBeginSystem_GetServerDateTimeDelegate;
        
        private EndOperationDelegate onEndSystem_GetServerDateTimeDelegate;
        
        private System.Threading.SendOrPostCallback onSystem_GetServerDateTimeCompletedDelegate;
        
        private BeginOperationDelegate onBeginSystem_GetWebServerUrlDelegate;
        
        private EndOperationDelegate onEndSystem_GetWebServerUrlDelegate;
        
        private System.Threading.SendOrPostCallback onSystem_GetWebServerUrlCompletedDelegate;
        
        private BeginOperationDelegate onBeginComponent_RetrieveByIdDelegate;
        
        private EndOperationDelegate onEndComponent_RetrieveByIdDelegate;
        
        private System.Threading.SendOrPostCallback onComponent_RetrieveByIdCompletedDelegate;
        
        private BeginOperationDelegate onBeginComponent_CreateDelegate;
        
        private EndOperationDelegate onEndComponent_CreateDelegate;
        
        private System.Threading.SendOrPostCallback onComponent_CreateCompletedDelegate;
        
        private BeginOperationDelegate onBeginComponent_UpdateDelegate;
        
        private EndOperationDelegate onEndComponent_UpdateDelegate;
        
        private System.Threading.SendOrPostCallback onComponent_UpdateCompletedDelegate;
        
        private BeginOperationDelegate onBeginComponent_DeleteDelegate;
        
        private EndOperationDelegate onEndComponent_DeleteDelegate;
        
        private System.Threading.SendOrPostCallback onComponent_DeleteCompletedDelegate;
        
        private BeginOperationDelegate onBeginComponent_UndeleteDelegate;
        
        private EndOperationDelegate onEndComponent_UndeleteDelegate;
        
        private System.Threading.SendOrPostCallback onComponent_UndeleteCompletedDelegate;
        
        private BeginOperationDelegate onBeginBuild_RetrieveByReleaseIdDelegate;
        
        private EndOperationDelegate onEndBuild_RetrieveByReleaseIdDelegate;
        
        private System.Threading.SendOrPostCallback onBuild_RetrieveByReleaseIdCompletedDelegate;
        
        private BeginOperationDelegate onBeginBuild_RetrieveByIdDelegate;
        
        private EndOperationDelegate onEndBuild_RetrieveByIdDelegate;
        
        private System.Threading.SendOrPostCallback onBuild_RetrieveByIdCompletedDelegate;
        
        private BeginOperationDelegate onBeginBuild_CreateDelegate;
        
        private EndOperationDelegate onEndBuild_CreateDelegate;
        
        private System.Threading.SendOrPostCallback onBuild_CreateCompletedDelegate;
        
        private BeginOperationDelegate onBeginSourceCode_RetrieveBranchesDelegate;
        
        private EndOperationDelegate onEndSourceCode_RetrieveBranchesDelegate;
        
        private System.Threading.SendOrPostCallback onSourceCode_RetrieveBranchesCompletedDelegate;
        
        private BeginOperationDelegate onBeginSourceCode_RetrieveFoldersByParentDelegate;
        
        private EndOperationDelegate onEndSourceCode_RetrieveFoldersByParentDelegate;
        
        private System.Threading.SendOrPostCallback onSourceCode_RetrieveFoldersByParentCompletedDelegate;
        
        private BeginOperationDelegate onBeginSourceCode_RetrieveFilesByFolderDelegate;
        
        private EndOperationDelegate onEndSourceCode_RetrieveFilesByFolderDelegate;
        
        private System.Threading.SendOrPostCallback onSourceCode_RetrieveFilesByFolderCompletedDelegate;
        
        private BeginOperationDelegate onBeginSourceCode_RetrieveFilesByRevisionDelegate;
        
        private EndOperationDelegate onEndSourceCode_RetrieveFilesByRevisionDelegate;
        
        private System.Threading.SendOrPostCallback onSourceCode_RetrieveFilesByRevisionCompletedDelegate;
        
        private BeginOperationDelegate onBeginSourceCode_RetrieveFileByIdDelegate;
        
        private EndOperationDelegate onEndSourceCode_RetrieveFileByIdDelegate;
        
        private System.Threading.SendOrPostCallback onSourceCode_RetrieveFileByIdCompletedDelegate;
        
        private BeginOperationDelegate onBeginSourceCode_RetrieveFilesForArtifactDelegate;
        
        private EndOperationDelegate onEndSourceCode_RetrieveFilesForArtifactDelegate;
        
        private System.Threading.SendOrPostCallback onSourceCode_RetrieveFilesForArtifactCompletedDelegate;
        
        private BeginOperationDelegate onBeginSourceCode_OpenFileByIdDelegate;
        
        private EndOperationDelegate onEndSourceCode_OpenFileByIdDelegate;
        
        private System.Threading.SendOrPostCallback onSourceCode_OpenFileByIdCompletedDelegate;
        
        private BeginOperationDelegate onBeginSourceCode_RetrieveRevisionsDelegate;
        
        private EndOperationDelegate onEndSourceCode_RetrieveRevisionsDelegate;
        
        private System.Threading.SendOrPostCallback onSourceCode_RetrieveRevisionsCompletedDelegate;
        
        private BeginOperationDelegate onBeginSourceCode_RetrieveRevisionsForFileDelegate;
        
        private EndOperationDelegate onEndSourceCode_RetrieveRevisionsForFileDelegate;
        
        private System.Threading.SendOrPostCallback onSourceCode_RetrieveRevisionsForFileCompletedDelegate;
        
        private BeginOperationDelegate onBeginSourceCode_RetrieveRevisionByIdDelegate;
        
        private EndOperationDelegate onEndSourceCode_RetrieveRevisionByIdDelegate;
        
        private System.Threading.SendOrPostCallback onSourceCode_RetrieveRevisionByIdCompletedDelegate;
        
        private BeginOperationDelegate onBeginSourceCode_RetrieveRevisionsForArtifactDelegate;
        
        private EndOperationDelegate onEndSourceCode_RetrieveRevisionsForArtifactDelegate;
        
        private System.Threading.SendOrPostCallback onSourceCode_RetrieveRevisionsForArtifactCompletedDelegate;
        
        private BeginOperationDelegate onBeginSourceCode_RetrieveArtifactsForRevisionDelegate;
        
        private EndOperationDelegate onEndSourceCode_RetrieveArtifactsForRevisionDelegate;
        
        private System.Threading.SendOrPostCallback onSourceCode_RetrieveArtifactsForRevisionCompletedDelegate;
        
        private BeginOperationDelegate onBeginMessage_GetInfoDelegate;
        
        private EndOperationDelegate onEndMessage_GetInfoDelegate;
        
        private System.Threading.SendOrPostCallback onMessage_GetInfoCompletedDelegate;
        
        private BeginOperationDelegate onBeginMessage_PostNewDelegate;
        
        private EndOperationDelegate onEndMessage_PostNewDelegate;
        
        private System.Threading.SendOrPostCallback onMessage_PostNewCompletedDelegate;
        
        private BeginOperationDelegate onBeginMessage_MarkAllAsReadDelegate;
        
        private EndOperationDelegate onEndMessage_MarkAllAsReadDelegate;
        
        private System.Threading.SendOrPostCallback onMessage_MarkAllAsReadCompletedDelegate;
        
        private BeginOperationDelegate onBeginMessage_GetUnreadMessageSendersDelegate;
        
        private EndOperationDelegate onEndMessage_GetUnreadMessageSendersDelegate;
        
        private System.Threading.SendOrPostCallback onMessage_GetUnreadMessageSendersCompletedDelegate;
        
        private BeginOperationDelegate onBeginMessage_RetrieveUnreadDelegate;
        
        private EndOperationDelegate onEndMessage_RetrieveUnreadDelegate;
        
        private System.Threading.SendOrPostCallback onMessage_RetrieveUnreadCompletedDelegate;
        
        private BeginOperationDelegate onBeginHistory_RetrieveForArtifactDelegate;
        
        private EndOperationDelegate onEndHistory_RetrieveForArtifactDelegate;
        
        private System.Threading.SendOrPostCallback onHistory_RetrieveForArtifactCompletedDelegate;
        
        private BeginOperationDelegate onBeginHistory_RetrieveByIdDelegate;
        
        private EndOperationDelegate onEndHistory_RetrieveByIdDelegate;
        
        private System.Threading.SendOrPostCallback onHistory_RetrieveByIdCompletedDelegate;
        
        private BeginOperationDelegate onBeginSubscription_SubscribeToArtifactDelegate;
        
        private EndOperationDelegate onEndSubscription_SubscribeToArtifactDelegate;
        
        private System.Threading.SendOrPostCallback onSubscription_SubscribeToArtifactCompletedDelegate;
        
        private BeginOperationDelegate onBeginSubscription_UnsubscribeFromArtifactDelegate;
        
        private EndOperationDelegate onEndSubscription_UnsubscribeFromArtifactDelegate;
        
        private System.Threading.SendOrPostCallback onSubscription_UnsubscribeFromArtifactCompletedDelegate;
        
        private BeginOperationDelegate onBeginSubscription_RetrieveForUserDelegate;
        
        private EndOperationDelegate onEndSubscription_RetrieveForUserDelegate;
        
        private System.Threading.SendOrPostCallback onSubscription_RetrieveForUserCompletedDelegate;
        
        private BeginOperationDelegate onBeginSubscription_RetrieveForArtifactDelegate;
        
        private EndOperationDelegate onEndSubscription_RetrieveForArtifactDelegate;
        
        private System.Threading.SendOrPostCallback onSubscription_RetrieveForArtifactCompletedDelegate;
        
        private BeginOperationDelegate onBeginSavedFilter_RetrieveForUserDelegate;
        
        private EndOperationDelegate onEndSavedFilter_RetrieveForUserDelegate;
        
        private System.Threading.SendOrPostCallback onSavedFilter_RetrieveForUserCompletedDelegate;
        
        private BeginOperationDelegate onBeginRequirement_UpdateStepDelegate;
        
        private EndOperationDelegate onEndRequirement_UpdateStepDelegate;
        
        private System.Threading.SendOrPostCallback onRequirement_UpdateStepCompletedDelegate;
        
        private BeginOperationDelegate onBeginRequirement_MoveStepDelegate;
        
        private EndOperationDelegate onEndRequirement_MoveStepDelegate;
        
        private System.Threading.SendOrPostCallback onRequirement_MoveStepCompletedDelegate;
        
        private BeginOperationDelegate onBeginRequirement_DeleteStepDelegate;
        
        private EndOperationDelegate onEndRequirement_DeleteStepDelegate;
        
        private System.Threading.SendOrPostCallback onRequirement_DeleteStepCompletedDelegate;
        
        private BeginOperationDelegate onBeginSystem_GetProductVersionDelegate;
        
        private EndOperationDelegate onEndSystem_GetProductVersionDelegate;
        
        private System.Threading.SendOrPostCallback onSystem_GetProductVersionCompletedDelegate;
        
        private BeginOperationDelegate onBeginSystem_GetSettingsDelegate;
        
        private EndOperationDelegate onEndSystem_GetSettingsDelegate;
        
        private System.Threading.SendOrPostCallback onSystem_GetSettingsCompletedDelegate;
        
        private BeginOperationDelegate onBeginSystem_GetArtifactUrlDelegate;
        
        private EndOperationDelegate onEndSystem_GetArtifactUrlDelegate;
        
        private System.Threading.SendOrPostCallback onSystem_GetArtifactUrlCompletedDelegate;
        
        private BeginOperationDelegate onBeginSystem_GetProjectIdForArtifactDelegate;
        
        private EndOperationDelegate onEndSystem_GetProjectIdForArtifactDelegate;
        
        private System.Threading.SendOrPostCallback onSystem_GetProjectIdForArtifactCompletedDelegate;
        
        private BeginOperationDelegate onBeginTask_CreateDelegate;
        
        private EndOperationDelegate onEndTask_CreateDelegate;
        
        private System.Threading.SendOrPostCallback onTask_CreateCompletedDelegate;
        
        private BeginOperationDelegate onBeginTask_RetrieveDelegate;
        
        private EndOperationDelegate onEndTask_RetrieveDelegate;
        
        private System.Threading.SendOrPostCallback onTask_RetrieveCompletedDelegate;
        
        private BeginOperationDelegate onBeginTask_RetrieveByIdDelegate;
        
        private EndOperationDelegate onEndTask_RetrieveByIdDelegate;
        
        private System.Threading.SendOrPostCallback onTask_RetrieveByIdCompletedDelegate;
        
        private BeginOperationDelegate onBeginTask_RetrieveForOwnerDelegate;
        
        private EndOperationDelegate onEndTask_RetrieveForOwnerDelegate;
        
        private System.Threading.SendOrPostCallback onTask_RetrieveForOwnerCompletedDelegate;
        
        private BeginOperationDelegate onBeginTask_RetrieveNewDelegate;
        
        private EndOperationDelegate onEndTask_RetrieveNewDelegate;
        
        private System.Threading.SendOrPostCallback onTask_RetrieveNewCompletedDelegate;
        
        private BeginOperationDelegate onBeginTask_UpdateDelegate;
        
        private EndOperationDelegate onEndTask_UpdateDelegate;
        
        private System.Threading.SendOrPostCallback onTask_UpdateCompletedDelegate;
        
        private BeginOperationDelegate onBeginTask_CountDelegate;
        
        private EndOperationDelegate onEndTask_CountDelegate;
        
        private System.Threading.SendOrPostCallback onTask_CountCompletedDelegate;
        
        private BeginOperationDelegate onBeginTask_DeleteDelegate;
        
        private EndOperationDelegate onEndTask_DeleteDelegate;
        
        private System.Threading.SendOrPostCallback onTask_DeleteCompletedDelegate;
        
        private BeginOperationDelegate onBeginTask_RetrieveCommentsDelegate;
        
        private EndOperationDelegate onEndTask_RetrieveCommentsDelegate;
        
        private System.Threading.SendOrPostCallback onTask_RetrieveCommentsCompletedDelegate;
        
        private BeginOperationDelegate onBeginTask_CreateCommentDelegate;
        
        private EndOperationDelegate onEndTask_CreateCommentDelegate;
        
        private System.Threading.SendOrPostCallback onTask_CreateCommentCompletedDelegate;
        
        private BeginOperationDelegate onBeginTask_RetrieveStatusesDelegate;
        
        private EndOperationDelegate onEndTask_RetrieveStatusesDelegate;
        
        private System.Threading.SendOrPostCallback onTask_RetrieveStatusesCompletedDelegate;
        
        private BeginOperationDelegate onBeginTask_RetrieveTypesDelegate;
        
        private EndOperationDelegate onEndTask_RetrieveTypesDelegate;
        
        private System.Threading.SendOrPostCallback onTask_RetrieveTypesCompletedDelegate;
        
        private BeginOperationDelegate onBeginTask_RetrieveWorkflowFieldsDelegate;
        
        private EndOperationDelegate onEndTask_RetrieveWorkflowFieldsDelegate;
        
        private System.Threading.SendOrPostCallback onTask_RetrieveWorkflowFieldsCompletedDelegate;
        
        private BeginOperationDelegate onBeginTask_RetrieveWorkflowTransitionsDelegate;
        
        private EndOperationDelegate onEndTask_RetrieveWorkflowTransitionsDelegate;
        
        private System.Threading.SendOrPostCallback onTask_RetrieveWorkflowTransitionsCompletedDelegate;
        
        private BeginOperationDelegate onBeginTask_RetrieveWorkflowCustomPropertiesDelegate;
        
        private EndOperationDelegate onEndTask_RetrieveWorkflowCustomPropertiesDelegate;
        
        private System.Threading.SendOrPostCallback onTask_RetrieveWorkflowCustomPropertiesCompletedDelegate;
        
        private BeginOperationDelegate onBeginTask_RetrieveFoldersDelegate;
        
        private EndOperationDelegate onEndTask_RetrieveFoldersDelegate;
        
        private System.Threading.SendOrPostCallback onTask_RetrieveFoldersCompletedDelegate;
        
        private BeginOperationDelegate onBeginTask_RetrieveFoldersByParentDelegate;
        
        private EndOperationDelegate onEndTask_RetrieveFoldersByParentDelegate;
        
        private System.Threading.SendOrPostCallback onTask_RetrieveFoldersByParentCompletedDelegate;
        
        private BeginOperationDelegate onBeginTask_CreateFolderDelegate;
        
        private EndOperationDelegate onEndTask_CreateFolderDelegate;
        
        private System.Threading.SendOrPostCallback onTask_CreateFolderCompletedDelegate;
        
        private BeginOperationDelegate onBeginTask_RetrieveFolderByIdDelegate;
        
        private EndOperationDelegate onEndTask_RetrieveFolderByIdDelegate;
        
        private System.Threading.SendOrPostCallback onTask_RetrieveFolderByIdCompletedDelegate;
        
        private BeginOperationDelegate onBeginTask_DeleteFolderDelegate;
        
        private EndOperationDelegate onEndTask_DeleteFolderDelegate;
        
        private System.Threading.SendOrPostCallback onTask_DeleteFolderCompletedDelegate;
        
        private BeginOperationDelegate onBeginTask_UpdateFolderDelegate;
        
        private EndOperationDelegate onEndTask_UpdateFolderDelegate;
        
        private System.Threading.SendOrPostCallback onTask_UpdateFolderCompletedDelegate;
        
        private BeginOperationDelegate onBeginTestCase_CreateDelegate;
        
        private EndOperationDelegate onEndTestCase_CreateDelegate;
        
        private System.Threading.SendOrPostCallback onTestCase_CreateCompletedDelegate;
        
        private BeginOperationDelegate onBeginTestCase_CreateFolderDelegate;
        
        private EndOperationDelegate onEndTestCase_CreateFolderDelegate;
        
        private System.Threading.SendOrPostCallback onTestCase_CreateFolderCompletedDelegate;
        
        private BeginOperationDelegate onBeginTestCase_RetrieveByIdDelegate;
        
        private EndOperationDelegate onEndTestCase_RetrieveByIdDelegate;
        
        private System.Threading.SendOrPostCallback onTestCase_RetrieveByIdCompletedDelegate;
        
        private BeginOperationDelegate onBeginTestCase_RetrieveFolderByIdDelegate;
        
        private EndOperationDelegate onEndTestCase_RetrieveFolderByIdDelegate;
        
        private System.Threading.SendOrPostCallback onTestCase_RetrieveFolderByIdCompletedDelegate;
        
        private BeginOperationDelegate onBeginTestCase_UpdateDelegate;
        
        private EndOperationDelegate onEndTestCase_UpdateDelegate;
        
        private System.Threading.SendOrPostCallback onTestCase_UpdateCompletedDelegate;
        
        private BeginOperationDelegate onBeginTestCase_DeleteFolderDelegate;
        
        private EndOperationDelegate onEndTestCase_DeleteFolderDelegate;
        
        private System.Threading.SendOrPostCallback onTestCase_DeleteFolderCompletedDelegate;
        
        private BeginOperationDelegate onBeginTestCase_UpdateFolderDelegate;
        
        private EndOperationDelegate onEndTestCase_UpdateFolderDelegate;
        
        private System.Threading.SendOrPostCallback onTestCase_UpdateFolderCompletedDelegate;
        
        private BeginOperationDelegate onBeginTestCase_DeleteDelegate;
        
        private EndOperationDelegate onEndTestCase_DeleteDelegate;
        
        private System.Threading.SendOrPostCallback onTestCase_DeleteCompletedDelegate;
        
        private BeginOperationDelegate onBeginTestCase_AddParameterDelegate;
        
        private EndOperationDelegate onEndTestCase_AddParameterDelegate;
        
        private System.Threading.SendOrPostCallback onTestCase_AddParameterCompletedDelegate;
        
        private BeginOperationDelegate onBeginTestCase_CreateParameterTokenDelegate;
        
        private EndOperationDelegate onEndTestCase_CreateParameterTokenDelegate;
        
        private System.Threading.SendOrPostCallback onTestCase_CreateParameterTokenCompletedDelegate;
        
        private BeginOperationDelegate onBeginTestCase_RetrieveParametersDelegate;
        
        private EndOperationDelegate onEndTestCase_RetrieveParametersDelegate;
        
        private System.Threading.SendOrPostCallback onTestCase_RetrieveParametersCompletedDelegate;
        
        private BeginOperationDelegate onBeginTestCase_RetrieveStepParametersDelegate;
        
        private EndOperationDelegate onEndTestCase_RetrieveStepParametersDelegate;
        
        private System.Threading.SendOrPostCallback onTestCase_RetrieveStepParametersCompletedDelegate;
        
        private BeginOperationDelegate onBeginTestCase_RetrieveStepsDelegate;
        
        private EndOperationDelegate onEndTestCase_RetrieveStepsDelegate;
        
        private System.Threading.SendOrPostCallback onTestCase_RetrieveStepsCompletedDelegate;
        
        private BeginOperationDelegate onBeginTestCase_RetrieveStepByIdDelegate;
        
        private EndOperationDelegate onEndTestCase_RetrieveStepByIdDelegate;
        
        private System.Threading.SendOrPostCallback onTestCase_RetrieveStepByIdCompletedDelegate;
        
        private BeginOperationDelegate onBeginTestCase_MoveStepDelegate;
        
        private EndOperationDelegate onEndTestCase_MoveStepDelegate;
        
        private System.Threading.SendOrPostCallback onTestCase_MoveStepCompletedDelegate;
        
        private BeginOperationDelegate onBeginTestCase_DeleteStepDelegate;
        
        private EndOperationDelegate onEndTestCase_DeleteStepDelegate;
        
        private System.Threading.SendOrPostCallback onTestCase_DeleteStepCompletedDelegate;
        
        private BeginOperationDelegate onBeginTestCase_AddStepDelegate;
        
        private EndOperationDelegate onEndTestCase_AddStepDelegate;
        
        private System.Threading.SendOrPostCallback onTestCase_AddStepCompletedDelegate;
        
        private BeginOperationDelegate onBeginTestCase_UpdateStepDelegate;
        
        private EndOperationDelegate onEndTestCase_UpdateStepDelegate;
        
        private System.Threading.SendOrPostCallback onTestCase_UpdateStepCompletedDelegate;
        
        private BeginOperationDelegate onBeginTestCase_AddLinkDelegate;
        
        private EndOperationDelegate onEndTestCase_AddLinkDelegate;
        
        private System.Threading.SendOrPostCallback onTestCase_AddLinkCompletedDelegate;
        
        private BeginOperationDelegate onBeginTestCase_AddUpdateAutomationScriptDelegate;
        
        private EndOperationDelegate onEndTestCase_AddUpdateAutomationScriptDelegate;
        
        private System.Threading.SendOrPostCallback onTestCase_AddUpdateAutomationScriptCompletedDelegate;
        
        private BeginOperationDelegate onBeginTestCase_CountDelegate;
        
        private EndOperationDelegate onEndTestCase_CountDelegate;
        
        private System.Threading.SendOrPostCallback onTestCase_CountCompletedDelegate;
        
        private BeginOperationDelegate onBeginTestCase_CountForFolderDelegate;
        
        private EndOperationDelegate onEndTestCase_CountForFolderDelegate;
        
        private System.Threading.SendOrPostCallback onTestCase_CountForFolderCompletedDelegate;
        
        private BeginOperationDelegate onBeginTestCase_RetrieveDelegate;
        
        private EndOperationDelegate onEndTestCase_RetrieveDelegate;
        
        private System.Threading.SendOrPostCallback onTestCase_RetrieveCompletedDelegate;
        
        private BeginOperationDelegate onBeginTestCase_RetrieveByFolderDelegate;
        
        private EndOperationDelegate onEndTestCase_RetrieveByFolderDelegate;
        
        private System.Threading.SendOrPostCallback onTestCase_RetrieveByFolderCompletedDelegate;
        
        private BeginOperationDelegate onBeginTestCase_RetrieveByTestSetIdDelegate;
        
        private EndOperationDelegate onEndTestCase_RetrieveByTestSetIdDelegate;
        
        private System.Threading.SendOrPostCallback onTestCase_RetrieveByTestSetIdCompletedDelegate;
        
        private BeginOperationDelegate onBeginTestCase_RetrieveForOwnerDelegate;
        
        private EndOperationDelegate onEndTestCase_RetrieveForOwnerDelegate;
        
        private System.Threading.SendOrPostCallback onTestCase_RetrieveForOwnerCompletedDelegate;
        
        private BeginOperationDelegate onBeginTestCase_MoveDelegate;
        
        private EndOperationDelegate onEndTestCase_MoveDelegate;
        
        private System.Threading.SendOrPostCallback onTestCase_MoveCompletedDelegate;
        
        private BeginOperationDelegate onBeginTestCase_RetrieveFoldersDelegate;
        
        private EndOperationDelegate onEndTestCase_RetrieveFoldersDelegate;
        
        private System.Threading.SendOrPostCallback onTestCase_RetrieveFoldersCompletedDelegate;
        
        private BeginOperationDelegate onBeginTestCase_RetrieveFoldersByParentDelegate;
        
        private EndOperationDelegate onEndTestCase_RetrieveFoldersByParentDelegate;
        
        private System.Threading.SendOrPostCallback onTestCase_RetrieveFoldersByParentCompletedDelegate;
        
        private BeginOperationDelegate onBeginTestCase_RetrieveCommentsDelegate;
        
        private EndOperationDelegate onEndTestCase_RetrieveCommentsDelegate;
        
        private System.Threading.SendOrPostCallback onTestCase_RetrieveCommentsCompletedDelegate;
        
        private BeginOperationDelegate onBeginTestCase_CreateCommentDelegate;
        
        private EndOperationDelegate onEndTestCase_CreateCommentDelegate;
        
        private System.Threading.SendOrPostCallback onTestCase_CreateCommentCompletedDelegate;
        
        private BeginOperationDelegate onBeginTestCase_RetrieveStatusesDelegate;
        
        private EndOperationDelegate onEndTestCase_RetrieveStatusesDelegate;
        
        private System.Threading.SendOrPostCallback onTestCase_RetrieveStatusesCompletedDelegate;
        
        private BeginOperationDelegate onBeginTestCase_RetrieveTypesDelegate;
        
        private EndOperationDelegate onEndTestCase_RetrieveTypesDelegate;
        
        private System.Threading.SendOrPostCallback onTestCase_RetrieveTypesCompletedDelegate;
        
        private BeginOperationDelegate onBeginTestCase_RetrieveWorkflowFieldsDelegate;
        
        private EndOperationDelegate onEndTestCase_RetrieveWorkflowFieldsDelegate;
        
        private System.Threading.SendOrPostCallback onTestCase_RetrieveWorkflowFieldsCompletedDelegate;
        
        private BeginOperationDelegate onBeginTestCase_RetrieveWorkflowTransitionsDelegate;
        
        private EndOperationDelegate onEndTestCase_RetrieveWorkflowTransitionsDelegate;
        
        private System.Threading.SendOrPostCallback onTestCase_RetrieveWorkflowTransitionsCompletedDelegate;
        
        private BeginOperationDelegate onBeginTestCase_RetrieveWorkflowCustomPropertiesDelegate;
        
        private EndOperationDelegate onEndTestCase_RetrieveWorkflowCustomPropertiesDelegate;
        
        private System.Threading.SendOrPostCallback onTestCase_RetrieveWorkflowCustomPropertiesCompletedDelegate;
        
        private BeginOperationDelegate onBeginTestRun_CreateFromTestCasesDelegate;
        
        private EndOperationDelegate onEndTestRun_CreateFromTestCasesDelegate;
        
        private System.Threading.SendOrPostCallback onTestRun_CreateFromTestCasesCompletedDelegate;
        
        private BeginOperationDelegate onBeginTestRun_CountDelegate;
        
        private EndOperationDelegate onEndTestRun_CountDelegate;
        
        private System.Threading.SendOrPostCallback onTestRun_CountCompletedDelegate;
        
        private BeginOperationDelegate onBeginTestRun_CreateFromTestSetDelegate;
        
        private EndOperationDelegate onEndTestRun_CreateFromTestSetDelegate;
        
        private System.Threading.SendOrPostCallback onTestRun_CreateFromTestSetCompletedDelegate;
        
        private BeginOperationDelegate onBeginTestRun_DeleteDelegate;
        
        private EndOperationDelegate onEndTestRun_DeleteDelegate;
        
        private System.Threading.SendOrPostCallback onTestRun_DeleteCompletedDelegate;
        
        private BeginOperationDelegate onBeginTestRun_CreateForAutomationHostDelegate;
        
        private EndOperationDelegate onEndTestRun_CreateForAutomationHostDelegate;
        
        private System.Threading.SendOrPostCallback onTestRun_CreateForAutomationHostCompletedDelegate;
        
        private BeginOperationDelegate onBeginTestRun_CreateForAutomatedTestSetDelegate;
        
        private EndOperationDelegate onEndTestRun_CreateForAutomatedTestSetDelegate;
        
        private System.Threading.SendOrPostCallback onTestRun_CreateForAutomatedTestSetCompletedDelegate;
        
        private BeginOperationDelegate onBeginTestRun_RecordAutomated1Delegate;
        
        private EndOperationDelegate onEndTestRun_RecordAutomated1Delegate;
        
        private System.Threading.SendOrPostCallback onTestRun_RecordAutomated1CompletedDelegate;
        
        private BeginOperationDelegate onBeginTestRun_RecordAutomated2Delegate;
        
        private EndOperationDelegate onEndTestRun_RecordAutomated2Delegate;
        
        private System.Threading.SendOrPostCallback onTestRun_RecordAutomated2CompletedDelegate;
        
        private BeginOperationDelegate onBeginTestRun_RecordAutomated3Delegate;
        
        private EndOperationDelegate onEndTestRun_RecordAutomated3Delegate;
        
        private System.Threading.SendOrPostCallback onTestRun_RecordAutomated3CompletedDelegate;
        
        private BeginOperationDelegate onBeginTestRun_RetrieveDelegate;
        
        private EndOperationDelegate onEndTestRun_RetrieveDelegate;
        
        private System.Threading.SendOrPostCallback onTestRun_RetrieveCompletedDelegate;
        
        private BeginOperationDelegate onBeginTestRun_RetrieveManualDelegate;
        
        private EndOperationDelegate onEndTestRun_RetrieveManualDelegate;
        
        private System.Threading.SendOrPostCallback onTestRun_RetrieveManualCompletedDelegate;
        
        private BeginOperationDelegate onBeginTestRun_RetrieveAutomatedDelegate;
        
        private EndOperationDelegate onEndTestRun_RetrieveAutomatedDelegate;
        
        private System.Threading.SendOrPostCallback onTestRun_RetrieveAutomatedCompletedDelegate;
        
        private BeginOperationDelegate onBeginTestRun_RetrieveByIdDelegate;
        
        private EndOperationDelegate onEndTestRun_RetrieveByIdDelegate;
        
        private System.Threading.SendOrPostCallback onTestRun_RetrieveByIdCompletedDelegate;
        
        private BeginOperationDelegate onBeginTestRun_RetrieveByTestCaseIdDelegate;
        
        private EndOperationDelegate onEndTestRun_RetrieveByTestCaseIdDelegate;
        
        private System.Threading.SendOrPostCallback onTestRun_RetrieveByTestCaseIdCompletedDelegate;
        
        private BeginOperationDelegate onBeginTestRun_RetrieveAutomatedByIdDelegate;
        
        private EndOperationDelegate onEndTestRun_RetrieveAutomatedByIdDelegate;
        
        private System.Threading.SendOrPostCallback onTestRun_RetrieveAutomatedByIdCompletedDelegate;
        
        private BeginOperationDelegate onBeginTestRun_RetrieveManualByIdDelegate;
        
        private EndOperationDelegate onEndTestRun_RetrieveManualByIdDelegate;
        
        private System.Threading.SendOrPostCallback onTestRun_RetrieveManualByIdCompletedDelegate;
        
        private BeginOperationDelegate onBeginTestRun_SaveDelegate;
        
        private EndOperationDelegate onEndTestRun_SaveDelegate;
        
        private System.Threading.SendOrPostCallback onTestRun_SaveCompletedDelegate;
        
        private BeginOperationDelegate onBeginTestSet_AddTestMappingDelegate;
        
        private EndOperationDelegate onEndTestSet_AddTestMappingDelegate;
        
        private System.Threading.SendOrPostCallback onTestSet_AddTestMappingCompletedDelegate;
        
        private BeginOperationDelegate onBeginTestSet_RemoveTestMappingDelegate;
        
        private EndOperationDelegate onEndTestSet_RemoveTestMappingDelegate;
        
        private System.Threading.SendOrPostCallback onTestSet_RemoveTestMappingCompletedDelegate;
        
        private BeginOperationDelegate onBeginTestSet_RetrieveTestCaseMappingDelegate;
        
        private EndOperationDelegate onEndTestSet_RetrieveTestCaseMappingDelegate;
        
        private System.Threading.SendOrPostCallback onTestSet_RetrieveTestCaseMappingCompletedDelegate;
        
        private BeginOperationDelegate onBeginTestSet_CreateDelegate;
        
        private EndOperationDelegate onEndTestSet_CreateDelegate;
        
        private System.Threading.SendOrPostCallback onTestSet_CreateCompletedDelegate;
        
        private BeginOperationDelegate onBeginTestSet_CreateFolderDelegate;
        
        private EndOperationDelegate onEndTestSet_CreateFolderDelegate;
        
        private System.Threading.SendOrPostCallback onTestSet_CreateFolderCompletedDelegate;
        
        private BeginOperationDelegate onBeginTestSet_CountDelegate;
        
        private EndOperationDelegate onEndTestSet_CountDelegate;
        
        private System.Threading.SendOrPostCallback onTestSet_CountCompletedDelegate;
        
        private BeginOperationDelegate onBeginTestSet_CountForFolderDelegate;
        
        private EndOperationDelegate onEndTestSet_CountForFolderDelegate;
        
        private System.Threading.SendOrPostCallback onTestSet_CountForFolderCompletedDelegate;
        
        private BeginOperationDelegate onBeginTestSet_RetrieveDelegate;
        
        private EndOperationDelegate onEndTestSet_RetrieveDelegate;
        
        private System.Threading.SendOrPostCallback onTestSet_RetrieveCompletedDelegate;
        
        private BeginOperationDelegate onBeginTestSet_RetrieveByFolderDelegate;
        
        private EndOperationDelegate onEndTestSet_RetrieveByFolderDelegate;
        
        private System.Threading.SendOrPostCallback onTestSet_RetrieveByFolderCompletedDelegate;
        
        private BeginOperationDelegate onBeginTestSet_UpdateDelegate;
        
        private EndOperationDelegate onEndTestSet_UpdateDelegate;
        
        private System.Threading.SendOrPostCallback onTestSet_UpdateCompletedDelegate;
        
        private BeginOperationDelegate onBeginTestSet_DeleteDelegate;
        
        private EndOperationDelegate onEndTestSet_DeleteDelegate;
        
        private System.Threading.SendOrPostCallback onTestSet_DeleteCompletedDelegate;
        
        private BeginOperationDelegate onBeginTestSet_UpdateFolderDelegate;
        
        private EndOperationDelegate onEndTestSet_UpdateFolderDelegate;
        
        private System.Threading.SendOrPostCallback onTestSet_UpdateFolderCompletedDelegate;
        
        private BeginOperationDelegate onBeginTestSet_DeleteFolderDelegate;
        
        private EndOperationDelegate onEndTestSet_DeleteFolderDelegate;
        
        private System.Threading.SendOrPostCallback onTestSet_DeleteFolderCompletedDelegate;
        
        private BeginOperationDelegate onBeginTestSet_RetrieveByIdDelegate;
        
        private EndOperationDelegate onEndTestSet_RetrieveByIdDelegate;
        
        private System.Threading.SendOrPostCallback onTestSet_RetrieveByIdCompletedDelegate;
        
        private BeginOperationDelegate onBeginTestSet_RetrieveFolderByIdDelegate;
        
        private EndOperationDelegate onEndTestSet_RetrieveFolderByIdDelegate;
        
        private System.Threading.SendOrPostCallback onTestSet_RetrieveFolderByIdCompletedDelegate;
        
        private BeginOperationDelegate onBeginTestSet_RetrieveFoldersDelegate;
        
        private EndOperationDelegate onEndTestSet_RetrieveFoldersDelegate;
        
        private System.Threading.SendOrPostCallback onTestSet_RetrieveFoldersCompletedDelegate;
        
        private BeginOperationDelegate onBeginTestSet_RetrieveFoldersByParentDelegate;
        
        private EndOperationDelegate onEndTestSet_RetrieveFoldersByParentDelegate;
        
        private System.Threading.SendOrPostCallback onTestSet_RetrieveFoldersByParentCompletedDelegate;
        
        private BeginOperationDelegate onBeginTestSet_RetrieveForOwnerDelegate;
        
        private EndOperationDelegate onEndTestSet_RetrieveForOwnerDelegate;
        
        private System.Threading.SendOrPostCallback onTestSet_RetrieveForOwnerCompletedDelegate;
        
        private BeginOperationDelegate onBeginTestSet_MoveDelegate;
        
        private EndOperationDelegate onEndTestSet_MoveDelegate;
        
        private System.Threading.SendOrPostCallback onTestSet_MoveCompletedDelegate;
        
        private BeginOperationDelegate onBeginTestSet_RetrieveCommentsDelegate;
        
        private EndOperationDelegate onEndTestSet_RetrieveCommentsDelegate;
        
        private System.Threading.SendOrPostCallback onTestSet_RetrieveCommentsCompletedDelegate;
        
        private BeginOperationDelegate onBeginTestSet_CreateCommentDelegate;
        
        private EndOperationDelegate onEndTestSet_CreateCommentDelegate;
        
        private System.Threading.SendOrPostCallback onTestSet_CreateCommentCompletedDelegate;
        
        private BeginOperationDelegate onBeginTestSet_RetrieveParametersDelegate;
        
        private EndOperationDelegate onEndTestSet_RetrieveParametersDelegate;
        
        private System.Threading.SendOrPostCallback onTestSet_RetrieveParametersCompletedDelegate;
        
        private BeginOperationDelegate onBeginTestSet_RetrieveTestCaseParametersDelegate;
        
        private EndOperationDelegate onEndTestSet_RetrieveTestCaseParametersDelegate;
        
        private System.Threading.SendOrPostCallback onTestSet_RetrieveTestCaseParametersCompletedDelegate;
        
        private BeginOperationDelegate onBeginTestConfiguration_RetrieveForTestSetDelegate;
        
        private EndOperationDelegate onEndTestConfiguration_RetrieveForTestSetDelegate;
        
        private System.Threading.SendOrPostCallback onTestConfiguration_RetrieveForTestSetCompletedDelegate;
        
        private BeginOperationDelegate onBeginTestConfiguration_RetrieveSetByIdDelegate;
        
        private EndOperationDelegate onEndTestConfiguration_RetrieveSetByIdDelegate;
        
        private System.Threading.SendOrPostCallback onTestConfiguration_RetrieveSetByIdCompletedDelegate;
        
        private BeginOperationDelegate onBeginTestConfiguration_RetrieveSetsDelegate;
        
        private EndOperationDelegate onEndTestConfiguration_RetrieveSetsDelegate;
        
        private System.Threading.SendOrPostCallback onTestConfiguration_RetrieveSetsCompletedDelegate;
        
        private BeginOperationDelegate onBeginUser_CreateDelegate;
        
        private EndOperationDelegate onEndUser_CreateDelegate;
        
        private System.Threading.SendOrPostCallback onUser_CreateCompletedDelegate;
        
        private BeginOperationDelegate onBeginUser_RetrieveByIdDelegate;
        
        private EndOperationDelegate onEndUser_RetrieveByIdDelegate;
        
        private System.Threading.SendOrPostCallback onUser_RetrieveByIdCompletedDelegate;
        
        private BeginOperationDelegate onBeginUser_RetrieveByUserNameDelegate;
        
        private EndOperationDelegate onEndUser_RetrieveByUserNameDelegate;
        
        private System.Threading.SendOrPostCallback onUser_RetrieveByUserNameCompletedDelegate;
        
        private BeginOperationDelegate onBeginUser_DeleteDelegate;
        
        private EndOperationDelegate onEndUser_DeleteDelegate;
        
        private System.Threading.SendOrPostCallback onUser_DeleteCompletedDelegate;
        
        private BeginOperationDelegate onBeginUser_UpdateDelegate;
        
        private EndOperationDelegate onEndUser_UpdateDelegate;
        
        private System.Threading.SendOrPostCallback onUser_UpdateCompletedDelegate;
        
        private BeginOperationDelegate onBeginUser_RetrieveDelegate;
        
        private EndOperationDelegate onEndUser_RetrieveDelegate;
        
        private System.Threading.SendOrPostCallback onUser_RetrieveCompletedDelegate;
        
        private BeginOperationDelegate onBeginUser_RetrieveContactsDelegate;
        
        private EndOperationDelegate onEndUser_RetrieveContactsDelegate;
        
        private System.Threading.SendOrPostCallback onUser_RetrieveContactsCompletedDelegate;
        
        private BeginOperationDelegate onBeginUser_AddContactDelegate;
        
        private EndOperationDelegate onEndUser_AddContactDelegate;
        
        private System.Threading.SendOrPostCallback onUser_AddContactCompletedDelegate;
        
        private BeginOperationDelegate onBeginUser_RemoveContactDelegate;
        
        private EndOperationDelegate onEndUser_RemoveContactDelegate;
        
        private System.Threading.SendOrPostCallback onUser_RemoveContactCompletedDelegate;
        
        private BeginOperationDelegate onBeginAutomationHost_RetrieveDelegate;
        
        private EndOperationDelegate onEndAutomationHost_RetrieveDelegate;
        
        private System.Threading.SendOrPostCallback onAutomationHost_RetrieveCompletedDelegate;
        
        private BeginOperationDelegate onBeginAutomationHost_RetrieveByIdDelegate;
        
        private EndOperationDelegate onEndAutomationHost_RetrieveByIdDelegate;
        
        private System.Threading.SendOrPostCallback onAutomationHost_RetrieveByIdCompletedDelegate;
        
        private BeginOperationDelegate onBeginAutomationHost_RetrieveByTokenDelegate;
        
        private EndOperationDelegate onEndAutomationHost_RetrieveByTokenDelegate;
        
        private System.Threading.SendOrPostCallback onAutomationHost_RetrieveByTokenCompletedDelegate;
        
        private BeginOperationDelegate onBeginAutomationHost_CreateDelegate;
        
        private EndOperationDelegate onEndAutomationHost_CreateDelegate;
        
        private System.Threading.SendOrPostCallback onAutomationHost_CreateCompletedDelegate;
        
        private BeginOperationDelegate onBeginAutomationHost_UpdateDelegate;
        
        private EndOperationDelegate onEndAutomationHost_UpdateDelegate;
        
        private System.Threading.SendOrPostCallback onAutomationHost_UpdateCompletedDelegate;
        
        private BeginOperationDelegate onBeginAutomationHost_DeleteDelegate;
        
        private EndOperationDelegate onEndAutomationHost_DeleteDelegate;
        
        private System.Threading.SendOrPostCallback onAutomationHost_DeleteCompletedDelegate;
        
        private BeginOperationDelegate onBeginAutomationEngine_RetrieveByTokenDelegate;
        
        private EndOperationDelegate onEndAutomationEngine_RetrieveByTokenDelegate;
        
        private System.Threading.SendOrPostCallback onAutomationEngine_RetrieveByTokenCompletedDelegate;
        
        private BeginOperationDelegate onBeginAutomationEngine_RetrieveDelegate;
        
        private EndOperationDelegate onEndAutomationEngine_RetrieveDelegate;
        
        private System.Threading.SendOrPostCallback onAutomationEngine_RetrieveCompletedDelegate;
        
        private BeginOperationDelegate onBeginAutomationEngine_CreateDelegate;
        
        private EndOperationDelegate onEndAutomationEngine_CreateDelegate;
        
        private System.Threading.SendOrPostCallback onAutomationEngine_CreateCompletedDelegate;
        
        private BeginOperationDelegate onBeginAutomationEngine_RetrieveByIdDelegate;
        
        private EndOperationDelegate onEndAutomationEngine_RetrieveByIdDelegate;
        
        private System.Threading.SendOrPostCallback onAutomationEngine_RetrieveByIdCompletedDelegate;
        
        private BeginOperationDelegate onBeginAutomationEngine_UpdateDelegate;
        
        private EndOperationDelegate onEndAutomationEngine_UpdateDelegate;
        
        private System.Threading.SendOrPostCallback onAutomationEngine_UpdateCompletedDelegate;
        
        private BeginOperationDelegate onBeginComponent_RetrieveDelegate;
        
        private EndOperationDelegate onEndComponent_RetrieveDelegate;
        
        private System.Threading.SendOrPostCallback onComponent_RetrieveCompletedDelegate;
        
        private BeginOperationDelegate onBeginDataSyncSystem_RetrieveDelegate;
        
        private EndOperationDelegate onEndDataSyncSystem_RetrieveDelegate;
        
        private System.Threading.SendOrPostCallback onDataSyncSystem_RetrieveCompletedDelegate;
        
        private BeginOperationDelegate onBeginDataSyncSystem_RetrieveByIdDelegate;
        
        private EndOperationDelegate onEndDataSyncSystem_RetrieveByIdDelegate;
        
        private System.Threading.SendOrPostCallback onDataSyncSystem_RetrieveByIdCompletedDelegate;
        
        private BeginOperationDelegate onBeginDataSyncSystem_CreateDelegate;
        
        private EndOperationDelegate onEndDataSyncSystem_CreateDelegate;
        
        private System.Threading.SendOrPostCallback onDataSyncSystem_CreateCompletedDelegate;
        
        private BeginOperationDelegate onBeginDataSyncSystem_UpdateDelegate;
        
        private EndOperationDelegate onEndDataSyncSystem_UpdateDelegate;
        
        private System.Threading.SendOrPostCallback onDataSyncSystem_UpdateCompletedDelegate;
        
        private BeginOperationDelegate onBeginDataSyncSystem_SaveRunFailureDelegate;
        
        private EndOperationDelegate onEndDataSyncSystem_SaveRunFailureDelegate;
        
        private System.Threading.SendOrPostCallback onDataSyncSystem_SaveRunFailureCompletedDelegate;
        
        private BeginOperationDelegate onBeginDataSyncSystem_SaveRunSuccessDelegate;
        
        private EndOperationDelegate onEndDataSyncSystem_SaveRunSuccessDelegate;
        
        private System.Threading.SendOrPostCallback onDataSyncSystem_SaveRunSuccessCompletedDelegate;
        
        private BeginOperationDelegate onBeginDataSyncSystem_SaveRunWarningDelegate;
        
        private EndOperationDelegate onEndDataSyncSystem_SaveRunWarningDelegate;
        
        private System.Threading.SendOrPostCallback onDataSyncSystem_SaveRunWarningCompletedDelegate;
        
        private BeginOperationDelegate onBeginDataSyncSystem_WriteEventDelegate;
        
        private EndOperationDelegate onEndDataSyncSystem_WriteEventDelegate;
        
        private System.Threading.SendOrPostCallback onDataSyncSystem_WriteEventCompletedDelegate;
        
        private BeginOperationDelegate onBeginCustomProperty_RetrieveForArtifactTypeDelegate;
        
        private EndOperationDelegate onEndCustomProperty_RetrieveForArtifactTypeDelegate;
        
        private System.Threading.SendOrPostCallback onCustomProperty_RetrieveForArtifactTypeCompletedDelegate;
        
        private BeginOperationDelegate onBeginCustomProperty_AddCustomListDelegate;
        
        private EndOperationDelegate onEndCustomProperty_AddCustomListDelegate;
        
        private System.Threading.SendOrPostCallback onCustomProperty_AddCustomListCompletedDelegate;
        
        private BeginOperationDelegate onBeginCustomProperty_AddCustomListValueDelegate;
        
        private EndOperationDelegate onEndCustomProperty_AddCustomListValueDelegate;
        
        private System.Threading.SendOrPostCallback onCustomProperty_AddCustomListValueCompletedDelegate;
        
        private BeginOperationDelegate onBeginCustomProperty_AddDefinitionDelegate;
        
        private EndOperationDelegate onEndCustomProperty_AddDefinitionDelegate;
        
        private System.Threading.SendOrPostCallback onCustomProperty_AddDefinitionCompletedDelegate;
        
        private BeginOperationDelegate onBeginCustomProperty_UpdateDefinitionDelegate;
        
        private EndOperationDelegate onEndCustomProperty_UpdateDefinitionDelegate;
        
        private System.Threading.SendOrPostCallback onCustomProperty_UpdateDefinitionCompletedDelegate;
        
        private BeginOperationDelegate onBeginCustomProperty_DeleteDefinitionDelegate;
        
        private EndOperationDelegate onEndCustomProperty_DeleteDefinitionDelegate;
        
        private System.Threading.SendOrPostCallback onCustomProperty_DeleteDefinitionCompletedDelegate;
        
        private BeginOperationDelegate onBeginCustomProperty_RetrieveCustomListByIdDelegate;
        
        private EndOperationDelegate onEndCustomProperty_RetrieveCustomListByIdDelegate;
        
        private System.Threading.SendOrPostCallback onCustomProperty_RetrieveCustomListByIdCompletedDelegate;
        
        private BeginOperationDelegate onBeginCustomProperty_RetrieveCustomListsDelegate;
        
        private EndOperationDelegate onEndCustomProperty_RetrieveCustomListsDelegate;
        
        private System.Threading.SendOrPostCallback onCustomProperty_RetrieveCustomListsCompletedDelegate;
        
        private BeginOperationDelegate onBeginCustomProperty_UpdateCustomListDelegate;
        
        private EndOperationDelegate onEndCustomProperty_UpdateCustomListDelegate;
        
        private System.Threading.SendOrPostCallback onCustomProperty_UpdateCustomListCompletedDelegate;
        
        private BeginOperationDelegate onBeginDataMapping_AddArtifactMappingsDelegate;
        
        private EndOperationDelegate onEndDataMapping_AddArtifactMappingsDelegate;
        
        private System.Threading.SendOrPostCallback onDataMapping_AddArtifactMappingsCompletedDelegate;
        
        private BeginOperationDelegate onBeginDataMapping_AddUserMappingsDelegate;
        
        private EndOperationDelegate onEndDataMapping_AddUserMappingsDelegate;
        
        private System.Threading.SendOrPostCallback onDataMapping_AddUserMappingsCompletedDelegate;
        
        private BeginOperationDelegate onBeginDataMapping_RemoveArtifactMappingsDelegate;
        
        private EndOperationDelegate onEndDataMapping_RemoveArtifactMappingsDelegate;
        
        private System.Threading.SendOrPostCallback onDataMapping_RemoveArtifactMappingsCompletedDelegate;
        
        private BeginOperationDelegate onBeginDataMapping_RetrieveArtifactMappingsDelegate;
        
        private EndOperationDelegate onEndDataMapping_RetrieveArtifactMappingsDelegate;
        
        private System.Threading.SendOrPostCallback onDataMapping_RetrieveArtifactMappingsCompletedDelegate;
        
        private BeginOperationDelegate onBeginDataMapping_RetrieveCustomPropertyMappingDelegate;
        
        private EndOperationDelegate onEndDataMapping_RetrieveCustomPropertyMappingDelegate;
        
        private System.Threading.SendOrPostCallback onDataMapping_RetrieveCustomPropertyMappingCompletedDelegate;
        
        private BeginOperationDelegate onBeginDataMapping_RetrieveCustomPropertyValueMappingsDelegate;
        
        private EndOperationDelegate onEndDataMapping_RetrieveCustomPropertyValueMappingsDelegate;
        
        private System.Threading.SendOrPostCallback onDataMapping_RetrieveCustomPropertyValueMappingsCompletedDelegate;
        
        private BeginOperationDelegate onBeginDataMapping_RetrieveFieldValueMappingsDelegate;
        
        private EndOperationDelegate onEndDataMapping_RetrieveFieldValueMappingsDelegate;
        
        private System.Threading.SendOrPostCallback onDataMapping_RetrieveFieldValueMappingsCompletedDelegate;
        
        private BeginOperationDelegate onBeginDataMapping_RetrieveProjectMappingsDelegate;
        
        private EndOperationDelegate onEndDataMapping_RetrieveProjectMappingsDelegate;
        
        private System.Threading.SendOrPostCallback onDataMapping_RetrieveProjectMappingsCompletedDelegate;
        
        private BeginOperationDelegate onBeginDataMapping_RetrieveUserMappingsDelegate;
        
        private EndOperationDelegate onEndDataMapping_RetrieveUserMappingsDelegate;
        
        private System.Threading.SendOrPostCallback onDataMapping_RetrieveUserMappingsCompletedDelegate;
        
        private BeginOperationDelegate onBeginDataMapping_SearchArtifactMappingsDelegate;
        
        private EndOperationDelegate onEndDataMapping_SearchArtifactMappingsDelegate;
        
        private System.Threading.SendOrPostCallback onDataMapping_SearchArtifactMappingsCompletedDelegate;
        
        private BeginOperationDelegate onBeginDocument_OpenFileDelegate;
        
        private EndOperationDelegate onEndDocument_OpenFileDelegate;
        
        private System.Threading.SendOrPostCallback onDocument_OpenFileCompletedDelegate;
        
        private BeginOperationDelegate onBeginDocument_AddFileDelegate;
        
        private EndOperationDelegate onEndDocument_AddFileDelegate;
        
        private System.Threading.SendOrPostCallback onDocument_AddFileCompletedDelegate;
        
        private BeginOperationDelegate onBeginDocument_AddUrlDelegate;
        
        private EndOperationDelegate onEndDocument_AddUrlDelegate;
        
        private System.Threading.SendOrPostCallback onDocument_AddUrlCompletedDelegate;
        
        private BeginOperationDelegate onBeginDocument_AddFileVersionDelegate;
        
        private EndOperationDelegate onEndDocument_AddFileVersionDelegate;
        
        private System.Threading.SendOrPostCallback onDocument_AddFileVersionCompletedDelegate;
        
        private BeginOperationDelegate onBeginDocument_AddUrlVersionDelegate;
        
        private EndOperationDelegate onEndDocument_AddUrlVersionDelegate;
        
        private System.Threading.SendOrPostCallback onDocument_AddUrlVersionCompletedDelegate;
        
        private BeginOperationDelegate onBeginDocument_DeleteFromArtifactDelegate;
        
        private EndOperationDelegate onEndDocument_DeleteFromArtifactDelegate;
        
        private System.Threading.SendOrPostCallback onDocument_DeleteFromArtifactCompletedDelegate;
        
        private BeginOperationDelegate onBeginDocument_DeleteDelegate;
        
        private EndOperationDelegate onEndDocument_DeleteDelegate;
        
        private System.Threading.SendOrPostCallback onDocument_DeleteCompletedDelegate;
        
        private BeginOperationDelegate onBeginDocument_RetrieveDelegate;
        
        private EndOperationDelegate onEndDocument_RetrieveDelegate;
        
        private System.Threading.SendOrPostCallback onDocument_RetrieveCompletedDelegate;
        
        private BeginOperationDelegate onBeginDocument_RetrieveForFolderDelegate;
        
        private EndOperationDelegate onEndDocument_RetrieveForFolderDelegate;
        
        private System.Threading.SendOrPostCallback onDocument_RetrieveForFolderCompletedDelegate;
        
        private BeginOperationDelegate onBeginDocument_RetrieveForArtifactDelegate;
        
        private EndOperationDelegate onEndDocument_RetrieveForArtifactDelegate;
        
        private System.Threading.SendOrPostCallback onDocument_RetrieveForArtifactCompletedDelegate;
        
        private BeginOperationDelegate onBeginDocument_AddToArtifactIdDelegate;
        
        private EndOperationDelegate onEndDocument_AddToArtifactIdDelegate;
        
        private System.Threading.SendOrPostCallback onDocument_AddToArtifactIdCompletedDelegate;
        
        private BeginOperationDelegate onBeginDocument_RetrieveByIdDelegate;
        
        private EndOperationDelegate onEndDocument_RetrieveByIdDelegate;
        
        private System.Threading.SendOrPostCallback onDocument_RetrieveByIdCompletedDelegate;
        
        private BeginOperationDelegate onBeginDocument_RetrieveTypesDelegate;
        
        private EndOperationDelegate onEndDocument_RetrieveTypesDelegate;
        
        private System.Threading.SendOrPostCallback onDocument_RetrieveTypesCompletedDelegate;
        
        private BeginOperationDelegate onBeginDocument_RetrieveFoldersDelegate;
        
        private EndOperationDelegate onEndDocument_RetrieveFoldersDelegate;
        
        private System.Threading.SendOrPostCallback onDocument_RetrieveFoldersCompletedDelegate;
        
        private BeginOperationDelegate onBeginDocument_RetrieveFolderByIdDelegate;
        
        private EndOperationDelegate onEndDocument_RetrieveFolderByIdDelegate;
        
        private System.Threading.SendOrPostCallback onDocument_RetrieveFolderByIdCompletedDelegate;
        
        private BeginOperationDelegate onBeginDocument_AddFolderDelegate;
        
        private EndOperationDelegate onEndDocument_AddFolderDelegate;
        
        private System.Threading.SendOrPostCallback onDocument_AddFolderCompletedDelegate;
        
        private BeginOperationDelegate onBeginDocument_DeleteFolderDelegate;
        
        private EndOperationDelegate onEndDocument_DeleteFolderDelegate;
        
        private System.Threading.SendOrPostCallback onDocument_DeleteFolderCompletedDelegate;
        
        private BeginOperationDelegate onBeginDocument_UpdateFolderDelegate;
        
        private EndOperationDelegate onEndDocument_UpdateFolderDelegate;
        
        private System.Threading.SendOrPostCallback onDocument_UpdateFolderCompletedDelegate;
        
        private BeginOperationDelegate onBeginAssociation_CreateDelegate;
        
        private EndOperationDelegate onEndAssociation_CreateDelegate;
        
        private System.Threading.SendOrPostCallback onAssociation_CreateCompletedDelegate;
        
        private BeginOperationDelegate onBeginAssociation_UpdateDelegate;
        
        private EndOperationDelegate onEndAssociation_UpdateDelegate;
        
        private System.Threading.SendOrPostCallback onAssociation_UpdateCompletedDelegate;
        
        private BeginOperationDelegate onBeginAssociation_RetrieveForArtifactDelegate;
        
        private EndOperationDelegate onEndAssociation_RetrieveForArtifactDelegate;
        
        private System.Threading.SendOrPostCallback onAssociation_RetrieveForArtifactCompletedDelegate;
        
        private BeginOperationDelegate onBeginIncident_AddPriorityDelegate;
        
        private EndOperationDelegate onEndIncident_AddPriorityDelegate;
        
        private System.Threading.SendOrPostCallback onIncident_AddPriorityCompletedDelegate;
        
        private BeginOperationDelegate onBeginIncident_CountDelegate;
        
        private EndOperationDelegate onEndIncident_CountDelegate;
        
        private System.Threading.SendOrPostCallback onIncident_CountCompletedDelegate;
        
        private BeginOperationDelegate onBeginIncident_AddCommentsDelegate;
        
        private EndOperationDelegate onEndIncident_AddCommentsDelegate;
        
        private System.Threading.SendOrPostCallback onIncident_AddCommentsCompletedDelegate;
        
        private BeginOperationDelegate onBeginIncident_AddSeverityDelegate;
        
        private EndOperationDelegate onEndIncident_AddSeverityDelegate;
        
        private System.Threading.SendOrPostCallback onIncident_AddSeverityCompletedDelegate;
        
        private BeginOperationDelegate onBeginIncident_AddStatusDelegate;
        
        private EndOperationDelegate onEndIncident_AddStatusDelegate;
        
        private System.Threading.SendOrPostCallback onIncident_AddStatusCompletedDelegate;
        
        private BeginOperationDelegate onBeginIncident_AddTypeDelegate;
        
        private EndOperationDelegate onEndIncident_AddTypeDelegate;
        
        private System.Threading.SendOrPostCallback onIncident_AddTypeCompletedDelegate;
        
        private BeginOperationDelegate onBeginIncident_CreateDelegate;
        
        private EndOperationDelegate onEndIncident_CreateDelegate;
        
        private System.Threading.SendOrPostCallback onIncident_CreateCompletedDelegate;
        
        private BeginOperationDelegate onBeginIncident_RetrieveDelegate;
        
        private EndOperationDelegate onEndIncident_RetrieveDelegate;
        
        private System.Threading.SendOrPostCallback onIncident_RetrieveCompletedDelegate;
        
        private BeginOperationDelegate onBeginIncident_RetrieveByIdDelegate;
        
        private EndOperationDelegate onEndIncident_RetrieveByIdDelegate;
        
        private System.Threading.SendOrPostCallback onIncident_RetrieveByIdCompletedDelegate;
        
        private BeginOperationDelegate onBeginIncident_RetrieveByTestCaseDelegate;
        
        private EndOperationDelegate onEndIncident_RetrieveByTestCaseDelegate;
        
        private System.Threading.SendOrPostCallback onIncident_RetrieveByTestCaseCompletedDelegate;
        
        private BeginOperationDelegate onBeginIncident_RetrieveByTestRunStepDelegate;
        
        private EndOperationDelegate onEndIncident_RetrieveByTestRunStepDelegate;
        
        private System.Threading.SendOrPostCallback onIncident_RetrieveByTestRunStepCompletedDelegate;
        
        private BeginOperationDelegate onBeginIncident_RetrieveByTestStepDelegate;
        
        private EndOperationDelegate onEndIncident_RetrieveByTestStepDelegate;
        
        private System.Threading.SendOrPostCallback onIncident_RetrieveByTestStepCompletedDelegate;
        
        private BeginOperationDelegate onBeginIncident_RetrieveForOwnerDelegate;
        
        private EndOperationDelegate onEndIncident_RetrieveForOwnerDelegate;
        
        private System.Threading.SendOrPostCallback onIncident_RetrieveForOwnerCompletedDelegate;
        
        private BeginOperationDelegate onBeginIncident_RetrieveNewDelegate;
        
        private EndOperationDelegate onEndIncident_RetrieveNewDelegate;
        
        private System.Threading.SendOrPostCallback onIncident_RetrieveNewCompletedDelegate;
        
        private BeginOperationDelegate onBeginIncident_RetrievePrioritiesDelegate;
        
        private EndOperationDelegate onEndIncident_RetrievePrioritiesDelegate;
        
        private System.Threading.SendOrPostCallback onIncident_RetrievePrioritiesCompletedDelegate;
        
        private BeginOperationDelegate onBeginIncident_RetrieveCommentsDelegate;
        
        private EndOperationDelegate onEndIncident_RetrieveCommentsDelegate;
        
        private System.Threading.SendOrPostCallback onIncident_RetrieveCommentsCompletedDelegate;
        
        private BeginOperationDelegate onBeginIncident_RetrieveSeveritiesDelegate;
        
        private EndOperationDelegate onEndIncident_RetrieveSeveritiesDelegate;
        
        private System.Threading.SendOrPostCallback onIncident_RetrieveSeveritiesCompletedDelegate;
        
        private BeginOperationDelegate onBeginIncident_RetrieveStatusesDelegate;
        
        private EndOperationDelegate onEndIncident_RetrieveStatusesDelegate;
        
        private System.Threading.SendOrPostCallback onIncident_RetrieveStatusesCompletedDelegate;
        
        private BeginOperationDelegate onBeginIncident_RetrieveTypesDelegate;
        
        private EndOperationDelegate onEndIncident_RetrieveTypesDelegate;
        
        private System.Threading.SendOrPostCallback onIncident_RetrieveTypesCompletedDelegate;
        
        private BeginOperationDelegate onBeginIncident_RetrieveWorkflowFieldsDelegate;
        
        private EndOperationDelegate onEndIncident_RetrieveWorkflowFieldsDelegate;
        
        private System.Threading.SendOrPostCallback onIncident_RetrieveWorkflowFieldsCompletedDelegate;
        
        private BeginOperationDelegate onBeginIncident_RetrieveWorkflowTransitionsDelegate;
        
        private EndOperationDelegate onEndIncident_RetrieveWorkflowTransitionsDelegate;
        
        private System.Threading.SendOrPostCallback onIncident_RetrieveWorkflowTransitionsCompletedDelegate;
        
        private BeginOperationDelegate onBeginIncident_RetrieveWorkflowCustomPropertiesDelegate;
        
        private EndOperationDelegate onEndIncident_RetrieveWorkflowCustomPropertiesDelegate;
        
        private System.Threading.SendOrPostCallback onIncident_RetrieveWorkflowCustomPropertiesCompletedDelegate;
        
        private BeginOperationDelegate onBeginIncident_UpdateDelegate;
        
        private EndOperationDelegate onEndIncident_UpdateDelegate;
        
        private System.Threading.SendOrPostCallback onIncident_UpdateCompletedDelegate;
        
        private BeginOperationDelegate onBeginIncident_DeleteDelegate;
        
        private EndOperationDelegate onEndIncident_DeleteDelegate;
        
        private System.Threading.SendOrPostCallback onIncident_DeleteCompletedDelegate;
        
        private BeginOperationDelegate onBeginIncident_RetrieveDefaultStatusDelegate;
        
        private EndOperationDelegate onEndIncident_RetrieveDefaultStatusDelegate;
        
        private System.Threading.SendOrPostCallback onIncident_RetrieveDefaultStatusCompletedDelegate;
        
        private BeginOperationDelegate onBeginIncident_RetrieveDefaultTypeDelegate;
        
        private EndOperationDelegate onEndIncident_RetrieveDefaultTypeDelegate;
        
        private System.Threading.SendOrPostCallback onIncident_RetrieveDefaultTypeCompletedDelegate;
        
        private BeginOperationDelegate onBeginProject_CreateDelegate;
        
        private EndOperationDelegate onEndProject_CreateDelegate;
        
        private System.Threading.SendOrPostCallback onProject_CreateCompletedDelegate;
        
        private BeginOperationDelegate onBeginProject_DeleteDelegate;
        
        private EndOperationDelegate onEndProject_DeleteDelegate;
        
        private System.Threading.SendOrPostCallback onProject_DeleteCompletedDelegate;
        
        private BeginOperationDelegate onBeginProject_RetrieveDelegate;
        
        private EndOperationDelegate onEndProject_RetrieveDelegate;
        
        private System.Threading.SendOrPostCallback onProject_RetrieveCompletedDelegate;
        
        private BeginOperationDelegate onBeginProject_RetrieveByIdDelegate;
        
        private EndOperationDelegate onEndProject_RetrieveByIdDelegate;
        
        private System.Threading.SendOrPostCallback onProject_RetrieveByIdCompletedDelegate;
        
        private BeginOperationDelegate onBeginProject_RetrieveUserMembershipDelegate;
        
        private EndOperationDelegate onEndProject_RetrieveUserMembershipDelegate;
        
        private System.Threading.SendOrPostCallback onProject_RetrieveUserMembershipCompletedDelegate;
        
        private BeginOperationDelegate onBeginProject_RefreshProgressExecutionStatusCachesDelegate;
        
        private EndOperationDelegate onEndProject_RefreshProgressExecutionStatusCachesDelegate;
        
        private System.Threading.SendOrPostCallback onProject_RefreshProgressExecutionStatusCachesCompletedDelegate;
        
        private BeginOperationDelegate onBeginProject_AddUserMembershipDelegate;
        
        private EndOperationDelegate onEndProject_AddUserMembershipDelegate;
        
        private System.Threading.SendOrPostCallback onProject_AddUserMembershipCompletedDelegate;
        
        private BeginOperationDelegate onBeginProject_UpdateUserMembershipDelegate;
        
        private EndOperationDelegate onEndProject_UpdateUserMembershipDelegate;
        
        private System.Threading.SendOrPostCallback onProject_UpdateUserMembershipCompletedDelegate;
        
        private BeginOperationDelegate onBeginProjectRole_RetrieveDelegate;
        
        private EndOperationDelegate onEndProjectRole_RetrieveDelegate;
        
        private System.Threading.SendOrPostCallback onProjectRole_RetrieveCompletedDelegate;
        
        private BeginOperationDelegate onBeginRelease_AddTestMappingDelegate;
        
        private EndOperationDelegate onEndRelease_AddTestMappingDelegate;
        
        private System.Threading.SendOrPostCallback onRelease_AddTestMappingCompletedDelegate;
        
        private BeginOperationDelegate onBeginRelease_AddTestMapping2Delegate;
        
        private EndOperationDelegate onEndRelease_AddTestMapping2Delegate;
        
        private System.Threading.SendOrPostCallback onRelease_AddTestMapping2CompletedDelegate;
        
        private BeginOperationDelegate onBeginRelease_CountDelegate;
        
        private EndOperationDelegate onEndRelease_CountDelegate;
        
        private System.Threading.SendOrPostCallback onRelease_CountCompletedDelegate;
        
        private BeginOperationDelegate onBeginRelease_CreateDelegate;
        
        private EndOperationDelegate onEndRelease_CreateDelegate;
        
        private System.Threading.SendOrPostCallback onRelease_CreateCompletedDelegate;
        
        private BeginOperationDelegate onBeginRelease_RemoveTestMappingDelegate;
        
        private EndOperationDelegate onEndRelease_RemoveTestMappingDelegate;
        
        private System.Threading.SendOrPostCallback onRelease_RemoveTestMappingCompletedDelegate;
        
        private BeginOperationDelegate onBeginRelease_RetrieveDelegate;
        
        private EndOperationDelegate onEndRelease_RetrieveDelegate;
        
        private System.Threading.SendOrPostCallback onRelease_RetrieveCompletedDelegate;
        
        private BeginOperationDelegate onBeginRelease_Retrieve2Delegate;
        
        private EndOperationDelegate onEndRelease_Retrieve2Delegate;
        
        private System.Threading.SendOrPostCallback onRelease_Retrieve2CompletedDelegate;
        
        private BeginOperationDelegate onBeginRelease_RetrieveByIdDelegate;
        
        private EndOperationDelegate onEndRelease_RetrieveByIdDelegate;
        
        private System.Threading.SendOrPostCallback onRelease_RetrieveByIdCompletedDelegate;
        
        private BeginOperationDelegate onBeginRelease_UpdateDelegate;
        
        private EndOperationDelegate onEndRelease_UpdateDelegate;
        
        private System.Threading.SendOrPostCallback onRelease_UpdateCompletedDelegate;
        
        private BeginOperationDelegate onBeginRelease_DeleteDelegate;
        
        private EndOperationDelegate onEndRelease_DeleteDelegate;
        
        private System.Threading.SendOrPostCallback onRelease_DeleteCompletedDelegate;
        
        private BeginOperationDelegate onBeginRelease_MoveDelegate;
        
        private EndOperationDelegate onEndRelease_MoveDelegate;
        
        private System.Threading.SendOrPostCallback onRelease_MoveCompletedDelegate;
        
        private BeginOperationDelegate onBeginRelease_IndentDelegate;
        
        private EndOperationDelegate onEndRelease_IndentDelegate;
        
        private System.Threading.SendOrPostCallback onRelease_IndentCompletedDelegate;
        
        private BeginOperationDelegate onBeginRelease_OutdentDelegate;
        
        private EndOperationDelegate onEndRelease_OutdentDelegate;
        
        private System.Threading.SendOrPostCallback onRelease_OutdentCompletedDelegate;
        
        private BeginOperationDelegate onBeginRelease_RetrieveCommentsDelegate;
        
        private EndOperationDelegate onEndRelease_RetrieveCommentsDelegate;
        
        private System.Threading.SendOrPostCallback onRelease_RetrieveCommentsCompletedDelegate;
        
        private BeginOperationDelegate onBeginRelease_RetrieveTestMappingDelegate;
        
        private EndOperationDelegate onEndRelease_RetrieveTestMappingDelegate;
        
        private System.Threading.SendOrPostCallback onRelease_RetrieveTestMappingCompletedDelegate;
        
        private BeginOperationDelegate onBeginRelease_CreateCommentDelegate;
        
        private EndOperationDelegate onEndRelease_CreateCommentDelegate;
        
        private System.Threading.SendOrPostCallback onRelease_CreateCommentCompletedDelegate;
        
        private BeginOperationDelegate onBeginRelease_RetrieveStatusesDelegate;
        
        private EndOperationDelegate onEndRelease_RetrieveStatusesDelegate;
        
        private System.Threading.SendOrPostCallback onRelease_RetrieveStatusesCompletedDelegate;
        
        private BeginOperationDelegate onBeginRelease_RetrieveTypesDelegate;
        
        private EndOperationDelegate onEndRelease_RetrieveTypesDelegate;
        
        private System.Threading.SendOrPostCallback onRelease_RetrieveTypesCompletedDelegate;
        
        private BeginOperationDelegate onBeginRelease_RetrieveWorkflowFieldsDelegate;
        
        private EndOperationDelegate onEndRelease_RetrieveWorkflowFieldsDelegate;
        
        private System.Threading.SendOrPostCallback onRelease_RetrieveWorkflowFieldsCompletedDelegate;
        
        private BeginOperationDelegate onBeginRelease_RetrieveWorkflowTransitionsDelegate;
        
        private EndOperationDelegate onEndRelease_RetrieveWorkflowTransitionsDelegate;
        
        private System.Threading.SendOrPostCallback onRelease_RetrieveWorkflowTransitionsCompletedDelegate;
        
        private BeginOperationDelegate onBeginRelease_RetrieveWorkflowCustomPropertiesDelegate;
        
        private EndOperationDelegate onEndRelease_RetrieveWorkflowCustomPropertiesDelegate;
        
        private System.Threading.SendOrPostCallback onRelease_RetrieveWorkflowCustomPropertiesCompletedDelegate;
        
        private BeginOperationDelegate onBeginRequirement_AddTestCoverageDelegate;
        
        private EndOperationDelegate onEndRequirement_AddTestCoverageDelegate;
        
        private System.Threading.SendOrPostCallback onRequirement_AddTestCoverageCompletedDelegate;
        
        private BeginOperationDelegate onBeginRequirement_CountDelegate;
        
        private EndOperationDelegate onEndRequirement_CountDelegate;
        
        private System.Threading.SendOrPostCallback onRequirement_CountCompletedDelegate;
        
        private BeginOperationDelegate onBeginRequirement_Create1Delegate;
        
        private EndOperationDelegate onEndRequirement_Create1Delegate;
        
        private System.Threading.SendOrPostCallback onRequirement_Create1CompletedDelegate;
        
        private BeginOperationDelegate onBeginRequirement_Create2Delegate;
        
        private EndOperationDelegate onEndRequirement_Create2Delegate;
        
        private System.Threading.SendOrPostCallback onRequirement_Create2CompletedDelegate;
        
        private BeginOperationDelegate onBeginRequirement_RemoveTestCoverageDelegate;
        
        private EndOperationDelegate onEndRequirement_RemoveTestCoverageDelegate;
        
        private System.Threading.SendOrPostCallback onRequirement_RemoveTestCoverageCompletedDelegate;
        
        private BeginOperationDelegate onBeginRequirement_RetrieveDelegate;
        
        private EndOperationDelegate onEndRequirement_RetrieveDelegate;
        
        private System.Threading.SendOrPostCallback onRequirement_RetrieveCompletedDelegate;
        
        private BeginOperationDelegate onBeginRequirement_RetrieveByIdDelegate;
        
        private EndOperationDelegate onEndRequirement_RetrieveByIdDelegate;
        
        private System.Threading.SendOrPostCallback onRequirement_RetrieveByIdCompletedDelegate;
        
        private BeginOperationDelegate onBeginRequirement_RetrieveForOwnerDelegate;
        
        private EndOperationDelegate onEndRequirement_RetrieveForOwnerDelegate;
        
        private System.Threading.SendOrPostCallback onRequirement_RetrieveForOwnerCompletedDelegate;
        
        private BeginOperationDelegate onBeginRequirement_RetrieveTestCoverageDelegate;
        
        private EndOperationDelegate onEndRequirement_RetrieveTestCoverageDelegate;
        
        private System.Threading.SendOrPostCallback onRequirement_RetrieveTestCoverageCompletedDelegate;
        
        private BeginOperationDelegate onBeginRequirement_UpdateDelegate;
        
        private EndOperationDelegate onEndRequirement_UpdateDelegate;
        
        private System.Threading.SendOrPostCallback onRequirement_UpdateCompletedDelegate;
        
        private BeginOperationDelegate onBeginRequirement_DeleteDelegate;
        
        private EndOperationDelegate onEndRequirement_DeleteDelegate;
        
        private System.Threading.SendOrPostCallback onRequirement_DeleteCompletedDelegate;
        
        private BeginOperationDelegate onBeginRequirement_MoveDelegate;
        
        private EndOperationDelegate onEndRequirement_MoveDelegate;
        
        private System.Threading.SendOrPostCallback onRequirement_MoveCompletedDelegate;
        
        private BeginOperationDelegate onBeginRequirement_IndentDelegate;
        
        private EndOperationDelegate onEndRequirement_IndentDelegate;
        
        private System.Threading.SendOrPostCallback onRequirement_IndentCompletedDelegate;
        
        private BeginOperationDelegate onBeginRequirement_OutdentDelegate;
        
        private EndOperationDelegate onEndRequirement_OutdentDelegate;
        
        private System.Threading.SendOrPostCallback onRequirement_OutdentCompletedDelegate;
        
        private BeginOperationDelegate onBeginRequirement_RetrieveCommentsDelegate;
        
        private EndOperationDelegate onEndRequirement_RetrieveCommentsDelegate;
        
        private System.Threading.SendOrPostCallback onRequirement_RetrieveCommentsCompletedDelegate;
        
        private BeginOperationDelegate onBeginRequirement_CreateCommentDelegate;
        
        private EndOperationDelegate onEndRequirement_CreateCommentDelegate;
        
        private System.Threading.SendOrPostCallback onRequirement_CreateCommentCompletedDelegate;
        
        private BeginOperationDelegate onBeginRequirement_RetrieveStatusesDelegate;
        
        private EndOperationDelegate onEndRequirement_RetrieveStatusesDelegate;
        
        private System.Threading.SendOrPostCallback onRequirement_RetrieveStatusesCompletedDelegate;
        
        private BeginOperationDelegate onBeginRequirement_RetrieveTypesDelegate;
        
        private EndOperationDelegate onEndRequirement_RetrieveTypesDelegate;
        
        private System.Threading.SendOrPostCallback onRequirement_RetrieveTypesCompletedDelegate;
        
        private BeginOperationDelegate onBeginRequirement_RetrieveWorkflowFieldsDelegate;
        
        private EndOperationDelegate onEndRequirement_RetrieveWorkflowFieldsDelegate;
        
        private System.Threading.SendOrPostCallback onRequirement_RetrieveWorkflowFieldsCompletedDelegate;
        
        private BeginOperationDelegate onBeginRequirement_RetrieveWorkflowTransitionsDelegate;
        
        private EndOperationDelegate onEndRequirement_RetrieveWorkflowTransitionsDelegate;
        
        private System.Threading.SendOrPostCallback onRequirement_RetrieveWorkflowTransitionsCompletedDelegate;
        
        private BeginOperationDelegate onBeginRequirement_RetrieveWorkflowCustomPropertiesDelegate;
        
        private EndOperationDelegate onEndRequirement_RetrieveWorkflowCustomPropertiesDelegate;
        
        private System.Threading.SendOrPostCallback onRequirement_RetrieveWorkflowCustomPropertiesCompletedDelegate;
        
        private BeginOperationDelegate onBeginRequirement_RetrieveStepsDelegate;
        
        private EndOperationDelegate onEndRequirement_RetrieveStepsDelegate;
        
        private System.Threading.SendOrPostCallback onRequirement_RetrieveStepsCompletedDelegate;
        
        private BeginOperationDelegate onBeginRequirement_RetrieveStepByIdDelegate;
        
        private EndOperationDelegate onEndRequirement_RetrieveStepByIdDelegate;
        
        private System.Threading.SendOrPostCallback onRequirement_RetrieveStepByIdCompletedDelegate;
        
        private BeginOperationDelegate onBeginRequirement_AddStepDelegate;
        
        private EndOperationDelegate onEndRequirement_AddStepDelegate;
        
        private System.Threading.SendOrPostCallback onRequirement_AddStepCompletedDelegate;
        
        public SoapServiceClient() {
        }
        
        public SoapServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public SoapServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SoapServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SoapServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<Connection_AuthenticateCompletedEventArgs> Connection_AuthenticateCompleted;
        
        public event System.EventHandler<Connection_Authenticate2CompletedEventArgs> Connection_Authenticate2Completed;
        
        public event System.EventHandler<Connection_Authenticate3CompletedEventArgs> Connection_Authenticate3Completed;
        
        public event System.EventHandler<Connection_ConnectToProjectCompletedEventArgs> Connection_ConnectToProjectCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> Connection_DisconnectCompleted;
        
        public event System.EventHandler<System_GetProductNameCompletedEventArgs> System_GetProductNameCompleted;
        
        public event System.EventHandler<System_GetServerDateTimeCompletedEventArgs> System_GetServerDateTimeCompleted;
        
        public event System.EventHandler<System_GetWebServerUrlCompletedEventArgs> System_GetWebServerUrlCompleted;
        
        public event System.EventHandler<Component_RetrieveByIdCompletedEventArgs> Component_RetrieveByIdCompleted;
        
        public event System.EventHandler<Component_CreateCompletedEventArgs> Component_CreateCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> Component_UpdateCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> Component_DeleteCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> Component_UndeleteCompleted;
        
        public event System.EventHandler<Build_RetrieveByReleaseIdCompletedEventArgs> Build_RetrieveByReleaseIdCompleted;
        
        public event System.EventHandler<Build_RetrieveByIdCompletedEventArgs> Build_RetrieveByIdCompleted;
        
        public event System.EventHandler<Build_CreateCompletedEventArgs> Build_CreateCompleted;
        
        public event System.EventHandler<SourceCode_RetrieveBranchesCompletedEventArgs> SourceCode_RetrieveBranchesCompleted;
        
        public event System.EventHandler<SourceCode_RetrieveFoldersByParentCompletedEventArgs> SourceCode_RetrieveFoldersByParentCompleted;
        
        public event System.EventHandler<SourceCode_RetrieveFilesByFolderCompletedEventArgs> SourceCode_RetrieveFilesByFolderCompleted;
        
        public event System.EventHandler<SourceCode_RetrieveFilesByRevisionCompletedEventArgs> SourceCode_RetrieveFilesByRevisionCompleted;
        
        public event System.EventHandler<SourceCode_RetrieveFileByIdCompletedEventArgs> SourceCode_RetrieveFileByIdCompleted;
        
        public event System.EventHandler<SourceCode_RetrieveFilesForArtifactCompletedEventArgs> SourceCode_RetrieveFilesForArtifactCompleted;
        
        public event System.EventHandler<SourceCode_OpenFileByIdCompletedEventArgs> SourceCode_OpenFileByIdCompleted;
        
        public event System.EventHandler<SourceCode_RetrieveRevisionsCompletedEventArgs> SourceCode_RetrieveRevisionsCompleted;
        
        public event System.EventHandler<SourceCode_RetrieveRevisionsForFileCompletedEventArgs> SourceCode_RetrieveRevisionsForFileCompleted;
        
        public event System.EventHandler<SourceCode_RetrieveRevisionByIdCompletedEventArgs> SourceCode_RetrieveRevisionByIdCompleted;
        
        public event System.EventHandler<SourceCode_RetrieveRevisionsForArtifactCompletedEventArgs> SourceCode_RetrieveRevisionsForArtifactCompleted;
        
        public event System.EventHandler<SourceCode_RetrieveArtifactsForRevisionCompletedEventArgs> SourceCode_RetrieveArtifactsForRevisionCompleted;
        
        public event System.EventHandler<Message_GetInfoCompletedEventArgs> Message_GetInfoCompleted;
        
        public event System.EventHandler<Message_PostNewCompletedEventArgs> Message_PostNewCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> Message_MarkAllAsReadCompleted;
        
        public event System.EventHandler<Message_GetUnreadMessageSendersCompletedEventArgs> Message_GetUnreadMessageSendersCompleted;
        
        public event System.EventHandler<Message_RetrieveUnreadCompletedEventArgs> Message_RetrieveUnreadCompleted;
        
        public event System.EventHandler<History_RetrieveForArtifactCompletedEventArgs> History_RetrieveForArtifactCompleted;
        
        public event System.EventHandler<History_RetrieveByIdCompletedEventArgs> History_RetrieveByIdCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> Subscription_SubscribeToArtifactCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> Subscription_UnsubscribeFromArtifactCompleted;
        
        public event System.EventHandler<Subscription_RetrieveForUserCompletedEventArgs> Subscription_RetrieveForUserCompleted;
        
        public event System.EventHandler<Subscription_RetrieveForArtifactCompletedEventArgs> Subscription_RetrieveForArtifactCompleted;
        
        public event System.EventHandler<SavedFilter_RetrieveForUserCompletedEventArgs> SavedFilter_RetrieveForUserCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> Requirement_UpdateStepCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> Requirement_MoveStepCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> Requirement_DeleteStepCompleted;
        
        public event System.EventHandler<System_GetProductVersionCompletedEventArgs> System_GetProductVersionCompleted;
        
        public event System.EventHandler<System_GetSettingsCompletedEventArgs> System_GetSettingsCompleted;
        
        public event System.EventHandler<System_GetArtifactUrlCompletedEventArgs> System_GetArtifactUrlCompleted;
        
        public event System.EventHandler<System_GetProjectIdForArtifactCompletedEventArgs> System_GetProjectIdForArtifactCompleted;
        
        public event System.EventHandler<Task_CreateCompletedEventArgs> Task_CreateCompleted;
        
        public event System.EventHandler<Task_RetrieveCompletedEventArgs> Task_RetrieveCompleted;
        
        public event System.EventHandler<Task_RetrieveByIdCompletedEventArgs> Task_RetrieveByIdCompleted;
        
        public event System.EventHandler<Task_RetrieveForOwnerCompletedEventArgs> Task_RetrieveForOwnerCompleted;
        
        public event System.EventHandler<Task_RetrieveNewCompletedEventArgs> Task_RetrieveNewCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> Task_UpdateCompleted;
        
        public event System.EventHandler<Task_CountCompletedEventArgs> Task_CountCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> Task_DeleteCompleted;
        
        public event System.EventHandler<Task_RetrieveCommentsCompletedEventArgs> Task_RetrieveCommentsCompleted;
        
        public event System.EventHandler<Task_CreateCommentCompletedEventArgs> Task_CreateCommentCompleted;
        
        public event System.EventHandler<Task_RetrieveStatusesCompletedEventArgs> Task_RetrieveStatusesCompleted;
        
        public event System.EventHandler<Task_RetrieveTypesCompletedEventArgs> Task_RetrieveTypesCompleted;
        
        public event System.EventHandler<Task_RetrieveWorkflowFieldsCompletedEventArgs> Task_RetrieveWorkflowFieldsCompleted;
        
        public event System.EventHandler<Task_RetrieveWorkflowTransitionsCompletedEventArgs> Task_RetrieveWorkflowTransitionsCompleted;
        
        public event System.EventHandler<Task_RetrieveWorkflowCustomPropertiesCompletedEventArgs> Task_RetrieveWorkflowCustomPropertiesCompleted;
        
        public event System.EventHandler<Task_RetrieveFoldersCompletedEventArgs> Task_RetrieveFoldersCompleted;
        
        public event System.EventHandler<Task_RetrieveFoldersByParentCompletedEventArgs> Task_RetrieveFoldersByParentCompleted;
        
        public event System.EventHandler<Task_CreateFolderCompletedEventArgs> Task_CreateFolderCompleted;
        
        public event System.EventHandler<Task_RetrieveFolderByIdCompletedEventArgs> Task_RetrieveFolderByIdCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> Task_DeleteFolderCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> Task_UpdateFolderCompleted;
        
        public event System.EventHandler<TestCase_CreateCompletedEventArgs> TestCase_CreateCompleted;
        
        public event System.EventHandler<TestCase_CreateFolderCompletedEventArgs> TestCase_CreateFolderCompleted;
        
        public event System.EventHandler<TestCase_RetrieveByIdCompletedEventArgs> TestCase_RetrieveByIdCompleted;
        
        public event System.EventHandler<TestCase_RetrieveFolderByIdCompletedEventArgs> TestCase_RetrieveFolderByIdCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> TestCase_UpdateCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> TestCase_DeleteFolderCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> TestCase_UpdateFolderCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> TestCase_DeleteCompleted;
        
        public event System.EventHandler<TestCase_AddParameterCompletedEventArgs> TestCase_AddParameterCompleted;
        
        public event System.EventHandler<TestCase_CreateParameterTokenCompletedEventArgs> TestCase_CreateParameterTokenCompleted;
        
        public event System.EventHandler<TestCase_RetrieveParametersCompletedEventArgs> TestCase_RetrieveParametersCompleted;
        
        public event System.EventHandler<TestCase_RetrieveStepParametersCompletedEventArgs> TestCase_RetrieveStepParametersCompleted;
        
        public event System.EventHandler<TestCase_RetrieveStepsCompletedEventArgs> TestCase_RetrieveStepsCompleted;
        
        public event System.EventHandler<TestCase_RetrieveStepByIdCompletedEventArgs> TestCase_RetrieveStepByIdCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> TestCase_MoveStepCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> TestCase_DeleteStepCompleted;
        
        public event System.EventHandler<TestCase_AddStepCompletedEventArgs> TestCase_AddStepCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> TestCase_UpdateStepCompleted;
        
        public event System.EventHandler<TestCase_AddLinkCompletedEventArgs> TestCase_AddLinkCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> TestCase_AddUpdateAutomationScriptCompleted;
        
        public event System.EventHandler<TestCase_CountCompletedEventArgs> TestCase_CountCompleted;
        
        public event System.EventHandler<TestCase_CountForFolderCompletedEventArgs> TestCase_CountForFolderCompleted;
        
        public event System.EventHandler<TestCase_RetrieveCompletedEventArgs> TestCase_RetrieveCompleted;
        
        public event System.EventHandler<TestCase_RetrieveByFolderCompletedEventArgs> TestCase_RetrieveByFolderCompleted;
        
        public event System.EventHandler<TestCase_RetrieveByTestSetIdCompletedEventArgs> TestCase_RetrieveByTestSetIdCompleted;
        
        public event System.EventHandler<TestCase_RetrieveForOwnerCompletedEventArgs> TestCase_RetrieveForOwnerCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> TestCase_MoveCompleted;
        
        public event System.EventHandler<TestCase_RetrieveFoldersCompletedEventArgs> TestCase_RetrieveFoldersCompleted;
        
        public event System.EventHandler<TestCase_RetrieveFoldersByParentCompletedEventArgs> TestCase_RetrieveFoldersByParentCompleted;
        
        public event System.EventHandler<TestCase_RetrieveCommentsCompletedEventArgs> TestCase_RetrieveCommentsCompleted;
        
        public event System.EventHandler<TestCase_CreateCommentCompletedEventArgs> TestCase_CreateCommentCompleted;
        
        public event System.EventHandler<TestCase_RetrieveStatusesCompletedEventArgs> TestCase_RetrieveStatusesCompleted;
        
        public event System.EventHandler<TestCase_RetrieveTypesCompletedEventArgs> TestCase_RetrieveTypesCompleted;
        
        public event System.EventHandler<TestCase_RetrieveWorkflowFieldsCompletedEventArgs> TestCase_RetrieveWorkflowFieldsCompleted;
        
        public event System.EventHandler<TestCase_RetrieveWorkflowTransitionsCompletedEventArgs> TestCase_RetrieveWorkflowTransitionsCompleted;
        
        public event System.EventHandler<TestCase_RetrieveWorkflowCustomPropertiesCompletedEventArgs> TestCase_RetrieveWorkflowCustomPropertiesCompleted;
        
        public event System.EventHandler<TestRun_CreateFromTestCasesCompletedEventArgs> TestRun_CreateFromTestCasesCompleted;
        
        public event System.EventHandler<TestRun_CountCompletedEventArgs> TestRun_CountCompleted;
        
        public event System.EventHandler<TestRun_CreateFromTestSetCompletedEventArgs> TestRun_CreateFromTestSetCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> TestRun_DeleteCompleted;
        
        public event System.EventHandler<TestRun_CreateForAutomationHostCompletedEventArgs> TestRun_CreateForAutomationHostCompleted;
        
        public event System.EventHandler<TestRun_CreateForAutomatedTestSetCompletedEventArgs> TestRun_CreateForAutomatedTestSetCompleted;
        
        public event System.EventHandler<TestRun_RecordAutomated1CompletedEventArgs> TestRun_RecordAutomated1Completed;
        
        public event System.EventHandler<TestRun_RecordAutomated2CompletedEventArgs> TestRun_RecordAutomated2Completed;
        
        public event System.EventHandler<TestRun_RecordAutomated3CompletedEventArgs> TestRun_RecordAutomated3Completed;
        
        public event System.EventHandler<TestRun_RetrieveCompletedEventArgs> TestRun_RetrieveCompleted;
        
        public event System.EventHandler<TestRun_RetrieveManualCompletedEventArgs> TestRun_RetrieveManualCompleted;
        
        public event System.EventHandler<TestRun_RetrieveAutomatedCompletedEventArgs> TestRun_RetrieveAutomatedCompleted;
        
        public event System.EventHandler<TestRun_RetrieveByIdCompletedEventArgs> TestRun_RetrieveByIdCompleted;
        
        public event System.EventHandler<TestRun_RetrieveByTestCaseIdCompletedEventArgs> TestRun_RetrieveByTestCaseIdCompleted;
        
        public event System.EventHandler<TestRun_RetrieveAutomatedByIdCompletedEventArgs> TestRun_RetrieveAutomatedByIdCompleted;
        
        public event System.EventHandler<TestRun_RetrieveManualByIdCompletedEventArgs> TestRun_RetrieveManualByIdCompleted;
        
        public event System.EventHandler<TestRun_SaveCompletedEventArgs> TestRun_SaveCompleted;
        
        public event System.EventHandler<TestSet_AddTestMappingCompletedEventArgs> TestSet_AddTestMappingCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> TestSet_RemoveTestMappingCompleted;
        
        public event System.EventHandler<TestSet_RetrieveTestCaseMappingCompletedEventArgs> TestSet_RetrieveTestCaseMappingCompleted;
        
        public event System.EventHandler<TestSet_CreateCompletedEventArgs> TestSet_CreateCompleted;
        
        public event System.EventHandler<TestSet_CreateFolderCompletedEventArgs> TestSet_CreateFolderCompleted;
        
        public event System.EventHandler<TestSet_CountCompletedEventArgs> TestSet_CountCompleted;
        
        public event System.EventHandler<TestSet_CountForFolderCompletedEventArgs> TestSet_CountForFolderCompleted;
        
        public event System.EventHandler<TestSet_RetrieveCompletedEventArgs> TestSet_RetrieveCompleted;
        
        public event System.EventHandler<TestSet_RetrieveByFolderCompletedEventArgs> TestSet_RetrieveByFolderCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> TestSet_UpdateCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> TestSet_DeleteCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> TestSet_UpdateFolderCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> TestSet_DeleteFolderCompleted;
        
        public event System.EventHandler<TestSet_RetrieveByIdCompletedEventArgs> TestSet_RetrieveByIdCompleted;
        
        public event System.EventHandler<TestSet_RetrieveFolderByIdCompletedEventArgs> TestSet_RetrieveFolderByIdCompleted;
        
        public event System.EventHandler<TestSet_RetrieveFoldersCompletedEventArgs> TestSet_RetrieveFoldersCompleted;
        
        public event System.EventHandler<TestSet_RetrieveFoldersByParentCompletedEventArgs> TestSet_RetrieveFoldersByParentCompleted;
        
        public event System.EventHandler<TestSet_RetrieveForOwnerCompletedEventArgs> TestSet_RetrieveForOwnerCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> TestSet_MoveCompleted;
        
        public event System.EventHandler<TestSet_RetrieveCommentsCompletedEventArgs> TestSet_RetrieveCommentsCompleted;
        
        public event System.EventHandler<TestSet_CreateCommentCompletedEventArgs> TestSet_CreateCommentCompleted;
        
        public event System.EventHandler<TestSet_RetrieveParametersCompletedEventArgs> TestSet_RetrieveParametersCompleted;
        
        public event System.EventHandler<TestSet_RetrieveTestCaseParametersCompletedEventArgs> TestSet_RetrieveTestCaseParametersCompleted;
        
        public event System.EventHandler<TestConfiguration_RetrieveForTestSetCompletedEventArgs> TestConfiguration_RetrieveForTestSetCompleted;
        
        public event System.EventHandler<TestConfiguration_RetrieveSetByIdCompletedEventArgs> TestConfiguration_RetrieveSetByIdCompleted;
        
        public event System.EventHandler<TestConfiguration_RetrieveSetsCompletedEventArgs> TestConfiguration_RetrieveSetsCompleted;
        
        public event System.EventHandler<User_CreateCompletedEventArgs> User_CreateCompleted;
        
        public event System.EventHandler<User_RetrieveByIdCompletedEventArgs> User_RetrieveByIdCompleted;
        
        public event System.EventHandler<User_RetrieveByUserNameCompletedEventArgs> User_RetrieveByUserNameCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> User_DeleteCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> User_UpdateCompleted;
        
        public event System.EventHandler<User_RetrieveCompletedEventArgs> User_RetrieveCompleted;
        
        public event System.EventHandler<User_RetrieveContactsCompletedEventArgs> User_RetrieveContactsCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> User_AddContactCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> User_RemoveContactCompleted;
        
        public event System.EventHandler<AutomationHost_RetrieveCompletedEventArgs> AutomationHost_RetrieveCompleted;
        
        public event System.EventHandler<AutomationHost_RetrieveByIdCompletedEventArgs> AutomationHost_RetrieveByIdCompleted;
        
        public event System.EventHandler<AutomationHost_RetrieveByTokenCompletedEventArgs> AutomationHost_RetrieveByTokenCompleted;
        
        public event System.EventHandler<AutomationHost_CreateCompletedEventArgs> AutomationHost_CreateCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> AutomationHost_UpdateCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> AutomationHost_DeleteCompleted;
        
        public event System.EventHandler<AutomationEngine_RetrieveByTokenCompletedEventArgs> AutomationEngine_RetrieveByTokenCompleted;
        
        public event System.EventHandler<AutomationEngine_RetrieveCompletedEventArgs> AutomationEngine_RetrieveCompleted;
        
        public event System.EventHandler<AutomationEngine_CreateCompletedEventArgs> AutomationEngine_CreateCompleted;
        
        public event System.EventHandler<AutomationEngine_RetrieveByIdCompletedEventArgs> AutomationEngine_RetrieveByIdCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> AutomationEngine_UpdateCompleted;
        
        public event System.EventHandler<Component_RetrieveCompletedEventArgs> Component_RetrieveCompleted;
        
        public event System.EventHandler<DataSyncSystem_RetrieveCompletedEventArgs> DataSyncSystem_RetrieveCompleted;
        
        public event System.EventHandler<DataSyncSystem_RetrieveByIdCompletedEventArgs> DataSyncSystem_RetrieveByIdCompleted;
        
        public event System.EventHandler<DataSyncSystem_CreateCompletedEventArgs> DataSyncSystem_CreateCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DataSyncSystem_UpdateCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DataSyncSystem_SaveRunFailureCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DataSyncSystem_SaveRunSuccessCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DataSyncSystem_SaveRunWarningCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DataSyncSystem_WriteEventCompleted;
        
        public event System.EventHandler<CustomProperty_RetrieveForArtifactTypeCompletedEventArgs> CustomProperty_RetrieveForArtifactTypeCompleted;
        
        public event System.EventHandler<CustomProperty_AddCustomListCompletedEventArgs> CustomProperty_AddCustomListCompleted;
        
        public event System.EventHandler<CustomProperty_AddCustomListValueCompletedEventArgs> CustomProperty_AddCustomListValueCompleted;
        
        public event System.EventHandler<CustomProperty_AddDefinitionCompletedEventArgs> CustomProperty_AddDefinitionCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CustomProperty_UpdateDefinitionCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CustomProperty_DeleteDefinitionCompleted;
        
        public event System.EventHandler<CustomProperty_RetrieveCustomListByIdCompletedEventArgs> CustomProperty_RetrieveCustomListByIdCompleted;
        
        public event System.EventHandler<CustomProperty_RetrieveCustomListsCompletedEventArgs> CustomProperty_RetrieveCustomListsCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CustomProperty_UpdateCustomListCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DataMapping_AddArtifactMappingsCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DataMapping_AddUserMappingsCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DataMapping_RemoveArtifactMappingsCompleted;
        
        public event System.EventHandler<DataMapping_RetrieveArtifactMappingsCompletedEventArgs> DataMapping_RetrieveArtifactMappingsCompleted;
        
        public event System.EventHandler<DataMapping_RetrieveCustomPropertyMappingCompletedEventArgs> DataMapping_RetrieveCustomPropertyMappingCompleted;
        
        public event System.EventHandler<DataMapping_RetrieveCustomPropertyValueMappingsCompletedEventArgs> DataMapping_RetrieveCustomPropertyValueMappingsCompleted;
        
        public event System.EventHandler<DataMapping_RetrieveFieldValueMappingsCompletedEventArgs> DataMapping_RetrieveFieldValueMappingsCompleted;
        
        public event System.EventHandler<DataMapping_RetrieveProjectMappingsCompletedEventArgs> DataMapping_RetrieveProjectMappingsCompleted;
        
        public event System.EventHandler<DataMapping_RetrieveUserMappingsCompletedEventArgs> DataMapping_RetrieveUserMappingsCompleted;
        
        public event System.EventHandler<DataMapping_SearchArtifactMappingsCompletedEventArgs> DataMapping_SearchArtifactMappingsCompleted;
        
        public event System.EventHandler<Document_OpenFileCompletedEventArgs> Document_OpenFileCompleted;
        
        public event System.EventHandler<Document_AddFileCompletedEventArgs> Document_AddFileCompleted;
        
        public event System.EventHandler<Document_AddUrlCompletedEventArgs> Document_AddUrlCompleted;
        
        public event System.EventHandler<Document_AddFileVersionCompletedEventArgs> Document_AddFileVersionCompleted;
        
        public event System.EventHandler<Document_AddUrlVersionCompletedEventArgs> Document_AddUrlVersionCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> Document_DeleteFromArtifactCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> Document_DeleteCompleted;
        
        public event System.EventHandler<Document_RetrieveCompletedEventArgs> Document_RetrieveCompleted;
        
        public event System.EventHandler<Document_RetrieveForFolderCompletedEventArgs> Document_RetrieveForFolderCompleted;
        
        public event System.EventHandler<Document_RetrieveForArtifactCompletedEventArgs> Document_RetrieveForArtifactCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> Document_AddToArtifactIdCompleted;
        
        public event System.EventHandler<Document_RetrieveByIdCompletedEventArgs> Document_RetrieveByIdCompleted;
        
        public event System.EventHandler<Document_RetrieveTypesCompletedEventArgs> Document_RetrieveTypesCompleted;
        
        public event System.EventHandler<Document_RetrieveFoldersCompletedEventArgs> Document_RetrieveFoldersCompleted;
        
        public event System.EventHandler<Document_RetrieveFolderByIdCompletedEventArgs> Document_RetrieveFolderByIdCompleted;
        
        public event System.EventHandler<Document_AddFolderCompletedEventArgs> Document_AddFolderCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> Document_DeleteFolderCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> Document_UpdateFolderCompleted;
        
        public event System.EventHandler<Association_CreateCompletedEventArgs> Association_CreateCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> Association_UpdateCompleted;
        
        public event System.EventHandler<Association_RetrieveForArtifactCompletedEventArgs> Association_RetrieveForArtifactCompleted;
        
        public event System.EventHandler<Incident_AddPriorityCompletedEventArgs> Incident_AddPriorityCompleted;
        
        public event System.EventHandler<Incident_CountCompletedEventArgs> Incident_CountCompleted;
        
        public event System.EventHandler<Incident_AddCommentsCompletedEventArgs> Incident_AddCommentsCompleted;
        
        public event System.EventHandler<Incident_AddSeverityCompletedEventArgs> Incident_AddSeverityCompleted;
        
        public event System.EventHandler<Incident_AddStatusCompletedEventArgs> Incident_AddStatusCompleted;
        
        public event System.EventHandler<Incident_AddTypeCompletedEventArgs> Incident_AddTypeCompleted;
        
        public event System.EventHandler<Incident_CreateCompletedEventArgs> Incident_CreateCompleted;
        
        public event System.EventHandler<Incident_RetrieveCompletedEventArgs> Incident_RetrieveCompleted;
        
        public event System.EventHandler<Incident_RetrieveByIdCompletedEventArgs> Incident_RetrieveByIdCompleted;
        
        public event System.EventHandler<Incident_RetrieveByTestCaseCompletedEventArgs> Incident_RetrieveByTestCaseCompleted;
        
        public event System.EventHandler<Incident_RetrieveByTestRunStepCompletedEventArgs> Incident_RetrieveByTestRunStepCompleted;
        
        public event System.EventHandler<Incident_RetrieveByTestStepCompletedEventArgs> Incident_RetrieveByTestStepCompleted;
        
        public event System.EventHandler<Incident_RetrieveForOwnerCompletedEventArgs> Incident_RetrieveForOwnerCompleted;
        
        public event System.EventHandler<Incident_RetrieveNewCompletedEventArgs> Incident_RetrieveNewCompleted;
        
        public event System.EventHandler<Incident_RetrievePrioritiesCompletedEventArgs> Incident_RetrievePrioritiesCompleted;
        
        public event System.EventHandler<Incident_RetrieveCommentsCompletedEventArgs> Incident_RetrieveCommentsCompleted;
        
        public event System.EventHandler<Incident_RetrieveSeveritiesCompletedEventArgs> Incident_RetrieveSeveritiesCompleted;
        
        public event System.EventHandler<Incident_RetrieveStatusesCompletedEventArgs> Incident_RetrieveStatusesCompleted;
        
        public event System.EventHandler<Incident_RetrieveTypesCompletedEventArgs> Incident_RetrieveTypesCompleted;
        
        public event System.EventHandler<Incident_RetrieveWorkflowFieldsCompletedEventArgs> Incident_RetrieveWorkflowFieldsCompleted;
        
        public event System.EventHandler<Incident_RetrieveWorkflowTransitionsCompletedEventArgs> Incident_RetrieveWorkflowTransitionsCompleted;
        
        public event System.EventHandler<Incident_RetrieveWorkflowCustomPropertiesCompletedEventArgs> Incident_RetrieveWorkflowCustomPropertiesCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> Incident_UpdateCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> Incident_DeleteCompleted;
        
        public event System.EventHandler<Incident_RetrieveDefaultStatusCompletedEventArgs> Incident_RetrieveDefaultStatusCompleted;
        
        public event System.EventHandler<Incident_RetrieveDefaultTypeCompletedEventArgs> Incident_RetrieveDefaultTypeCompleted;
        
        public event System.EventHandler<Project_CreateCompletedEventArgs> Project_CreateCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> Project_DeleteCompleted;
        
        public event System.EventHandler<Project_RetrieveCompletedEventArgs> Project_RetrieveCompleted;
        
        public event System.EventHandler<Project_RetrieveByIdCompletedEventArgs> Project_RetrieveByIdCompleted;
        
        public event System.EventHandler<Project_RetrieveUserMembershipCompletedEventArgs> Project_RetrieveUserMembershipCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> Project_RefreshProgressExecutionStatusCachesCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> Project_AddUserMembershipCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> Project_UpdateUserMembershipCompleted;
        
        public event System.EventHandler<ProjectRole_RetrieveCompletedEventArgs> ProjectRole_RetrieveCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> Release_AddTestMappingCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> Release_AddTestMapping2Completed;
        
        public event System.EventHandler<Release_CountCompletedEventArgs> Release_CountCompleted;
        
        public event System.EventHandler<Release_CreateCompletedEventArgs> Release_CreateCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> Release_RemoveTestMappingCompleted;
        
        public event System.EventHandler<Release_RetrieveCompletedEventArgs> Release_RetrieveCompleted;
        
        public event System.EventHandler<Release_Retrieve2CompletedEventArgs> Release_Retrieve2Completed;
        
        public event System.EventHandler<Release_RetrieveByIdCompletedEventArgs> Release_RetrieveByIdCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> Release_UpdateCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> Release_DeleteCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> Release_MoveCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> Release_IndentCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> Release_OutdentCompleted;
        
        public event System.EventHandler<Release_RetrieveCommentsCompletedEventArgs> Release_RetrieveCommentsCompleted;
        
        public event System.EventHandler<Release_RetrieveTestMappingCompletedEventArgs> Release_RetrieveTestMappingCompleted;
        
        public event System.EventHandler<Release_CreateCommentCompletedEventArgs> Release_CreateCommentCompleted;
        
        public event System.EventHandler<Release_RetrieveStatusesCompletedEventArgs> Release_RetrieveStatusesCompleted;
        
        public event System.EventHandler<Release_RetrieveTypesCompletedEventArgs> Release_RetrieveTypesCompleted;
        
        public event System.EventHandler<Release_RetrieveWorkflowFieldsCompletedEventArgs> Release_RetrieveWorkflowFieldsCompleted;
        
        public event System.EventHandler<Release_RetrieveWorkflowTransitionsCompletedEventArgs> Release_RetrieveWorkflowTransitionsCompleted;
        
        public event System.EventHandler<Release_RetrieveWorkflowCustomPropertiesCompletedEventArgs> Release_RetrieveWorkflowCustomPropertiesCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> Requirement_AddTestCoverageCompleted;
        
        public event System.EventHandler<Requirement_CountCompletedEventArgs> Requirement_CountCompleted;
        
        public event System.EventHandler<Requirement_Create1CompletedEventArgs> Requirement_Create1Completed;
        
        public event System.EventHandler<Requirement_Create2CompletedEventArgs> Requirement_Create2Completed;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> Requirement_RemoveTestCoverageCompleted;
        
        public event System.EventHandler<Requirement_RetrieveCompletedEventArgs> Requirement_RetrieveCompleted;
        
        public event System.EventHandler<Requirement_RetrieveByIdCompletedEventArgs> Requirement_RetrieveByIdCompleted;
        
        public event System.EventHandler<Requirement_RetrieveForOwnerCompletedEventArgs> Requirement_RetrieveForOwnerCompleted;
        
        public event System.EventHandler<Requirement_RetrieveTestCoverageCompletedEventArgs> Requirement_RetrieveTestCoverageCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> Requirement_UpdateCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> Requirement_DeleteCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> Requirement_MoveCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> Requirement_IndentCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> Requirement_OutdentCompleted;
        
        public event System.EventHandler<Requirement_RetrieveCommentsCompletedEventArgs> Requirement_RetrieveCommentsCompleted;
        
        public event System.EventHandler<Requirement_CreateCommentCompletedEventArgs> Requirement_CreateCommentCompleted;
        
        public event System.EventHandler<Requirement_RetrieveStatusesCompletedEventArgs> Requirement_RetrieveStatusesCompleted;
        
        public event System.EventHandler<Requirement_RetrieveTypesCompletedEventArgs> Requirement_RetrieveTypesCompleted;
        
        public event System.EventHandler<Requirement_RetrieveWorkflowFieldsCompletedEventArgs> Requirement_RetrieveWorkflowFieldsCompleted;
        
        public event System.EventHandler<Requirement_RetrieveWorkflowTransitionsCompletedEventArgs> Requirement_RetrieveWorkflowTransitionsCompleted;
        
        public event System.EventHandler<Requirement_RetrieveWorkflowCustomPropertiesCompletedEventArgs> Requirement_RetrieveWorkflowCustomPropertiesCompleted;
        
        public event System.EventHandler<Requirement_RetrieveStepsCompletedEventArgs> Requirement_RetrieveStepsCompleted;
        
        public event System.EventHandler<Requirement_RetrieveStepByIdCompletedEventArgs> Requirement_RetrieveStepByIdCompleted;
        
        public event System.EventHandler<Requirement_AddStepCompletedEventArgs> Requirement_AddStepCompleted;
        
        public bool Connection_Authenticate(string userName, string password) {
            return base.Channel.Connection_Authenticate(userName, password);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginConnection_Authenticate(string userName, string password, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginConnection_Authenticate(userName, password, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndConnection_Authenticate(System.IAsyncResult result) {
            return base.Channel.EndConnection_Authenticate(result);
        }
        
        private System.IAsyncResult OnBeginConnection_Authenticate(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string userName = ((string)(inValues[0]));
            string password = ((string)(inValues[1]));
            return this.BeginConnection_Authenticate(userName, password, callback, asyncState);
        }
        
        private object[] OnEndConnection_Authenticate(System.IAsyncResult result) {
            bool retVal = this.EndConnection_Authenticate(result);
            return new object[] {
                    retVal};
        }
        
        private void OnConnection_AuthenticateCompleted(object state) {
            if ((this.Connection_AuthenticateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Connection_AuthenticateCompleted(this, new Connection_AuthenticateCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Connection_AuthenticateAsync(string userName, string password) {
            this.Connection_AuthenticateAsync(userName, password, null);
        }
        
        public void Connection_AuthenticateAsync(string userName, string password, object userState) {
            if ((this.onBeginConnection_AuthenticateDelegate == null)) {
                this.onBeginConnection_AuthenticateDelegate = new BeginOperationDelegate(this.OnBeginConnection_Authenticate);
            }
            if ((this.onEndConnection_AuthenticateDelegate == null)) {
                this.onEndConnection_AuthenticateDelegate = new EndOperationDelegate(this.OnEndConnection_Authenticate);
            }
            if ((this.onConnection_AuthenticateCompletedDelegate == null)) {
                this.onConnection_AuthenticateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnConnection_AuthenticateCompleted);
            }
            base.InvokeAsync(this.onBeginConnection_AuthenticateDelegate, new object[] {
                        userName,
                        password}, this.onEndConnection_AuthenticateDelegate, this.onConnection_AuthenticateCompletedDelegate, userState);
        }
        
        public bool Connection_Authenticate2(string userName, string password, string plugInName) {
            return base.Channel.Connection_Authenticate2(userName, password, plugInName);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginConnection_Authenticate2(string userName, string password, string plugInName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginConnection_Authenticate2(userName, password, plugInName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndConnection_Authenticate2(System.IAsyncResult result) {
            return base.Channel.EndConnection_Authenticate2(result);
        }
        
        private System.IAsyncResult OnBeginConnection_Authenticate2(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string userName = ((string)(inValues[0]));
            string password = ((string)(inValues[1]));
            string plugInName = ((string)(inValues[2]));
            return this.BeginConnection_Authenticate2(userName, password, plugInName, callback, asyncState);
        }
        
        private object[] OnEndConnection_Authenticate2(System.IAsyncResult result) {
            bool retVal = this.EndConnection_Authenticate2(result);
            return new object[] {
                    retVal};
        }
        
        private void OnConnection_Authenticate2Completed(object state) {
            if ((this.Connection_Authenticate2Completed != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Connection_Authenticate2Completed(this, new Connection_Authenticate2CompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Connection_Authenticate2Async(string userName, string password, string plugInName) {
            this.Connection_Authenticate2Async(userName, password, plugInName, null);
        }
        
        public void Connection_Authenticate2Async(string userName, string password, string plugInName, object userState) {
            if ((this.onBeginConnection_Authenticate2Delegate == null)) {
                this.onBeginConnection_Authenticate2Delegate = new BeginOperationDelegate(this.OnBeginConnection_Authenticate2);
            }
            if ((this.onEndConnection_Authenticate2Delegate == null)) {
                this.onEndConnection_Authenticate2Delegate = new EndOperationDelegate(this.OnEndConnection_Authenticate2);
            }
            if ((this.onConnection_Authenticate2CompletedDelegate == null)) {
                this.onConnection_Authenticate2CompletedDelegate = new System.Threading.SendOrPostCallback(this.OnConnection_Authenticate2Completed);
            }
            base.InvokeAsync(this.onBeginConnection_Authenticate2Delegate, new object[] {
                        userName,
                        password,
                        plugInName}, this.onEndConnection_Authenticate2Delegate, this.onConnection_Authenticate2CompletedDelegate, userState);
        }
        
        public bool Connection_Authenticate3(string userName, string apiKey, string plugInName) {
            return base.Channel.Connection_Authenticate3(userName, apiKey, plugInName);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginConnection_Authenticate3(string userName, string apiKey, string plugInName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginConnection_Authenticate3(userName, apiKey, plugInName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndConnection_Authenticate3(System.IAsyncResult result) {
            return base.Channel.EndConnection_Authenticate3(result);
        }
        
        private System.IAsyncResult OnBeginConnection_Authenticate3(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string userName = ((string)(inValues[0]));
            string apiKey = ((string)(inValues[1]));
            string plugInName = ((string)(inValues[2]));
            return this.BeginConnection_Authenticate3(userName, apiKey, plugInName, callback, asyncState);
        }
        
        private object[] OnEndConnection_Authenticate3(System.IAsyncResult result) {
            bool retVal = this.EndConnection_Authenticate3(result);
            return new object[] {
                    retVal};
        }
        
        private void OnConnection_Authenticate3Completed(object state) {
            if ((this.Connection_Authenticate3Completed != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Connection_Authenticate3Completed(this, new Connection_Authenticate3CompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Connection_Authenticate3Async(string userName, string apiKey, string plugInName) {
            this.Connection_Authenticate3Async(userName, apiKey, plugInName, null);
        }
        
        public void Connection_Authenticate3Async(string userName, string apiKey, string plugInName, object userState) {
            if ((this.onBeginConnection_Authenticate3Delegate == null)) {
                this.onBeginConnection_Authenticate3Delegate = new BeginOperationDelegate(this.OnBeginConnection_Authenticate3);
            }
            if ((this.onEndConnection_Authenticate3Delegate == null)) {
                this.onEndConnection_Authenticate3Delegate = new EndOperationDelegate(this.OnEndConnection_Authenticate3);
            }
            if ((this.onConnection_Authenticate3CompletedDelegate == null)) {
                this.onConnection_Authenticate3CompletedDelegate = new System.Threading.SendOrPostCallback(this.OnConnection_Authenticate3Completed);
            }
            base.InvokeAsync(this.onBeginConnection_Authenticate3Delegate, new object[] {
                        userName,
                        apiKey,
                        plugInName}, this.onEndConnection_Authenticate3Delegate, this.onConnection_Authenticate3CompletedDelegate, userState);
        }
        
        public bool Connection_ConnectToProject(int projectId) {
            return base.Channel.Connection_ConnectToProject(projectId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginConnection_ConnectToProject(int projectId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginConnection_ConnectToProject(projectId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndConnection_ConnectToProject(System.IAsyncResult result) {
            return base.Channel.EndConnection_ConnectToProject(result);
        }
        
        private System.IAsyncResult OnBeginConnection_ConnectToProject(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int projectId = ((int)(inValues[0]));
            return this.BeginConnection_ConnectToProject(projectId, callback, asyncState);
        }
        
        private object[] OnEndConnection_ConnectToProject(System.IAsyncResult result) {
            bool retVal = this.EndConnection_ConnectToProject(result);
            return new object[] {
                    retVal};
        }
        
        private void OnConnection_ConnectToProjectCompleted(object state) {
            if ((this.Connection_ConnectToProjectCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Connection_ConnectToProjectCompleted(this, new Connection_ConnectToProjectCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Connection_ConnectToProjectAsync(int projectId) {
            this.Connection_ConnectToProjectAsync(projectId, null);
        }
        
        public void Connection_ConnectToProjectAsync(int projectId, object userState) {
            if ((this.onBeginConnection_ConnectToProjectDelegate == null)) {
                this.onBeginConnection_ConnectToProjectDelegate = new BeginOperationDelegate(this.OnBeginConnection_ConnectToProject);
            }
            if ((this.onEndConnection_ConnectToProjectDelegate == null)) {
                this.onEndConnection_ConnectToProjectDelegate = new EndOperationDelegate(this.OnEndConnection_ConnectToProject);
            }
            if ((this.onConnection_ConnectToProjectCompletedDelegate == null)) {
                this.onConnection_ConnectToProjectCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnConnection_ConnectToProjectCompleted);
            }
            base.InvokeAsync(this.onBeginConnection_ConnectToProjectDelegate, new object[] {
                        projectId}, this.onEndConnection_ConnectToProjectDelegate, this.onConnection_ConnectToProjectCompletedDelegate, userState);
        }
        
        public void Connection_Disconnect() {
            base.Channel.Connection_Disconnect();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginConnection_Disconnect(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginConnection_Disconnect(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndConnection_Disconnect(System.IAsyncResult result) {
            base.Channel.EndConnection_Disconnect(result);
        }
        
        private System.IAsyncResult OnBeginConnection_Disconnect(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginConnection_Disconnect(callback, asyncState);
        }
        
        private object[] OnEndConnection_Disconnect(System.IAsyncResult result) {
            this.EndConnection_Disconnect(result);
            return null;
        }
        
        private void OnConnection_DisconnectCompleted(object state) {
            if ((this.Connection_DisconnectCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Connection_DisconnectCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Connection_DisconnectAsync() {
            this.Connection_DisconnectAsync(null);
        }
        
        public void Connection_DisconnectAsync(object userState) {
            if ((this.onBeginConnection_DisconnectDelegate == null)) {
                this.onBeginConnection_DisconnectDelegate = new BeginOperationDelegate(this.OnBeginConnection_Disconnect);
            }
            if ((this.onEndConnection_DisconnectDelegate == null)) {
                this.onEndConnection_DisconnectDelegate = new EndOperationDelegate(this.OnEndConnection_Disconnect);
            }
            if ((this.onConnection_DisconnectCompletedDelegate == null)) {
                this.onConnection_DisconnectCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnConnection_DisconnectCompleted);
            }
            base.InvokeAsync(this.onBeginConnection_DisconnectDelegate, null, this.onEndConnection_DisconnectDelegate, this.onConnection_DisconnectCompletedDelegate, userState);
        }
        
        public string System_GetProductName() {
            return base.Channel.System_GetProductName();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSystem_GetProductName(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSystem_GetProductName(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndSystem_GetProductName(System.IAsyncResult result) {
            return base.Channel.EndSystem_GetProductName(result);
        }
        
        private System.IAsyncResult OnBeginSystem_GetProductName(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginSystem_GetProductName(callback, asyncState);
        }
        
        private object[] OnEndSystem_GetProductName(System.IAsyncResult result) {
            string retVal = this.EndSystem_GetProductName(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSystem_GetProductNameCompleted(object state) {
            if ((this.System_GetProductNameCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.System_GetProductNameCompleted(this, new System_GetProductNameCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void System_GetProductNameAsync() {
            this.System_GetProductNameAsync(null);
        }
        
        public void System_GetProductNameAsync(object userState) {
            if ((this.onBeginSystem_GetProductNameDelegate == null)) {
                this.onBeginSystem_GetProductNameDelegate = new BeginOperationDelegate(this.OnBeginSystem_GetProductName);
            }
            if ((this.onEndSystem_GetProductNameDelegate == null)) {
                this.onEndSystem_GetProductNameDelegate = new EndOperationDelegate(this.OnEndSystem_GetProductName);
            }
            if ((this.onSystem_GetProductNameCompletedDelegate == null)) {
                this.onSystem_GetProductNameCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSystem_GetProductNameCompleted);
            }
            base.InvokeAsync(this.onBeginSystem_GetProductNameDelegate, null, this.onEndSystem_GetProductNameDelegate, this.onSystem_GetProductNameCompletedDelegate, userState);
        }
        
        public System.DateTime System_GetServerDateTime() {
            return base.Channel.System_GetServerDateTime();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSystem_GetServerDateTime(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSystem_GetServerDateTime(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.DateTime EndSystem_GetServerDateTime(System.IAsyncResult result) {
            return base.Channel.EndSystem_GetServerDateTime(result);
        }
        
        private System.IAsyncResult OnBeginSystem_GetServerDateTime(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginSystem_GetServerDateTime(callback, asyncState);
        }
        
        private object[] OnEndSystem_GetServerDateTime(System.IAsyncResult result) {
            System.DateTime retVal = this.EndSystem_GetServerDateTime(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSystem_GetServerDateTimeCompleted(object state) {
            if ((this.System_GetServerDateTimeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.System_GetServerDateTimeCompleted(this, new System_GetServerDateTimeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void System_GetServerDateTimeAsync() {
            this.System_GetServerDateTimeAsync(null);
        }
        
        public void System_GetServerDateTimeAsync(object userState) {
            if ((this.onBeginSystem_GetServerDateTimeDelegate == null)) {
                this.onBeginSystem_GetServerDateTimeDelegate = new BeginOperationDelegate(this.OnBeginSystem_GetServerDateTime);
            }
            if ((this.onEndSystem_GetServerDateTimeDelegate == null)) {
                this.onEndSystem_GetServerDateTimeDelegate = new EndOperationDelegate(this.OnEndSystem_GetServerDateTime);
            }
            if ((this.onSystem_GetServerDateTimeCompletedDelegate == null)) {
                this.onSystem_GetServerDateTimeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSystem_GetServerDateTimeCompleted);
            }
            base.InvokeAsync(this.onBeginSystem_GetServerDateTimeDelegate, null, this.onEndSystem_GetServerDateTimeDelegate, this.onSystem_GetServerDateTimeCompletedDelegate, userState);
        }
        
        public string System_GetWebServerUrl() {
            return base.Channel.System_GetWebServerUrl();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSystem_GetWebServerUrl(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSystem_GetWebServerUrl(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndSystem_GetWebServerUrl(System.IAsyncResult result) {
            return base.Channel.EndSystem_GetWebServerUrl(result);
        }
        
        private System.IAsyncResult OnBeginSystem_GetWebServerUrl(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginSystem_GetWebServerUrl(callback, asyncState);
        }
        
        private object[] OnEndSystem_GetWebServerUrl(System.IAsyncResult result) {
            string retVal = this.EndSystem_GetWebServerUrl(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSystem_GetWebServerUrlCompleted(object state) {
            if ((this.System_GetWebServerUrlCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.System_GetWebServerUrlCompleted(this, new System_GetWebServerUrlCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void System_GetWebServerUrlAsync() {
            this.System_GetWebServerUrlAsync(null);
        }
        
        public void System_GetWebServerUrlAsync(object userState) {
            if ((this.onBeginSystem_GetWebServerUrlDelegate == null)) {
                this.onBeginSystem_GetWebServerUrlDelegate = new BeginOperationDelegate(this.OnBeginSystem_GetWebServerUrl);
            }
            if ((this.onEndSystem_GetWebServerUrlDelegate == null)) {
                this.onEndSystem_GetWebServerUrlDelegate = new EndOperationDelegate(this.OnEndSystem_GetWebServerUrl);
            }
            if ((this.onSystem_GetWebServerUrlCompletedDelegate == null)) {
                this.onSystem_GetWebServerUrlCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSystem_GetWebServerUrlCompleted);
            }
            base.InvokeAsync(this.onBeginSystem_GetWebServerUrlDelegate, null, this.onEndSystem_GetWebServerUrlDelegate, this.onSystem_GetWebServerUrlCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComponent Component_RetrieveById(int componentId) {
            return base.Channel.Component_RetrieveById(componentId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginComponent_RetrieveById(int componentId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginComponent_RetrieveById(componentId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComponent EndComponent_RetrieveById(System.IAsyncResult result) {
            return base.Channel.EndComponent_RetrieveById(result);
        }
        
        private System.IAsyncResult OnBeginComponent_RetrieveById(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int componentId = ((int)(inValues[0]));
            return this.BeginComponent_RetrieveById(componentId, callback, asyncState);
        }
        
        private object[] OnEndComponent_RetrieveById(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComponent retVal = this.EndComponent_RetrieveById(result);
            return new object[] {
                    retVal};
        }
        
        private void OnComponent_RetrieveByIdCompleted(object state) {
            if ((this.Component_RetrieveByIdCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Component_RetrieveByIdCompleted(this, new Component_RetrieveByIdCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Component_RetrieveByIdAsync(int componentId) {
            this.Component_RetrieveByIdAsync(componentId, null);
        }
        
        public void Component_RetrieveByIdAsync(int componentId, object userState) {
            if ((this.onBeginComponent_RetrieveByIdDelegate == null)) {
                this.onBeginComponent_RetrieveByIdDelegate = new BeginOperationDelegate(this.OnBeginComponent_RetrieveById);
            }
            if ((this.onEndComponent_RetrieveByIdDelegate == null)) {
                this.onEndComponent_RetrieveByIdDelegate = new EndOperationDelegate(this.OnEndComponent_RetrieveById);
            }
            if ((this.onComponent_RetrieveByIdCompletedDelegate == null)) {
                this.onComponent_RetrieveByIdCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnComponent_RetrieveByIdCompleted);
            }
            base.InvokeAsync(this.onBeginComponent_RetrieveByIdDelegate, new object[] {
                        componentId}, this.onEndComponent_RetrieveByIdDelegate, this.onComponent_RetrieveByIdCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComponent Component_Create(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComponent remoteComponent) {
            return base.Channel.Component_Create(remoteComponent);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginComponent_Create(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComponent remoteComponent, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginComponent_Create(remoteComponent, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComponent EndComponent_Create(System.IAsyncResult result) {
            return base.Channel.EndComponent_Create(result);
        }
        
        private System.IAsyncResult OnBeginComponent_Create(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComponent remoteComponent = ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComponent)(inValues[0]));
            return this.BeginComponent_Create(remoteComponent, callback, asyncState);
        }
        
        private object[] OnEndComponent_Create(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComponent retVal = this.EndComponent_Create(result);
            return new object[] {
                    retVal};
        }
        
        private void OnComponent_CreateCompleted(object state) {
            if ((this.Component_CreateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Component_CreateCompleted(this, new Component_CreateCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Component_CreateAsync(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComponent remoteComponent) {
            this.Component_CreateAsync(remoteComponent, null);
        }
        
        public void Component_CreateAsync(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComponent remoteComponent, object userState) {
            if ((this.onBeginComponent_CreateDelegate == null)) {
                this.onBeginComponent_CreateDelegate = new BeginOperationDelegate(this.OnBeginComponent_Create);
            }
            if ((this.onEndComponent_CreateDelegate == null)) {
                this.onEndComponent_CreateDelegate = new EndOperationDelegate(this.OnEndComponent_Create);
            }
            if ((this.onComponent_CreateCompletedDelegate == null)) {
                this.onComponent_CreateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnComponent_CreateCompleted);
            }
            base.InvokeAsync(this.onBeginComponent_CreateDelegate, new object[] {
                        remoteComponent}, this.onEndComponent_CreateDelegate, this.onComponent_CreateCompletedDelegate, userState);
        }
        
        public void Component_Update(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComponent remoteComponent) {
            base.Channel.Component_Update(remoteComponent);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginComponent_Update(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComponent remoteComponent, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginComponent_Update(remoteComponent, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndComponent_Update(System.IAsyncResult result) {
            base.Channel.EndComponent_Update(result);
        }
        
        private System.IAsyncResult OnBeginComponent_Update(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComponent remoteComponent = ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComponent)(inValues[0]));
            return this.BeginComponent_Update(remoteComponent, callback, asyncState);
        }
        
        private object[] OnEndComponent_Update(System.IAsyncResult result) {
            this.EndComponent_Update(result);
            return null;
        }
        
        private void OnComponent_UpdateCompleted(object state) {
            if ((this.Component_UpdateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Component_UpdateCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Component_UpdateAsync(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComponent remoteComponent) {
            this.Component_UpdateAsync(remoteComponent, null);
        }
        
        public void Component_UpdateAsync(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComponent remoteComponent, object userState) {
            if ((this.onBeginComponent_UpdateDelegate == null)) {
                this.onBeginComponent_UpdateDelegate = new BeginOperationDelegate(this.OnBeginComponent_Update);
            }
            if ((this.onEndComponent_UpdateDelegate == null)) {
                this.onEndComponent_UpdateDelegate = new EndOperationDelegate(this.OnEndComponent_Update);
            }
            if ((this.onComponent_UpdateCompletedDelegate == null)) {
                this.onComponent_UpdateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnComponent_UpdateCompleted);
            }
            base.InvokeAsync(this.onBeginComponent_UpdateDelegate, new object[] {
                        remoteComponent}, this.onEndComponent_UpdateDelegate, this.onComponent_UpdateCompletedDelegate, userState);
        }
        
        public void Component_Delete(int componentId) {
            base.Channel.Component_Delete(componentId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginComponent_Delete(int componentId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginComponent_Delete(componentId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndComponent_Delete(System.IAsyncResult result) {
            base.Channel.EndComponent_Delete(result);
        }
        
        private System.IAsyncResult OnBeginComponent_Delete(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int componentId = ((int)(inValues[0]));
            return this.BeginComponent_Delete(componentId, callback, asyncState);
        }
        
        private object[] OnEndComponent_Delete(System.IAsyncResult result) {
            this.EndComponent_Delete(result);
            return null;
        }
        
        private void OnComponent_DeleteCompleted(object state) {
            if ((this.Component_DeleteCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Component_DeleteCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Component_DeleteAsync(int componentId) {
            this.Component_DeleteAsync(componentId, null);
        }
        
        public void Component_DeleteAsync(int componentId, object userState) {
            if ((this.onBeginComponent_DeleteDelegate == null)) {
                this.onBeginComponent_DeleteDelegate = new BeginOperationDelegate(this.OnBeginComponent_Delete);
            }
            if ((this.onEndComponent_DeleteDelegate == null)) {
                this.onEndComponent_DeleteDelegate = new EndOperationDelegate(this.OnEndComponent_Delete);
            }
            if ((this.onComponent_DeleteCompletedDelegate == null)) {
                this.onComponent_DeleteCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnComponent_DeleteCompleted);
            }
            base.InvokeAsync(this.onBeginComponent_DeleteDelegate, new object[] {
                        componentId}, this.onEndComponent_DeleteDelegate, this.onComponent_DeleteCompletedDelegate, userState);
        }
        
        public void Component_Undelete(int componentId) {
            base.Channel.Component_Undelete(componentId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginComponent_Undelete(int componentId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginComponent_Undelete(componentId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndComponent_Undelete(System.IAsyncResult result) {
            base.Channel.EndComponent_Undelete(result);
        }
        
        private System.IAsyncResult OnBeginComponent_Undelete(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int componentId = ((int)(inValues[0]));
            return this.BeginComponent_Undelete(componentId, callback, asyncState);
        }
        
        private object[] OnEndComponent_Undelete(System.IAsyncResult result) {
            this.EndComponent_Undelete(result);
            return null;
        }
        
        private void OnComponent_UndeleteCompleted(object state) {
            if ((this.Component_UndeleteCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Component_UndeleteCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Component_UndeleteAsync(int componentId) {
            this.Component_UndeleteAsync(componentId, null);
        }
        
        public void Component_UndeleteAsync(int componentId, object userState) {
            if ((this.onBeginComponent_UndeleteDelegate == null)) {
                this.onBeginComponent_UndeleteDelegate = new BeginOperationDelegate(this.OnBeginComponent_Undelete);
            }
            if ((this.onEndComponent_UndeleteDelegate == null)) {
                this.onEndComponent_UndeleteDelegate = new EndOperationDelegate(this.OnEndComponent_Undelete);
            }
            if ((this.onComponent_UndeleteCompletedDelegate == null)) {
                this.onComponent_UndeleteCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnComponent_UndeleteCompleted);
            }
            base.InvokeAsync(this.onBeginComponent_UndeleteDelegate, new object[] {
                        componentId}, this.onEndComponent_UndeleteDelegate, this.onComponent_UndeleteCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteBuild[] Build_RetrieveByReleaseId(int releaseId, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSort remoteSort, int startingRow, int numberOfRows) {
            return base.Channel.Build_RetrieveByReleaseId(releaseId, remoteFilters, remoteSort, startingRow, numberOfRows);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginBuild_RetrieveByReleaseId(int releaseId, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSort remoteSort, int startingRow, int numberOfRows, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginBuild_RetrieveByReleaseId(releaseId, remoteFilters, remoteSort, startingRow, numberOfRows, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteBuild[] EndBuild_RetrieveByReleaseId(System.IAsyncResult result) {
            return base.Channel.EndBuild_RetrieveByReleaseId(result);
        }
        
        private System.IAsyncResult OnBeginBuild_RetrieveByReleaseId(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int releaseId = ((int)(inValues[0]));
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters = ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[])(inValues[1]));
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSort remoteSort = ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSort)(inValues[2]));
            int startingRow = ((int)(inValues[3]));
            int numberOfRows = ((int)(inValues[4]));
            return this.BeginBuild_RetrieveByReleaseId(releaseId, remoteFilters, remoteSort, startingRow, numberOfRows, callback, asyncState);
        }
        
        private object[] OnEndBuild_RetrieveByReleaseId(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteBuild[] retVal = this.EndBuild_RetrieveByReleaseId(result);
            return new object[] {
                    retVal};
        }
        
        private void OnBuild_RetrieveByReleaseIdCompleted(object state) {
            if ((this.Build_RetrieveByReleaseIdCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Build_RetrieveByReleaseIdCompleted(this, new Build_RetrieveByReleaseIdCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Build_RetrieveByReleaseIdAsync(int releaseId, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSort remoteSort, int startingRow, int numberOfRows) {
            this.Build_RetrieveByReleaseIdAsync(releaseId, remoteFilters, remoteSort, startingRow, numberOfRows, null);
        }
        
        public void Build_RetrieveByReleaseIdAsync(int releaseId, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSort remoteSort, int startingRow, int numberOfRows, object userState) {
            if ((this.onBeginBuild_RetrieveByReleaseIdDelegate == null)) {
                this.onBeginBuild_RetrieveByReleaseIdDelegate = new BeginOperationDelegate(this.OnBeginBuild_RetrieveByReleaseId);
            }
            if ((this.onEndBuild_RetrieveByReleaseIdDelegate == null)) {
                this.onEndBuild_RetrieveByReleaseIdDelegate = new EndOperationDelegate(this.OnEndBuild_RetrieveByReleaseId);
            }
            if ((this.onBuild_RetrieveByReleaseIdCompletedDelegate == null)) {
                this.onBuild_RetrieveByReleaseIdCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnBuild_RetrieveByReleaseIdCompleted);
            }
            base.InvokeAsync(this.onBeginBuild_RetrieveByReleaseIdDelegate, new object[] {
                        releaseId,
                        remoteFilters,
                        remoteSort,
                        startingRow,
                        numberOfRows}, this.onEndBuild_RetrieveByReleaseIdDelegate, this.onBuild_RetrieveByReleaseIdCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteBuild Build_RetrieveById(int releaseId, int buildId) {
            return base.Channel.Build_RetrieveById(releaseId, buildId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginBuild_RetrieveById(int releaseId, int buildId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginBuild_RetrieveById(releaseId, buildId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteBuild EndBuild_RetrieveById(System.IAsyncResult result) {
            return base.Channel.EndBuild_RetrieveById(result);
        }
        
        private System.IAsyncResult OnBeginBuild_RetrieveById(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int releaseId = ((int)(inValues[0]));
            int buildId = ((int)(inValues[1]));
            return this.BeginBuild_RetrieveById(releaseId, buildId, callback, asyncState);
        }
        
        private object[] OnEndBuild_RetrieveById(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteBuild retVal = this.EndBuild_RetrieveById(result);
            return new object[] {
                    retVal};
        }
        
        private void OnBuild_RetrieveByIdCompleted(object state) {
            if ((this.Build_RetrieveByIdCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Build_RetrieveByIdCompleted(this, new Build_RetrieveByIdCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Build_RetrieveByIdAsync(int releaseId, int buildId) {
            this.Build_RetrieveByIdAsync(releaseId, buildId, null);
        }
        
        public void Build_RetrieveByIdAsync(int releaseId, int buildId, object userState) {
            if ((this.onBeginBuild_RetrieveByIdDelegate == null)) {
                this.onBeginBuild_RetrieveByIdDelegate = new BeginOperationDelegate(this.OnBeginBuild_RetrieveById);
            }
            if ((this.onEndBuild_RetrieveByIdDelegate == null)) {
                this.onEndBuild_RetrieveByIdDelegate = new EndOperationDelegate(this.OnEndBuild_RetrieveById);
            }
            if ((this.onBuild_RetrieveByIdCompletedDelegate == null)) {
                this.onBuild_RetrieveByIdCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnBuild_RetrieveByIdCompleted);
            }
            base.InvokeAsync(this.onBeginBuild_RetrieveByIdDelegate, new object[] {
                        releaseId,
                        buildId}, this.onEndBuild_RetrieveByIdDelegate, this.onBuild_RetrieveByIdCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteBuild Build_Create(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteBuild remoteBuild) {
            return base.Channel.Build_Create(remoteBuild);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginBuild_Create(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteBuild remoteBuild, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginBuild_Create(remoteBuild, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteBuild EndBuild_Create(System.IAsyncResult result) {
            return base.Channel.EndBuild_Create(result);
        }
        
        private System.IAsyncResult OnBeginBuild_Create(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteBuild remoteBuild = ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteBuild)(inValues[0]));
            return this.BeginBuild_Create(remoteBuild, callback, asyncState);
        }
        
        private object[] OnEndBuild_Create(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteBuild retVal = this.EndBuild_Create(result);
            return new object[] {
                    retVal};
        }
        
        private void OnBuild_CreateCompleted(object state) {
            if ((this.Build_CreateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Build_CreateCompleted(this, new Build_CreateCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Build_CreateAsync(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteBuild remoteBuild) {
            this.Build_CreateAsync(remoteBuild, null);
        }
        
        public void Build_CreateAsync(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteBuild remoteBuild, object userState) {
            if ((this.onBeginBuild_CreateDelegate == null)) {
                this.onBeginBuild_CreateDelegate = new BeginOperationDelegate(this.OnBeginBuild_Create);
            }
            if ((this.onEndBuild_CreateDelegate == null)) {
                this.onEndBuild_CreateDelegate = new EndOperationDelegate(this.OnEndBuild_Create);
            }
            if ((this.onBuild_CreateCompletedDelegate == null)) {
                this.onBuild_CreateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnBuild_CreateCompleted);
            }
            base.InvokeAsync(this.onBeginBuild_CreateDelegate, new object[] {
                        remoteBuild}, this.onEndBuild_CreateDelegate, this.onBuild_CreateCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSourceCodeBranch[] SourceCode_RetrieveBranches() {
            return base.Channel.SourceCode_RetrieveBranches();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSourceCode_RetrieveBranches(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSourceCode_RetrieveBranches(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSourceCodeBranch[] EndSourceCode_RetrieveBranches(System.IAsyncResult result) {
            return base.Channel.EndSourceCode_RetrieveBranches(result);
        }
        
        private System.IAsyncResult OnBeginSourceCode_RetrieveBranches(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginSourceCode_RetrieveBranches(callback, asyncState);
        }
        
        private object[] OnEndSourceCode_RetrieveBranches(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSourceCodeBranch[] retVal = this.EndSourceCode_RetrieveBranches(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSourceCode_RetrieveBranchesCompleted(object state) {
            if ((this.SourceCode_RetrieveBranchesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SourceCode_RetrieveBranchesCompleted(this, new SourceCode_RetrieveBranchesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SourceCode_RetrieveBranchesAsync() {
            this.SourceCode_RetrieveBranchesAsync(null);
        }
        
        public void SourceCode_RetrieveBranchesAsync(object userState) {
            if ((this.onBeginSourceCode_RetrieveBranchesDelegate == null)) {
                this.onBeginSourceCode_RetrieveBranchesDelegate = new BeginOperationDelegate(this.OnBeginSourceCode_RetrieveBranches);
            }
            if ((this.onEndSourceCode_RetrieveBranchesDelegate == null)) {
                this.onEndSourceCode_RetrieveBranchesDelegate = new EndOperationDelegate(this.OnEndSourceCode_RetrieveBranches);
            }
            if ((this.onSourceCode_RetrieveBranchesCompletedDelegate == null)) {
                this.onSourceCode_RetrieveBranchesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSourceCode_RetrieveBranchesCompleted);
            }
            base.InvokeAsync(this.onBeginSourceCode_RetrieveBranchesDelegate, null, this.onEndSourceCode_RetrieveBranchesDelegate, this.onSourceCode_RetrieveBranchesCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSourceCodeFolder[] SourceCode_RetrieveFoldersByParent(string branchId, string parentFolderId) {
            return base.Channel.SourceCode_RetrieveFoldersByParent(branchId, parentFolderId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSourceCode_RetrieveFoldersByParent(string branchId, string parentFolderId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSourceCode_RetrieveFoldersByParent(branchId, parentFolderId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSourceCodeFolder[] EndSourceCode_RetrieveFoldersByParent(System.IAsyncResult result) {
            return base.Channel.EndSourceCode_RetrieveFoldersByParent(result);
        }
        
        private System.IAsyncResult OnBeginSourceCode_RetrieveFoldersByParent(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string branchId = ((string)(inValues[0]));
            string parentFolderId = ((string)(inValues[1]));
            return this.BeginSourceCode_RetrieveFoldersByParent(branchId, parentFolderId, callback, asyncState);
        }
        
        private object[] OnEndSourceCode_RetrieveFoldersByParent(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSourceCodeFolder[] retVal = this.EndSourceCode_RetrieveFoldersByParent(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSourceCode_RetrieveFoldersByParentCompleted(object state) {
            if ((this.SourceCode_RetrieveFoldersByParentCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SourceCode_RetrieveFoldersByParentCompleted(this, new SourceCode_RetrieveFoldersByParentCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SourceCode_RetrieveFoldersByParentAsync(string branchId, string parentFolderId) {
            this.SourceCode_RetrieveFoldersByParentAsync(branchId, parentFolderId, null);
        }
        
        public void SourceCode_RetrieveFoldersByParentAsync(string branchId, string parentFolderId, object userState) {
            if ((this.onBeginSourceCode_RetrieveFoldersByParentDelegate == null)) {
                this.onBeginSourceCode_RetrieveFoldersByParentDelegate = new BeginOperationDelegate(this.OnBeginSourceCode_RetrieveFoldersByParent);
            }
            if ((this.onEndSourceCode_RetrieveFoldersByParentDelegate == null)) {
                this.onEndSourceCode_RetrieveFoldersByParentDelegate = new EndOperationDelegate(this.OnEndSourceCode_RetrieveFoldersByParent);
            }
            if ((this.onSourceCode_RetrieveFoldersByParentCompletedDelegate == null)) {
                this.onSourceCode_RetrieveFoldersByParentCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSourceCode_RetrieveFoldersByParentCompleted);
            }
            base.InvokeAsync(this.onBeginSourceCode_RetrieveFoldersByParentDelegate, new object[] {
                        branchId,
                        parentFolderId}, this.onEndSourceCode_RetrieveFoldersByParentDelegate, this.onSourceCode_RetrieveFoldersByParentCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSourceCodeFile[] SourceCode_RetrieveFilesByFolder(string branchId, string folderId) {
            return base.Channel.SourceCode_RetrieveFilesByFolder(branchId, folderId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSourceCode_RetrieveFilesByFolder(string branchId, string folderId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSourceCode_RetrieveFilesByFolder(branchId, folderId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSourceCodeFile[] EndSourceCode_RetrieveFilesByFolder(System.IAsyncResult result) {
            return base.Channel.EndSourceCode_RetrieveFilesByFolder(result);
        }
        
        private System.IAsyncResult OnBeginSourceCode_RetrieveFilesByFolder(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string branchId = ((string)(inValues[0]));
            string folderId = ((string)(inValues[1]));
            return this.BeginSourceCode_RetrieveFilesByFolder(branchId, folderId, callback, asyncState);
        }
        
        private object[] OnEndSourceCode_RetrieveFilesByFolder(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSourceCodeFile[] retVal = this.EndSourceCode_RetrieveFilesByFolder(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSourceCode_RetrieveFilesByFolderCompleted(object state) {
            if ((this.SourceCode_RetrieveFilesByFolderCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SourceCode_RetrieveFilesByFolderCompleted(this, new SourceCode_RetrieveFilesByFolderCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SourceCode_RetrieveFilesByFolderAsync(string branchId, string folderId) {
            this.SourceCode_RetrieveFilesByFolderAsync(branchId, folderId, null);
        }
        
        public void SourceCode_RetrieveFilesByFolderAsync(string branchId, string folderId, object userState) {
            if ((this.onBeginSourceCode_RetrieveFilesByFolderDelegate == null)) {
                this.onBeginSourceCode_RetrieveFilesByFolderDelegate = new BeginOperationDelegate(this.OnBeginSourceCode_RetrieveFilesByFolder);
            }
            if ((this.onEndSourceCode_RetrieveFilesByFolderDelegate == null)) {
                this.onEndSourceCode_RetrieveFilesByFolderDelegate = new EndOperationDelegate(this.OnEndSourceCode_RetrieveFilesByFolder);
            }
            if ((this.onSourceCode_RetrieveFilesByFolderCompletedDelegate == null)) {
                this.onSourceCode_RetrieveFilesByFolderCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSourceCode_RetrieveFilesByFolderCompleted);
            }
            base.InvokeAsync(this.onBeginSourceCode_RetrieveFilesByFolderDelegate, new object[] {
                        branchId,
                        folderId}, this.onEndSourceCode_RetrieveFilesByFolderDelegate, this.onSourceCode_RetrieveFilesByFolderCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSourceCodeFile[] SourceCode_RetrieveFilesByRevision(string branchId, string revisionId) {
            return base.Channel.SourceCode_RetrieveFilesByRevision(branchId, revisionId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSourceCode_RetrieveFilesByRevision(string branchId, string revisionId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSourceCode_RetrieveFilesByRevision(branchId, revisionId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSourceCodeFile[] EndSourceCode_RetrieveFilesByRevision(System.IAsyncResult result) {
            return base.Channel.EndSourceCode_RetrieveFilesByRevision(result);
        }
        
        private System.IAsyncResult OnBeginSourceCode_RetrieveFilesByRevision(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string branchId = ((string)(inValues[0]));
            string revisionId = ((string)(inValues[1]));
            return this.BeginSourceCode_RetrieveFilesByRevision(branchId, revisionId, callback, asyncState);
        }
        
        private object[] OnEndSourceCode_RetrieveFilesByRevision(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSourceCodeFile[] retVal = this.EndSourceCode_RetrieveFilesByRevision(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSourceCode_RetrieveFilesByRevisionCompleted(object state) {
            if ((this.SourceCode_RetrieveFilesByRevisionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SourceCode_RetrieveFilesByRevisionCompleted(this, new SourceCode_RetrieveFilesByRevisionCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SourceCode_RetrieveFilesByRevisionAsync(string branchId, string revisionId) {
            this.SourceCode_RetrieveFilesByRevisionAsync(branchId, revisionId, null);
        }
        
        public void SourceCode_RetrieveFilesByRevisionAsync(string branchId, string revisionId, object userState) {
            if ((this.onBeginSourceCode_RetrieveFilesByRevisionDelegate == null)) {
                this.onBeginSourceCode_RetrieveFilesByRevisionDelegate = new BeginOperationDelegate(this.OnBeginSourceCode_RetrieveFilesByRevision);
            }
            if ((this.onEndSourceCode_RetrieveFilesByRevisionDelegate == null)) {
                this.onEndSourceCode_RetrieveFilesByRevisionDelegate = new EndOperationDelegate(this.OnEndSourceCode_RetrieveFilesByRevision);
            }
            if ((this.onSourceCode_RetrieveFilesByRevisionCompletedDelegate == null)) {
                this.onSourceCode_RetrieveFilesByRevisionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSourceCode_RetrieveFilesByRevisionCompleted);
            }
            base.InvokeAsync(this.onBeginSourceCode_RetrieveFilesByRevisionDelegate, new object[] {
                        branchId,
                        revisionId}, this.onEndSourceCode_RetrieveFilesByRevisionDelegate, this.onSourceCode_RetrieveFilesByRevisionCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSourceCodeFile SourceCode_RetrieveFileById(string branchId, string fileId) {
            return base.Channel.SourceCode_RetrieveFileById(branchId, fileId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSourceCode_RetrieveFileById(string branchId, string fileId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSourceCode_RetrieveFileById(branchId, fileId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSourceCodeFile EndSourceCode_RetrieveFileById(System.IAsyncResult result) {
            return base.Channel.EndSourceCode_RetrieveFileById(result);
        }
        
        private System.IAsyncResult OnBeginSourceCode_RetrieveFileById(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string branchId = ((string)(inValues[0]));
            string fileId = ((string)(inValues[1]));
            return this.BeginSourceCode_RetrieveFileById(branchId, fileId, callback, asyncState);
        }
        
        private object[] OnEndSourceCode_RetrieveFileById(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSourceCodeFile retVal = this.EndSourceCode_RetrieveFileById(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSourceCode_RetrieveFileByIdCompleted(object state) {
            if ((this.SourceCode_RetrieveFileByIdCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SourceCode_RetrieveFileByIdCompleted(this, new SourceCode_RetrieveFileByIdCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SourceCode_RetrieveFileByIdAsync(string branchId, string fileId) {
            this.SourceCode_RetrieveFileByIdAsync(branchId, fileId, null);
        }
        
        public void SourceCode_RetrieveFileByIdAsync(string branchId, string fileId, object userState) {
            if ((this.onBeginSourceCode_RetrieveFileByIdDelegate == null)) {
                this.onBeginSourceCode_RetrieveFileByIdDelegate = new BeginOperationDelegate(this.OnBeginSourceCode_RetrieveFileById);
            }
            if ((this.onEndSourceCode_RetrieveFileByIdDelegate == null)) {
                this.onEndSourceCode_RetrieveFileByIdDelegate = new EndOperationDelegate(this.OnEndSourceCode_RetrieveFileById);
            }
            if ((this.onSourceCode_RetrieveFileByIdCompletedDelegate == null)) {
                this.onSourceCode_RetrieveFileByIdCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSourceCode_RetrieveFileByIdCompleted);
            }
            base.InvokeAsync(this.onBeginSourceCode_RetrieveFileByIdDelegate, new object[] {
                        branchId,
                        fileId}, this.onEndSourceCode_RetrieveFileByIdDelegate, this.onSourceCode_RetrieveFileByIdCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSourceCodeFile[] SourceCode_RetrieveFilesForArtifact(string branchId, int artifactTypeId, int artifactId) {
            return base.Channel.SourceCode_RetrieveFilesForArtifact(branchId, artifactTypeId, artifactId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSourceCode_RetrieveFilesForArtifact(string branchId, int artifactTypeId, int artifactId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSourceCode_RetrieveFilesForArtifact(branchId, artifactTypeId, artifactId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSourceCodeFile[] EndSourceCode_RetrieveFilesForArtifact(System.IAsyncResult result) {
            return base.Channel.EndSourceCode_RetrieveFilesForArtifact(result);
        }
        
        private System.IAsyncResult OnBeginSourceCode_RetrieveFilesForArtifact(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string branchId = ((string)(inValues[0]));
            int artifactTypeId = ((int)(inValues[1]));
            int artifactId = ((int)(inValues[2]));
            return this.BeginSourceCode_RetrieveFilesForArtifact(branchId, artifactTypeId, artifactId, callback, asyncState);
        }
        
        private object[] OnEndSourceCode_RetrieveFilesForArtifact(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSourceCodeFile[] retVal = this.EndSourceCode_RetrieveFilesForArtifact(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSourceCode_RetrieveFilesForArtifactCompleted(object state) {
            if ((this.SourceCode_RetrieveFilesForArtifactCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SourceCode_RetrieveFilesForArtifactCompleted(this, new SourceCode_RetrieveFilesForArtifactCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SourceCode_RetrieveFilesForArtifactAsync(string branchId, int artifactTypeId, int artifactId) {
            this.SourceCode_RetrieveFilesForArtifactAsync(branchId, artifactTypeId, artifactId, null);
        }
        
        public void SourceCode_RetrieveFilesForArtifactAsync(string branchId, int artifactTypeId, int artifactId, object userState) {
            if ((this.onBeginSourceCode_RetrieveFilesForArtifactDelegate == null)) {
                this.onBeginSourceCode_RetrieveFilesForArtifactDelegate = new BeginOperationDelegate(this.OnBeginSourceCode_RetrieveFilesForArtifact);
            }
            if ((this.onEndSourceCode_RetrieveFilesForArtifactDelegate == null)) {
                this.onEndSourceCode_RetrieveFilesForArtifactDelegate = new EndOperationDelegate(this.OnEndSourceCode_RetrieveFilesForArtifact);
            }
            if ((this.onSourceCode_RetrieveFilesForArtifactCompletedDelegate == null)) {
                this.onSourceCode_RetrieveFilesForArtifactCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSourceCode_RetrieveFilesForArtifactCompleted);
            }
            base.InvokeAsync(this.onBeginSourceCode_RetrieveFilesForArtifactDelegate, new object[] {
                        branchId,
                        artifactTypeId,
                        artifactId}, this.onEndSourceCode_RetrieveFilesForArtifactDelegate, this.onSourceCode_RetrieveFilesForArtifactCompletedDelegate, userState);
        }
        
        public byte[] SourceCode_OpenFileById(string branchId, string fileId, string revisionId) {
            return base.Channel.SourceCode_OpenFileById(branchId, fileId, revisionId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSourceCode_OpenFileById(string branchId, string fileId, string revisionId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSourceCode_OpenFileById(branchId, fileId, revisionId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public byte[] EndSourceCode_OpenFileById(System.IAsyncResult result) {
            return base.Channel.EndSourceCode_OpenFileById(result);
        }
        
        private System.IAsyncResult OnBeginSourceCode_OpenFileById(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string branchId = ((string)(inValues[0]));
            string fileId = ((string)(inValues[1]));
            string revisionId = ((string)(inValues[2]));
            return this.BeginSourceCode_OpenFileById(branchId, fileId, revisionId, callback, asyncState);
        }
        
        private object[] OnEndSourceCode_OpenFileById(System.IAsyncResult result) {
            byte[] retVal = this.EndSourceCode_OpenFileById(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSourceCode_OpenFileByIdCompleted(object state) {
            if ((this.SourceCode_OpenFileByIdCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SourceCode_OpenFileByIdCompleted(this, new SourceCode_OpenFileByIdCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SourceCode_OpenFileByIdAsync(string branchId, string fileId, string revisionId) {
            this.SourceCode_OpenFileByIdAsync(branchId, fileId, revisionId, null);
        }
        
        public void SourceCode_OpenFileByIdAsync(string branchId, string fileId, string revisionId, object userState) {
            if ((this.onBeginSourceCode_OpenFileByIdDelegate == null)) {
                this.onBeginSourceCode_OpenFileByIdDelegate = new BeginOperationDelegate(this.OnBeginSourceCode_OpenFileById);
            }
            if ((this.onEndSourceCode_OpenFileByIdDelegate == null)) {
                this.onEndSourceCode_OpenFileByIdDelegate = new EndOperationDelegate(this.OnEndSourceCode_OpenFileById);
            }
            if ((this.onSourceCode_OpenFileByIdCompletedDelegate == null)) {
                this.onSourceCode_OpenFileByIdCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSourceCode_OpenFileByIdCompleted);
            }
            base.InvokeAsync(this.onBeginSourceCode_OpenFileByIdDelegate, new object[] {
                        branchId,
                        fileId,
                        revisionId}, this.onEndSourceCode_OpenFileByIdDelegate, this.onSourceCode_OpenFileByIdCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSourceCodeRevision[] SourceCode_RetrieveRevisions(string branchId, int startRow, int numberRows, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSort remoteSort, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters) {
            return base.Channel.SourceCode_RetrieveRevisions(branchId, startRow, numberRows, remoteSort, remoteFilters);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSourceCode_RetrieveRevisions(string branchId, int startRow, int numberRows, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSort remoteSort, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSourceCode_RetrieveRevisions(branchId, startRow, numberRows, remoteSort, remoteFilters, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSourceCodeRevision[] EndSourceCode_RetrieveRevisions(System.IAsyncResult result) {
            return base.Channel.EndSourceCode_RetrieveRevisions(result);
        }
        
        private System.IAsyncResult OnBeginSourceCode_RetrieveRevisions(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string branchId = ((string)(inValues[0]));
            int startRow = ((int)(inValues[1]));
            int numberRows = ((int)(inValues[2]));
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSort remoteSort = ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSort)(inValues[3]));
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters = ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[])(inValues[4]));
            return this.BeginSourceCode_RetrieveRevisions(branchId, startRow, numberRows, remoteSort, remoteFilters, callback, asyncState);
        }
        
        private object[] OnEndSourceCode_RetrieveRevisions(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSourceCodeRevision[] retVal = this.EndSourceCode_RetrieveRevisions(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSourceCode_RetrieveRevisionsCompleted(object state) {
            if ((this.SourceCode_RetrieveRevisionsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SourceCode_RetrieveRevisionsCompleted(this, new SourceCode_RetrieveRevisionsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SourceCode_RetrieveRevisionsAsync(string branchId, int startRow, int numberRows, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSort remoteSort, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters) {
            this.SourceCode_RetrieveRevisionsAsync(branchId, startRow, numberRows, remoteSort, remoteFilters, null);
        }
        
        public void SourceCode_RetrieveRevisionsAsync(string branchId, int startRow, int numberRows, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSort remoteSort, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters, object userState) {
            if ((this.onBeginSourceCode_RetrieveRevisionsDelegate == null)) {
                this.onBeginSourceCode_RetrieveRevisionsDelegate = new BeginOperationDelegate(this.OnBeginSourceCode_RetrieveRevisions);
            }
            if ((this.onEndSourceCode_RetrieveRevisionsDelegate == null)) {
                this.onEndSourceCode_RetrieveRevisionsDelegate = new EndOperationDelegate(this.OnEndSourceCode_RetrieveRevisions);
            }
            if ((this.onSourceCode_RetrieveRevisionsCompletedDelegate == null)) {
                this.onSourceCode_RetrieveRevisionsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSourceCode_RetrieveRevisionsCompleted);
            }
            base.InvokeAsync(this.onBeginSourceCode_RetrieveRevisionsDelegate, new object[] {
                        branchId,
                        startRow,
                        numberRows,
                        remoteSort,
                        remoteFilters}, this.onEndSourceCode_RetrieveRevisionsDelegate, this.onSourceCode_RetrieveRevisionsCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSourceCodeRevision[] SourceCode_RetrieveRevisionsForFile(string branchId, string fileId) {
            return base.Channel.SourceCode_RetrieveRevisionsForFile(branchId, fileId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSourceCode_RetrieveRevisionsForFile(string branchId, string fileId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSourceCode_RetrieveRevisionsForFile(branchId, fileId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSourceCodeRevision[] EndSourceCode_RetrieveRevisionsForFile(System.IAsyncResult result) {
            return base.Channel.EndSourceCode_RetrieveRevisionsForFile(result);
        }
        
        private System.IAsyncResult OnBeginSourceCode_RetrieveRevisionsForFile(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string branchId = ((string)(inValues[0]));
            string fileId = ((string)(inValues[1]));
            return this.BeginSourceCode_RetrieveRevisionsForFile(branchId, fileId, callback, asyncState);
        }
        
        private object[] OnEndSourceCode_RetrieveRevisionsForFile(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSourceCodeRevision[] retVal = this.EndSourceCode_RetrieveRevisionsForFile(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSourceCode_RetrieveRevisionsForFileCompleted(object state) {
            if ((this.SourceCode_RetrieveRevisionsForFileCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SourceCode_RetrieveRevisionsForFileCompleted(this, new SourceCode_RetrieveRevisionsForFileCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SourceCode_RetrieveRevisionsForFileAsync(string branchId, string fileId) {
            this.SourceCode_RetrieveRevisionsForFileAsync(branchId, fileId, null);
        }
        
        public void SourceCode_RetrieveRevisionsForFileAsync(string branchId, string fileId, object userState) {
            if ((this.onBeginSourceCode_RetrieveRevisionsForFileDelegate == null)) {
                this.onBeginSourceCode_RetrieveRevisionsForFileDelegate = new BeginOperationDelegate(this.OnBeginSourceCode_RetrieveRevisionsForFile);
            }
            if ((this.onEndSourceCode_RetrieveRevisionsForFileDelegate == null)) {
                this.onEndSourceCode_RetrieveRevisionsForFileDelegate = new EndOperationDelegate(this.OnEndSourceCode_RetrieveRevisionsForFile);
            }
            if ((this.onSourceCode_RetrieveRevisionsForFileCompletedDelegate == null)) {
                this.onSourceCode_RetrieveRevisionsForFileCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSourceCode_RetrieveRevisionsForFileCompleted);
            }
            base.InvokeAsync(this.onBeginSourceCode_RetrieveRevisionsForFileDelegate, new object[] {
                        branchId,
                        fileId}, this.onEndSourceCode_RetrieveRevisionsForFileDelegate, this.onSourceCode_RetrieveRevisionsForFileCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSourceCodeRevision SourceCode_RetrieveRevisionById(string branchId, string revisionId) {
            return base.Channel.SourceCode_RetrieveRevisionById(branchId, revisionId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSourceCode_RetrieveRevisionById(string branchId, string revisionId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSourceCode_RetrieveRevisionById(branchId, revisionId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSourceCodeRevision EndSourceCode_RetrieveRevisionById(System.IAsyncResult result) {
            return base.Channel.EndSourceCode_RetrieveRevisionById(result);
        }
        
        private System.IAsyncResult OnBeginSourceCode_RetrieveRevisionById(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string branchId = ((string)(inValues[0]));
            string revisionId = ((string)(inValues[1]));
            return this.BeginSourceCode_RetrieveRevisionById(branchId, revisionId, callback, asyncState);
        }
        
        private object[] OnEndSourceCode_RetrieveRevisionById(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSourceCodeRevision retVal = this.EndSourceCode_RetrieveRevisionById(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSourceCode_RetrieveRevisionByIdCompleted(object state) {
            if ((this.SourceCode_RetrieveRevisionByIdCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SourceCode_RetrieveRevisionByIdCompleted(this, new SourceCode_RetrieveRevisionByIdCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SourceCode_RetrieveRevisionByIdAsync(string branchId, string revisionId) {
            this.SourceCode_RetrieveRevisionByIdAsync(branchId, revisionId, null);
        }
        
        public void SourceCode_RetrieveRevisionByIdAsync(string branchId, string revisionId, object userState) {
            if ((this.onBeginSourceCode_RetrieveRevisionByIdDelegate == null)) {
                this.onBeginSourceCode_RetrieveRevisionByIdDelegate = new BeginOperationDelegate(this.OnBeginSourceCode_RetrieveRevisionById);
            }
            if ((this.onEndSourceCode_RetrieveRevisionByIdDelegate == null)) {
                this.onEndSourceCode_RetrieveRevisionByIdDelegate = new EndOperationDelegate(this.OnEndSourceCode_RetrieveRevisionById);
            }
            if ((this.onSourceCode_RetrieveRevisionByIdCompletedDelegate == null)) {
                this.onSourceCode_RetrieveRevisionByIdCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSourceCode_RetrieveRevisionByIdCompleted);
            }
            base.InvokeAsync(this.onBeginSourceCode_RetrieveRevisionByIdDelegate, new object[] {
                        branchId,
                        revisionId}, this.onEndSourceCode_RetrieveRevisionByIdDelegate, this.onSourceCode_RetrieveRevisionByIdCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSourceCodeRevision[] SourceCode_RetrieveRevisionsForArtifact(string branchId, int artifactTypeId, int artifactId) {
            return base.Channel.SourceCode_RetrieveRevisionsForArtifact(branchId, artifactTypeId, artifactId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSourceCode_RetrieveRevisionsForArtifact(string branchId, int artifactTypeId, int artifactId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSourceCode_RetrieveRevisionsForArtifact(branchId, artifactTypeId, artifactId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSourceCodeRevision[] EndSourceCode_RetrieveRevisionsForArtifact(System.IAsyncResult result) {
            return base.Channel.EndSourceCode_RetrieveRevisionsForArtifact(result);
        }
        
        private System.IAsyncResult OnBeginSourceCode_RetrieveRevisionsForArtifact(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string branchId = ((string)(inValues[0]));
            int artifactTypeId = ((int)(inValues[1]));
            int artifactId = ((int)(inValues[2]));
            return this.BeginSourceCode_RetrieveRevisionsForArtifact(branchId, artifactTypeId, artifactId, callback, asyncState);
        }
        
        private object[] OnEndSourceCode_RetrieveRevisionsForArtifact(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSourceCodeRevision[] retVal = this.EndSourceCode_RetrieveRevisionsForArtifact(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSourceCode_RetrieveRevisionsForArtifactCompleted(object state) {
            if ((this.SourceCode_RetrieveRevisionsForArtifactCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SourceCode_RetrieveRevisionsForArtifactCompleted(this, new SourceCode_RetrieveRevisionsForArtifactCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SourceCode_RetrieveRevisionsForArtifactAsync(string branchId, int artifactTypeId, int artifactId) {
            this.SourceCode_RetrieveRevisionsForArtifactAsync(branchId, artifactTypeId, artifactId, null);
        }
        
        public void SourceCode_RetrieveRevisionsForArtifactAsync(string branchId, int artifactTypeId, int artifactId, object userState) {
            if ((this.onBeginSourceCode_RetrieveRevisionsForArtifactDelegate == null)) {
                this.onBeginSourceCode_RetrieveRevisionsForArtifactDelegate = new BeginOperationDelegate(this.OnBeginSourceCode_RetrieveRevisionsForArtifact);
            }
            if ((this.onEndSourceCode_RetrieveRevisionsForArtifactDelegate == null)) {
                this.onEndSourceCode_RetrieveRevisionsForArtifactDelegate = new EndOperationDelegate(this.OnEndSourceCode_RetrieveRevisionsForArtifact);
            }
            if ((this.onSourceCode_RetrieveRevisionsForArtifactCompletedDelegate == null)) {
                this.onSourceCode_RetrieveRevisionsForArtifactCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSourceCode_RetrieveRevisionsForArtifactCompleted);
            }
            base.InvokeAsync(this.onBeginSourceCode_RetrieveRevisionsForArtifactDelegate, new object[] {
                        branchId,
                        artifactTypeId,
                        artifactId}, this.onEndSourceCode_RetrieveRevisionsForArtifactDelegate, this.onSourceCode_RetrieveRevisionsForArtifactCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteLinkedArtifact[] SourceCode_RetrieveArtifactsForRevision(string branchId, string revisionId) {
            return base.Channel.SourceCode_RetrieveArtifactsForRevision(branchId, revisionId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSourceCode_RetrieveArtifactsForRevision(string branchId, string revisionId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSourceCode_RetrieveArtifactsForRevision(branchId, revisionId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteLinkedArtifact[] EndSourceCode_RetrieveArtifactsForRevision(System.IAsyncResult result) {
            return base.Channel.EndSourceCode_RetrieveArtifactsForRevision(result);
        }
        
        private System.IAsyncResult OnBeginSourceCode_RetrieveArtifactsForRevision(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string branchId = ((string)(inValues[0]));
            string revisionId = ((string)(inValues[1]));
            return this.BeginSourceCode_RetrieveArtifactsForRevision(branchId, revisionId, callback, asyncState);
        }
        
        private object[] OnEndSourceCode_RetrieveArtifactsForRevision(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteLinkedArtifact[] retVal = this.EndSourceCode_RetrieveArtifactsForRevision(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSourceCode_RetrieveArtifactsForRevisionCompleted(object state) {
            if ((this.SourceCode_RetrieveArtifactsForRevisionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SourceCode_RetrieveArtifactsForRevisionCompleted(this, new SourceCode_RetrieveArtifactsForRevisionCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SourceCode_RetrieveArtifactsForRevisionAsync(string branchId, string revisionId) {
            this.SourceCode_RetrieveArtifactsForRevisionAsync(branchId, revisionId, null);
        }
        
        public void SourceCode_RetrieveArtifactsForRevisionAsync(string branchId, string revisionId, object userState) {
            if ((this.onBeginSourceCode_RetrieveArtifactsForRevisionDelegate == null)) {
                this.onBeginSourceCode_RetrieveArtifactsForRevisionDelegate = new BeginOperationDelegate(this.OnBeginSourceCode_RetrieveArtifactsForRevision);
            }
            if ((this.onEndSourceCode_RetrieveArtifactsForRevisionDelegate == null)) {
                this.onEndSourceCode_RetrieveArtifactsForRevisionDelegate = new EndOperationDelegate(this.OnEndSourceCode_RetrieveArtifactsForRevision);
            }
            if ((this.onSourceCode_RetrieveArtifactsForRevisionCompletedDelegate == null)) {
                this.onSourceCode_RetrieveArtifactsForRevisionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSourceCode_RetrieveArtifactsForRevisionCompleted);
            }
            base.InvokeAsync(this.onBeginSourceCode_RetrieveArtifactsForRevisionDelegate, new object[] {
                        branchId,
                        revisionId}, this.onEndSourceCode_RetrieveArtifactsForRevisionDelegate, this.onSourceCode_RetrieveArtifactsForRevisionCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteMessageInfo Message_GetInfo() {
            return base.Channel.Message_GetInfo();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginMessage_GetInfo(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginMessage_GetInfo(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteMessageInfo EndMessage_GetInfo(System.IAsyncResult result) {
            return base.Channel.EndMessage_GetInfo(result);
        }
        
        private System.IAsyncResult OnBeginMessage_GetInfo(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginMessage_GetInfo(callback, asyncState);
        }
        
        private object[] OnEndMessage_GetInfo(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteMessageInfo retVal = this.EndMessage_GetInfo(result);
            return new object[] {
                    retVal};
        }
        
        private void OnMessage_GetInfoCompleted(object state) {
            if ((this.Message_GetInfoCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Message_GetInfoCompleted(this, new Message_GetInfoCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Message_GetInfoAsync() {
            this.Message_GetInfoAsync(null);
        }
        
        public void Message_GetInfoAsync(object userState) {
            if ((this.onBeginMessage_GetInfoDelegate == null)) {
                this.onBeginMessage_GetInfoDelegate = new BeginOperationDelegate(this.OnBeginMessage_GetInfo);
            }
            if ((this.onEndMessage_GetInfoDelegate == null)) {
                this.onEndMessage_GetInfoDelegate = new EndOperationDelegate(this.OnEndMessage_GetInfo);
            }
            if ((this.onMessage_GetInfoCompletedDelegate == null)) {
                this.onMessage_GetInfoCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnMessage_GetInfoCompleted);
            }
            base.InvokeAsync(this.onBeginMessage_GetInfoDelegate, null, this.onEndMessage_GetInfoDelegate, this.onMessage_GetInfoCompletedDelegate, userState);
        }
        
        public long Message_PostNew(int recipientUserId, string message) {
            return base.Channel.Message_PostNew(recipientUserId, message);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginMessage_PostNew(int recipientUserId, string message, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginMessage_PostNew(recipientUserId, message, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public long EndMessage_PostNew(System.IAsyncResult result) {
            return base.Channel.EndMessage_PostNew(result);
        }
        
        private System.IAsyncResult OnBeginMessage_PostNew(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int recipientUserId = ((int)(inValues[0]));
            string message = ((string)(inValues[1]));
            return this.BeginMessage_PostNew(recipientUserId, message, callback, asyncState);
        }
        
        private object[] OnEndMessage_PostNew(System.IAsyncResult result) {
            long retVal = this.EndMessage_PostNew(result);
            return new object[] {
                    retVal};
        }
        
        private void OnMessage_PostNewCompleted(object state) {
            if ((this.Message_PostNewCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Message_PostNewCompleted(this, new Message_PostNewCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Message_PostNewAsync(int recipientUserId, string message) {
            this.Message_PostNewAsync(recipientUserId, message, null);
        }
        
        public void Message_PostNewAsync(int recipientUserId, string message, object userState) {
            if ((this.onBeginMessage_PostNewDelegate == null)) {
                this.onBeginMessage_PostNewDelegate = new BeginOperationDelegate(this.OnBeginMessage_PostNew);
            }
            if ((this.onEndMessage_PostNewDelegate == null)) {
                this.onEndMessage_PostNewDelegate = new EndOperationDelegate(this.OnEndMessage_PostNew);
            }
            if ((this.onMessage_PostNewCompletedDelegate == null)) {
                this.onMessage_PostNewCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnMessage_PostNewCompleted);
            }
            base.InvokeAsync(this.onBeginMessage_PostNewDelegate, new object[] {
                        recipientUserId,
                        message}, this.onEndMessage_PostNewDelegate, this.onMessage_PostNewCompletedDelegate, userState);
        }
        
        public void Message_MarkAllAsRead(int senderUserId) {
            base.Channel.Message_MarkAllAsRead(senderUserId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginMessage_MarkAllAsRead(int senderUserId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginMessage_MarkAllAsRead(senderUserId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndMessage_MarkAllAsRead(System.IAsyncResult result) {
            base.Channel.EndMessage_MarkAllAsRead(result);
        }
        
        private System.IAsyncResult OnBeginMessage_MarkAllAsRead(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int senderUserId = ((int)(inValues[0]));
            return this.BeginMessage_MarkAllAsRead(senderUserId, callback, asyncState);
        }
        
        private object[] OnEndMessage_MarkAllAsRead(System.IAsyncResult result) {
            this.EndMessage_MarkAllAsRead(result);
            return null;
        }
        
        private void OnMessage_MarkAllAsReadCompleted(object state) {
            if ((this.Message_MarkAllAsReadCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Message_MarkAllAsReadCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Message_MarkAllAsReadAsync(int senderUserId) {
            this.Message_MarkAllAsReadAsync(senderUserId, null);
        }
        
        public void Message_MarkAllAsReadAsync(int senderUserId, object userState) {
            if ((this.onBeginMessage_MarkAllAsReadDelegate == null)) {
                this.onBeginMessage_MarkAllAsReadDelegate = new BeginOperationDelegate(this.OnBeginMessage_MarkAllAsRead);
            }
            if ((this.onEndMessage_MarkAllAsReadDelegate == null)) {
                this.onEndMessage_MarkAllAsReadDelegate = new EndOperationDelegate(this.OnEndMessage_MarkAllAsRead);
            }
            if ((this.onMessage_MarkAllAsReadCompletedDelegate == null)) {
                this.onMessage_MarkAllAsReadCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnMessage_MarkAllAsReadCompleted);
            }
            base.InvokeAsync(this.onBeginMessage_MarkAllAsReadDelegate, new object[] {
                        senderUserId}, this.onEndMessage_MarkAllAsReadDelegate, this.onMessage_MarkAllAsReadCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteUserMessage[] Message_GetUnreadMessageSenders() {
            return base.Channel.Message_GetUnreadMessageSenders();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginMessage_GetUnreadMessageSenders(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginMessage_GetUnreadMessageSenders(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteUserMessage[] EndMessage_GetUnreadMessageSenders(System.IAsyncResult result) {
            return base.Channel.EndMessage_GetUnreadMessageSenders(result);
        }
        
        private System.IAsyncResult OnBeginMessage_GetUnreadMessageSenders(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginMessage_GetUnreadMessageSenders(callback, asyncState);
        }
        
        private object[] OnEndMessage_GetUnreadMessageSenders(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteUserMessage[] retVal = this.EndMessage_GetUnreadMessageSenders(result);
            return new object[] {
                    retVal};
        }
        
        private void OnMessage_GetUnreadMessageSendersCompleted(object state) {
            if ((this.Message_GetUnreadMessageSendersCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Message_GetUnreadMessageSendersCompleted(this, new Message_GetUnreadMessageSendersCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Message_GetUnreadMessageSendersAsync() {
            this.Message_GetUnreadMessageSendersAsync(null);
        }
        
        public void Message_GetUnreadMessageSendersAsync(object userState) {
            if ((this.onBeginMessage_GetUnreadMessageSendersDelegate == null)) {
                this.onBeginMessage_GetUnreadMessageSendersDelegate = new BeginOperationDelegate(this.OnBeginMessage_GetUnreadMessageSenders);
            }
            if ((this.onEndMessage_GetUnreadMessageSendersDelegate == null)) {
                this.onEndMessage_GetUnreadMessageSendersDelegate = new EndOperationDelegate(this.OnEndMessage_GetUnreadMessageSenders);
            }
            if ((this.onMessage_GetUnreadMessageSendersCompletedDelegate == null)) {
                this.onMessage_GetUnreadMessageSendersCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnMessage_GetUnreadMessageSendersCompleted);
            }
            base.InvokeAsync(this.onBeginMessage_GetUnreadMessageSendersDelegate, null, this.onEndMessage_GetUnreadMessageSendersDelegate, this.onMessage_GetUnreadMessageSendersCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteMessage[] Message_RetrieveUnread() {
            return base.Channel.Message_RetrieveUnread();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginMessage_RetrieveUnread(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginMessage_RetrieveUnread(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteMessage[] EndMessage_RetrieveUnread(System.IAsyncResult result) {
            return base.Channel.EndMessage_RetrieveUnread(result);
        }
        
        private System.IAsyncResult OnBeginMessage_RetrieveUnread(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginMessage_RetrieveUnread(callback, asyncState);
        }
        
        private object[] OnEndMessage_RetrieveUnread(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteMessage[] retVal = this.EndMessage_RetrieveUnread(result);
            return new object[] {
                    retVal};
        }
        
        private void OnMessage_RetrieveUnreadCompleted(object state) {
            if ((this.Message_RetrieveUnreadCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Message_RetrieveUnreadCompleted(this, new Message_RetrieveUnreadCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Message_RetrieveUnreadAsync() {
            this.Message_RetrieveUnreadAsync(null);
        }
        
        public void Message_RetrieveUnreadAsync(object userState) {
            if ((this.onBeginMessage_RetrieveUnreadDelegate == null)) {
                this.onBeginMessage_RetrieveUnreadDelegate = new BeginOperationDelegate(this.OnBeginMessage_RetrieveUnread);
            }
            if ((this.onEndMessage_RetrieveUnreadDelegate == null)) {
                this.onEndMessage_RetrieveUnreadDelegate = new EndOperationDelegate(this.OnEndMessage_RetrieveUnread);
            }
            if ((this.onMessage_RetrieveUnreadCompletedDelegate == null)) {
                this.onMessage_RetrieveUnreadCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnMessage_RetrieveUnreadCompleted);
            }
            base.InvokeAsync(this.onBeginMessage_RetrieveUnreadDelegate, null, this.onEndMessage_RetrieveUnreadDelegate, this.onMessage_RetrieveUnreadCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteHistoryChange[] History_RetrieveForArtifact(int artifactTypeId, int artifactId, int startingRow, int numberOfRows, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSort remoteSort, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters) {
            return base.Channel.History_RetrieveForArtifact(artifactTypeId, artifactId, startingRow, numberOfRows, remoteSort, remoteFilters);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginHistory_RetrieveForArtifact(int artifactTypeId, int artifactId, int startingRow, int numberOfRows, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSort remoteSort, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginHistory_RetrieveForArtifact(artifactTypeId, artifactId, startingRow, numberOfRows, remoteSort, remoteFilters, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteHistoryChange[] EndHistory_RetrieveForArtifact(System.IAsyncResult result) {
            return base.Channel.EndHistory_RetrieveForArtifact(result);
        }
        
        private System.IAsyncResult OnBeginHistory_RetrieveForArtifact(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int artifactTypeId = ((int)(inValues[0]));
            int artifactId = ((int)(inValues[1]));
            int startingRow = ((int)(inValues[2]));
            int numberOfRows = ((int)(inValues[3]));
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSort remoteSort = ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSort)(inValues[4]));
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters = ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[])(inValues[5]));
            return this.BeginHistory_RetrieveForArtifact(artifactTypeId, artifactId, startingRow, numberOfRows, remoteSort, remoteFilters, callback, asyncState);
        }
        
        private object[] OnEndHistory_RetrieveForArtifact(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteHistoryChange[] retVal = this.EndHistory_RetrieveForArtifact(result);
            return new object[] {
                    retVal};
        }
        
        private void OnHistory_RetrieveForArtifactCompleted(object state) {
            if ((this.History_RetrieveForArtifactCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.History_RetrieveForArtifactCompleted(this, new History_RetrieveForArtifactCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void History_RetrieveForArtifactAsync(int artifactTypeId, int artifactId, int startingRow, int numberOfRows, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSort remoteSort, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters) {
            this.History_RetrieveForArtifactAsync(artifactTypeId, artifactId, startingRow, numberOfRows, remoteSort, remoteFilters, null);
        }
        
        public void History_RetrieveForArtifactAsync(int artifactTypeId, int artifactId, int startingRow, int numberOfRows, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSort remoteSort, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters, object userState) {
            if ((this.onBeginHistory_RetrieveForArtifactDelegate == null)) {
                this.onBeginHistory_RetrieveForArtifactDelegate = new BeginOperationDelegate(this.OnBeginHistory_RetrieveForArtifact);
            }
            if ((this.onEndHistory_RetrieveForArtifactDelegate == null)) {
                this.onEndHistory_RetrieveForArtifactDelegate = new EndOperationDelegate(this.OnEndHistory_RetrieveForArtifact);
            }
            if ((this.onHistory_RetrieveForArtifactCompletedDelegate == null)) {
                this.onHistory_RetrieveForArtifactCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnHistory_RetrieveForArtifactCompleted);
            }
            base.InvokeAsync(this.onBeginHistory_RetrieveForArtifactDelegate, new object[] {
                        artifactTypeId,
                        artifactId,
                        startingRow,
                        numberOfRows,
                        remoteSort,
                        remoteFilters}, this.onEndHistory_RetrieveForArtifactDelegate, this.onHistory_RetrieveForArtifactCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteHistoryChangeSet History_RetrieveById(int historyChangeSetId) {
            return base.Channel.History_RetrieveById(historyChangeSetId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginHistory_RetrieveById(int historyChangeSetId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginHistory_RetrieveById(historyChangeSetId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteHistoryChangeSet EndHistory_RetrieveById(System.IAsyncResult result) {
            return base.Channel.EndHistory_RetrieveById(result);
        }
        
        private System.IAsyncResult OnBeginHistory_RetrieveById(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int historyChangeSetId = ((int)(inValues[0]));
            return this.BeginHistory_RetrieveById(historyChangeSetId, callback, asyncState);
        }
        
        private object[] OnEndHistory_RetrieveById(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteHistoryChangeSet retVal = this.EndHistory_RetrieveById(result);
            return new object[] {
                    retVal};
        }
        
        private void OnHistory_RetrieveByIdCompleted(object state) {
            if ((this.History_RetrieveByIdCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.History_RetrieveByIdCompleted(this, new History_RetrieveByIdCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void History_RetrieveByIdAsync(int historyChangeSetId) {
            this.History_RetrieveByIdAsync(historyChangeSetId, null);
        }
        
        public void History_RetrieveByIdAsync(int historyChangeSetId, object userState) {
            if ((this.onBeginHistory_RetrieveByIdDelegate == null)) {
                this.onBeginHistory_RetrieveByIdDelegate = new BeginOperationDelegate(this.OnBeginHistory_RetrieveById);
            }
            if ((this.onEndHistory_RetrieveByIdDelegate == null)) {
                this.onEndHistory_RetrieveByIdDelegate = new EndOperationDelegate(this.OnEndHistory_RetrieveById);
            }
            if ((this.onHistory_RetrieveByIdCompletedDelegate == null)) {
                this.onHistory_RetrieveByIdCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnHistory_RetrieveByIdCompleted);
            }
            base.InvokeAsync(this.onBeginHistory_RetrieveByIdDelegate, new object[] {
                        historyChangeSetId}, this.onEndHistory_RetrieveByIdDelegate, this.onHistory_RetrieveByIdCompletedDelegate, userState);
        }
        
        public void Subscription_SubscribeToArtifact(int artifactTypeId, int artifactId) {
            base.Channel.Subscription_SubscribeToArtifact(artifactTypeId, artifactId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSubscription_SubscribeToArtifact(int artifactTypeId, int artifactId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSubscription_SubscribeToArtifact(artifactTypeId, artifactId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndSubscription_SubscribeToArtifact(System.IAsyncResult result) {
            base.Channel.EndSubscription_SubscribeToArtifact(result);
        }
        
        private System.IAsyncResult OnBeginSubscription_SubscribeToArtifact(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int artifactTypeId = ((int)(inValues[0]));
            int artifactId = ((int)(inValues[1]));
            return this.BeginSubscription_SubscribeToArtifact(artifactTypeId, artifactId, callback, asyncState);
        }
        
        private object[] OnEndSubscription_SubscribeToArtifact(System.IAsyncResult result) {
            this.EndSubscription_SubscribeToArtifact(result);
            return null;
        }
        
        private void OnSubscription_SubscribeToArtifactCompleted(object state) {
            if ((this.Subscription_SubscribeToArtifactCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Subscription_SubscribeToArtifactCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Subscription_SubscribeToArtifactAsync(int artifactTypeId, int artifactId) {
            this.Subscription_SubscribeToArtifactAsync(artifactTypeId, artifactId, null);
        }
        
        public void Subscription_SubscribeToArtifactAsync(int artifactTypeId, int artifactId, object userState) {
            if ((this.onBeginSubscription_SubscribeToArtifactDelegate == null)) {
                this.onBeginSubscription_SubscribeToArtifactDelegate = new BeginOperationDelegate(this.OnBeginSubscription_SubscribeToArtifact);
            }
            if ((this.onEndSubscription_SubscribeToArtifactDelegate == null)) {
                this.onEndSubscription_SubscribeToArtifactDelegate = new EndOperationDelegate(this.OnEndSubscription_SubscribeToArtifact);
            }
            if ((this.onSubscription_SubscribeToArtifactCompletedDelegate == null)) {
                this.onSubscription_SubscribeToArtifactCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSubscription_SubscribeToArtifactCompleted);
            }
            base.InvokeAsync(this.onBeginSubscription_SubscribeToArtifactDelegate, new object[] {
                        artifactTypeId,
                        artifactId}, this.onEndSubscription_SubscribeToArtifactDelegate, this.onSubscription_SubscribeToArtifactCompletedDelegate, userState);
        }
        
        public void Subscription_UnsubscribeFromArtifact(int artifactTypeId, int artifactId) {
            base.Channel.Subscription_UnsubscribeFromArtifact(artifactTypeId, artifactId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSubscription_UnsubscribeFromArtifact(int artifactTypeId, int artifactId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSubscription_UnsubscribeFromArtifact(artifactTypeId, artifactId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndSubscription_UnsubscribeFromArtifact(System.IAsyncResult result) {
            base.Channel.EndSubscription_UnsubscribeFromArtifact(result);
        }
        
        private System.IAsyncResult OnBeginSubscription_UnsubscribeFromArtifact(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int artifactTypeId = ((int)(inValues[0]));
            int artifactId = ((int)(inValues[1]));
            return this.BeginSubscription_UnsubscribeFromArtifact(artifactTypeId, artifactId, callback, asyncState);
        }
        
        private object[] OnEndSubscription_UnsubscribeFromArtifact(System.IAsyncResult result) {
            this.EndSubscription_UnsubscribeFromArtifact(result);
            return null;
        }
        
        private void OnSubscription_UnsubscribeFromArtifactCompleted(object state) {
            if ((this.Subscription_UnsubscribeFromArtifactCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Subscription_UnsubscribeFromArtifactCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Subscription_UnsubscribeFromArtifactAsync(int artifactTypeId, int artifactId) {
            this.Subscription_UnsubscribeFromArtifactAsync(artifactTypeId, artifactId, null);
        }
        
        public void Subscription_UnsubscribeFromArtifactAsync(int artifactTypeId, int artifactId, object userState) {
            if ((this.onBeginSubscription_UnsubscribeFromArtifactDelegate == null)) {
                this.onBeginSubscription_UnsubscribeFromArtifactDelegate = new BeginOperationDelegate(this.OnBeginSubscription_UnsubscribeFromArtifact);
            }
            if ((this.onEndSubscription_UnsubscribeFromArtifactDelegate == null)) {
                this.onEndSubscription_UnsubscribeFromArtifactDelegate = new EndOperationDelegate(this.OnEndSubscription_UnsubscribeFromArtifact);
            }
            if ((this.onSubscription_UnsubscribeFromArtifactCompletedDelegate == null)) {
                this.onSubscription_UnsubscribeFromArtifactCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSubscription_UnsubscribeFromArtifactCompleted);
            }
            base.InvokeAsync(this.onBeginSubscription_UnsubscribeFromArtifactDelegate, new object[] {
                        artifactTypeId,
                        artifactId}, this.onEndSubscription_UnsubscribeFromArtifactDelegate, this.onSubscription_UnsubscribeFromArtifactCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteArtifactSubscription[] Subscription_RetrieveForUser() {
            return base.Channel.Subscription_RetrieveForUser();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSubscription_RetrieveForUser(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSubscription_RetrieveForUser(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteArtifactSubscription[] EndSubscription_RetrieveForUser(System.IAsyncResult result) {
            return base.Channel.EndSubscription_RetrieveForUser(result);
        }
        
        private System.IAsyncResult OnBeginSubscription_RetrieveForUser(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginSubscription_RetrieveForUser(callback, asyncState);
        }
        
        private object[] OnEndSubscription_RetrieveForUser(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteArtifactSubscription[] retVal = this.EndSubscription_RetrieveForUser(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSubscription_RetrieveForUserCompleted(object state) {
            if ((this.Subscription_RetrieveForUserCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Subscription_RetrieveForUserCompleted(this, new Subscription_RetrieveForUserCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Subscription_RetrieveForUserAsync() {
            this.Subscription_RetrieveForUserAsync(null);
        }
        
        public void Subscription_RetrieveForUserAsync(object userState) {
            if ((this.onBeginSubscription_RetrieveForUserDelegate == null)) {
                this.onBeginSubscription_RetrieveForUserDelegate = new BeginOperationDelegate(this.OnBeginSubscription_RetrieveForUser);
            }
            if ((this.onEndSubscription_RetrieveForUserDelegate == null)) {
                this.onEndSubscription_RetrieveForUserDelegate = new EndOperationDelegate(this.OnEndSubscription_RetrieveForUser);
            }
            if ((this.onSubscription_RetrieveForUserCompletedDelegate == null)) {
                this.onSubscription_RetrieveForUserCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSubscription_RetrieveForUserCompleted);
            }
            base.InvokeAsync(this.onBeginSubscription_RetrieveForUserDelegate, null, this.onEndSubscription_RetrieveForUserDelegate, this.onSubscription_RetrieveForUserCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteArtifactSubscription[] Subscription_RetrieveForArtifact(int artifactTypeId, int artifactId) {
            return base.Channel.Subscription_RetrieveForArtifact(artifactTypeId, artifactId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSubscription_RetrieveForArtifact(int artifactTypeId, int artifactId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSubscription_RetrieveForArtifact(artifactTypeId, artifactId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteArtifactSubscription[] EndSubscription_RetrieveForArtifact(System.IAsyncResult result) {
            return base.Channel.EndSubscription_RetrieveForArtifact(result);
        }
        
        private System.IAsyncResult OnBeginSubscription_RetrieveForArtifact(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int artifactTypeId = ((int)(inValues[0]));
            int artifactId = ((int)(inValues[1]));
            return this.BeginSubscription_RetrieveForArtifact(artifactTypeId, artifactId, callback, asyncState);
        }
        
        private object[] OnEndSubscription_RetrieveForArtifact(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteArtifactSubscription[] retVal = this.EndSubscription_RetrieveForArtifact(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSubscription_RetrieveForArtifactCompleted(object state) {
            if ((this.Subscription_RetrieveForArtifactCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Subscription_RetrieveForArtifactCompleted(this, new Subscription_RetrieveForArtifactCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Subscription_RetrieveForArtifactAsync(int artifactTypeId, int artifactId) {
            this.Subscription_RetrieveForArtifactAsync(artifactTypeId, artifactId, null);
        }
        
        public void Subscription_RetrieveForArtifactAsync(int artifactTypeId, int artifactId, object userState) {
            if ((this.onBeginSubscription_RetrieveForArtifactDelegate == null)) {
                this.onBeginSubscription_RetrieveForArtifactDelegate = new BeginOperationDelegate(this.OnBeginSubscription_RetrieveForArtifact);
            }
            if ((this.onEndSubscription_RetrieveForArtifactDelegate == null)) {
                this.onEndSubscription_RetrieveForArtifactDelegate = new EndOperationDelegate(this.OnEndSubscription_RetrieveForArtifact);
            }
            if ((this.onSubscription_RetrieveForArtifactCompletedDelegate == null)) {
                this.onSubscription_RetrieveForArtifactCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSubscription_RetrieveForArtifactCompleted);
            }
            base.InvokeAsync(this.onBeginSubscription_RetrieveForArtifactDelegate, new object[] {
                        artifactTypeId,
                        artifactId}, this.onEndSubscription_RetrieveForArtifactDelegate, this.onSubscription_RetrieveForArtifactCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSavedFilter[] SavedFilter_RetrieveForUser() {
            return base.Channel.SavedFilter_RetrieveForUser();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSavedFilter_RetrieveForUser(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSavedFilter_RetrieveForUser(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSavedFilter[] EndSavedFilter_RetrieveForUser(System.IAsyncResult result) {
            return base.Channel.EndSavedFilter_RetrieveForUser(result);
        }
        
        private System.IAsyncResult OnBeginSavedFilter_RetrieveForUser(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginSavedFilter_RetrieveForUser(callback, asyncState);
        }
        
        private object[] OnEndSavedFilter_RetrieveForUser(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSavedFilter[] retVal = this.EndSavedFilter_RetrieveForUser(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSavedFilter_RetrieveForUserCompleted(object state) {
            if ((this.SavedFilter_RetrieveForUserCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SavedFilter_RetrieveForUserCompleted(this, new SavedFilter_RetrieveForUserCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SavedFilter_RetrieveForUserAsync() {
            this.SavedFilter_RetrieveForUserAsync(null);
        }
        
        public void SavedFilter_RetrieveForUserAsync(object userState) {
            if ((this.onBeginSavedFilter_RetrieveForUserDelegate == null)) {
                this.onBeginSavedFilter_RetrieveForUserDelegate = new BeginOperationDelegate(this.OnBeginSavedFilter_RetrieveForUser);
            }
            if ((this.onEndSavedFilter_RetrieveForUserDelegate == null)) {
                this.onEndSavedFilter_RetrieveForUserDelegate = new EndOperationDelegate(this.OnEndSavedFilter_RetrieveForUser);
            }
            if ((this.onSavedFilter_RetrieveForUserCompletedDelegate == null)) {
                this.onSavedFilter_RetrieveForUserCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSavedFilter_RetrieveForUserCompleted);
            }
            base.InvokeAsync(this.onBeginSavedFilter_RetrieveForUserDelegate, null, this.onEndSavedFilter_RetrieveForUserDelegate, this.onSavedFilter_RetrieveForUserCompletedDelegate, userState);
        }
        
        public void Requirement_UpdateStep(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRequirementStep remoteRequirementStep) {
            base.Channel.Requirement_UpdateStep(remoteRequirementStep);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRequirement_UpdateStep(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRequirementStep remoteRequirementStep, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRequirement_UpdateStep(remoteRequirementStep, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndRequirement_UpdateStep(System.IAsyncResult result) {
            base.Channel.EndRequirement_UpdateStep(result);
        }
        
        private System.IAsyncResult OnBeginRequirement_UpdateStep(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRequirementStep remoteRequirementStep = ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRequirementStep)(inValues[0]));
            return this.BeginRequirement_UpdateStep(remoteRequirementStep, callback, asyncState);
        }
        
        private object[] OnEndRequirement_UpdateStep(System.IAsyncResult result) {
            this.EndRequirement_UpdateStep(result);
            return null;
        }
        
        private void OnRequirement_UpdateStepCompleted(object state) {
            if ((this.Requirement_UpdateStepCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Requirement_UpdateStepCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Requirement_UpdateStepAsync(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRequirementStep remoteRequirementStep) {
            this.Requirement_UpdateStepAsync(remoteRequirementStep, null);
        }
        
        public void Requirement_UpdateStepAsync(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRequirementStep remoteRequirementStep, object userState) {
            if ((this.onBeginRequirement_UpdateStepDelegate == null)) {
                this.onBeginRequirement_UpdateStepDelegate = new BeginOperationDelegate(this.OnBeginRequirement_UpdateStep);
            }
            if ((this.onEndRequirement_UpdateStepDelegate == null)) {
                this.onEndRequirement_UpdateStepDelegate = new EndOperationDelegate(this.OnEndRequirement_UpdateStep);
            }
            if ((this.onRequirement_UpdateStepCompletedDelegate == null)) {
                this.onRequirement_UpdateStepCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRequirement_UpdateStepCompleted);
            }
            base.InvokeAsync(this.onBeginRequirement_UpdateStepDelegate, new object[] {
                        remoteRequirementStep}, this.onEndRequirement_UpdateStepDelegate, this.onRequirement_UpdateStepCompletedDelegate, userState);
        }
        
        public void Requirement_MoveStep(int requirementId, int sourceRequirementStepId, System.Nullable<int> destinationRequirementStepId) {
            base.Channel.Requirement_MoveStep(requirementId, sourceRequirementStepId, destinationRequirementStepId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRequirement_MoveStep(int requirementId, int sourceRequirementStepId, System.Nullable<int> destinationRequirementStepId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRequirement_MoveStep(requirementId, sourceRequirementStepId, destinationRequirementStepId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndRequirement_MoveStep(System.IAsyncResult result) {
            base.Channel.EndRequirement_MoveStep(result);
        }
        
        private System.IAsyncResult OnBeginRequirement_MoveStep(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int requirementId = ((int)(inValues[0]));
            int sourceRequirementStepId = ((int)(inValues[1]));
            System.Nullable<int> destinationRequirementStepId = ((System.Nullable<int>)(inValues[2]));
            return this.BeginRequirement_MoveStep(requirementId, sourceRequirementStepId, destinationRequirementStepId, callback, asyncState);
        }
        
        private object[] OnEndRequirement_MoveStep(System.IAsyncResult result) {
            this.EndRequirement_MoveStep(result);
            return null;
        }
        
        private void OnRequirement_MoveStepCompleted(object state) {
            if ((this.Requirement_MoveStepCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Requirement_MoveStepCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Requirement_MoveStepAsync(int requirementId, int sourceRequirementStepId, System.Nullable<int> destinationRequirementStepId) {
            this.Requirement_MoveStepAsync(requirementId, sourceRequirementStepId, destinationRequirementStepId, null);
        }
        
        public void Requirement_MoveStepAsync(int requirementId, int sourceRequirementStepId, System.Nullable<int> destinationRequirementStepId, object userState) {
            if ((this.onBeginRequirement_MoveStepDelegate == null)) {
                this.onBeginRequirement_MoveStepDelegate = new BeginOperationDelegate(this.OnBeginRequirement_MoveStep);
            }
            if ((this.onEndRequirement_MoveStepDelegate == null)) {
                this.onEndRequirement_MoveStepDelegate = new EndOperationDelegate(this.OnEndRequirement_MoveStep);
            }
            if ((this.onRequirement_MoveStepCompletedDelegate == null)) {
                this.onRequirement_MoveStepCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRequirement_MoveStepCompleted);
            }
            base.InvokeAsync(this.onBeginRequirement_MoveStepDelegate, new object[] {
                        requirementId,
                        sourceRequirementStepId,
                        destinationRequirementStepId}, this.onEndRequirement_MoveStepDelegate, this.onRequirement_MoveStepCompletedDelegate, userState);
        }
        
        public void Requirement_DeleteStep(int requirementId, int requirementStepId) {
            base.Channel.Requirement_DeleteStep(requirementId, requirementStepId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRequirement_DeleteStep(int requirementId, int requirementStepId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRequirement_DeleteStep(requirementId, requirementStepId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndRequirement_DeleteStep(System.IAsyncResult result) {
            base.Channel.EndRequirement_DeleteStep(result);
        }
        
        private System.IAsyncResult OnBeginRequirement_DeleteStep(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int requirementId = ((int)(inValues[0]));
            int requirementStepId = ((int)(inValues[1]));
            return this.BeginRequirement_DeleteStep(requirementId, requirementStepId, callback, asyncState);
        }
        
        private object[] OnEndRequirement_DeleteStep(System.IAsyncResult result) {
            this.EndRequirement_DeleteStep(result);
            return null;
        }
        
        private void OnRequirement_DeleteStepCompleted(object state) {
            if ((this.Requirement_DeleteStepCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Requirement_DeleteStepCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Requirement_DeleteStepAsync(int requirementId, int requirementStepId) {
            this.Requirement_DeleteStepAsync(requirementId, requirementStepId, null);
        }
        
        public void Requirement_DeleteStepAsync(int requirementId, int requirementStepId, object userState) {
            if ((this.onBeginRequirement_DeleteStepDelegate == null)) {
                this.onBeginRequirement_DeleteStepDelegate = new BeginOperationDelegate(this.OnBeginRequirement_DeleteStep);
            }
            if ((this.onEndRequirement_DeleteStepDelegate == null)) {
                this.onEndRequirement_DeleteStepDelegate = new EndOperationDelegate(this.OnEndRequirement_DeleteStep);
            }
            if ((this.onRequirement_DeleteStepCompletedDelegate == null)) {
                this.onRequirement_DeleteStepCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRequirement_DeleteStepCompleted);
            }
            base.InvokeAsync(this.onBeginRequirement_DeleteStepDelegate, new object[] {
                        requirementId,
                        requirementStepId}, this.onEndRequirement_DeleteStepDelegate, this.onRequirement_DeleteStepCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteVersion System_GetProductVersion() {
            return base.Channel.System_GetProductVersion();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSystem_GetProductVersion(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSystem_GetProductVersion(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteVersion EndSystem_GetProductVersion(System.IAsyncResult result) {
            return base.Channel.EndSystem_GetProductVersion(result);
        }
        
        private System.IAsyncResult OnBeginSystem_GetProductVersion(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginSystem_GetProductVersion(callback, asyncState);
        }
        
        private object[] OnEndSystem_GetProductVersion(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteVersion retVal = this.EndSystem_GetProductVersion(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSystem_GetProductVersionCompleted(object state) {
            if ((this.System_GetProductVersionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.System_GetProductVersionCompleted(this, new System_GetProductVersionCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void System_GetProductVersionAsync() {
            this.System_GetProductVersionAsync(null);
        }
        
        public void System_GetProductVersionAsync(object userState) {
            if ((this.onBeginSystem_GetProductVersionDelegate == null)) {
                this.onBeginSystem_GetProductVersionDelegate = new BeginOperationDelegate(this.OnBeginSystem_GetProductVersion);
            }
            if ((this.onEndSystem_GetProductVersionDelegate == null)) {
                this.onEndSystem_GetProductVersionDelegate = new EndOperationDelegate(this.OnEndSystem_GetProductVersion);
            }
            if ((this.onSystem_GetProductVersionCompletedDelegate == null)) {
                this.onSystem_GetProductVersionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSystem_GetProductVersionCompleted);
            }
            base.InvokeAsync(this.onBeginSystem_GetProductVersionDelegate, null, this.onEndSystem_GetProductVersionDelegate, this.onSystem_GetProductVersionCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSetting[] System_GetSettings() {
            return base.Channel.System_GetSettings();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSystem_GetSettings(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSystem_GetSettings(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSetting[] EndSystem_GetSettings(System.IAsyncResult result) {
            return base.Channel.EndSystem_GetSettings(result);
        }
        
        private System.IAsyncResult OnBeginSystem_GetSettings(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginSystem_GetSettings(callback, asyncState);
        }
        
        private object[] OnEndSystem_GetSettings(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSetting[] retVal = this.EndSystem_GetSettings(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSystem_GetSettingsCompleted(object state) {
            if ((this.System_GetSettingsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.System_GetSettingsCompleted(this, new System_GetSettingsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void System_GetSettingsAsync() {
            this.System_GetSettingsAsync(null);
        }
        
        public void System_GetSettingsAsync(object userState) {
            if ((this.onBeginSystem_GetSettingsDelegate == null)) {
                this.onBeginSystem_GetSettingsDelegate = new BeginOperationDelegate(this.OnBeginSystem_GetSettings);
            }
            if ((this.onEndSystem_GetSettingsDelegate == null)) {
                this.onEndSystem_GetSettingsDelegate = new EndOperationDelegate(this.OnEndSystem_GetSettings);
            }
            if ((this.onSystem_GetSettingsCompletedDelegate == null)) {
                this.onSystem_GetSettingsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSystem_GetSettingsCompleted);
            }
            base.InvokeAsync(this.onBeginSystem_GetSettingsDelegate, null, this.onEndSystem_GetSettingsDelegate, this.onSystem_GetSettingsCompletedDelegate, userState);
        }
        
        public string System_GetArtifactUrl(int navigationLinkId, int projectId, int artifactId, string tabName) {
            return base.Channel.System_GetArtifactUrl(navigationLinkId, projectId, artifactId, tabName);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSystem_GetArtifactUrl(int navigationLinkId, int projectId, int artifactId, string tabName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSystem_GetArtifactUrl(navigationLinkId, projectId, artifactId, tabName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndSystem_GetArtifactUrl(System.IAsyncResult result) {
            return base.Channel.EndSystem_GetArtifactUrl(result);
        }
        
        private System.IAsyncResult OnBeginSystem_GetArtifactUrl(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int navigationLinkId = ((int)(inValues[0]));
            int projectId = ((int)(inValues[1]));
            int artifactId = ((int)(inValues[2]));
            string tabName = ((string)(inValues[3]));
            return this.BeginSystem_GetArtifactUrl(navigationLinkId, projectId, artifactId, tabName, callback, asyncState);
        }
        
        private object[] OnEndSystem_GetArtifactUrl(System.IAsyncResult result) {
            string retVal = this.EndSystem_GetArtifactUrl(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSystem_GetArtifactUrlCompleted(object state) {
            if ((this.System_GetArtifactUrlCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.System_GetArtifactUrlCompleted(this, new System_GetArtifactUrlCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void System_GetArtifactUrlAsync(int navigationLinkId, int projectId, int artifactId, string tabName) {
            this.System_GetArtifactUrlAsync(navigationLinkId, projectId, artifactId, tabName, null);
        }
        
        public void System_GetArtifactUrlAsync(int navigationLinkId, int projectId, int artifactId, string tabName, object userState) {
            if ((this.onBeginSystem_GetArtifactUrlDelegate == null)) {
                this.onBeginSystem_GetArtifactUrlDelegate = new BeginOperationDelegate(this.OnBeginSystem_GetArtifactUrl);
            }
            if ((this.onEndSystem_GetArtifactUrlDelegate == null)) {
                this.onEndSystem_GetArtifactUrlDelegate = new EndOperationDelegate(this.OnEndSystem_GetArtifactUrl);
            }
            if ((this.onSystem_GetArtifactUrlCompletedDelegate == null)) {
                this.onSystem_GetArtifactUrlCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSystem_GetArtifactUrlCompleted);
            }
            base.InvokeAsync(this.onBeginSystem_GetArtifactUrlDelegate, new object[] {
                        navigationLinkId,
                        projectId,
                        artifactId,
                        tabName}, this.onEndSystem_GetArtifactUrlDelegate, this.onSystem_GetArtifactUrlCompletedDelegate, userState);
        }
        
        public int System_GetProjectIdForArtifact(int artifactTypeId, int artifactId) {
            return base.Channel.System_GetProjectIdForArtifact(artifactTypeId, artifactId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSystem_GetProjectIdForArtifact(int artifactTypeId, int artifactId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSystem_GetProjectIdForArtifact(artifactTypeId, artifactId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public int EndSystem_GetProjectIdForArtifact(System.IAsyncResult result) {
            return base.Channel.EndSystem_GetProjectIdForArtifact(result);
        }
        
        private System.IAsyncResult OnBeginSystem_GetProjectIdForArtifact(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int artifactTypeId = ((int)(inValues[0]));
            int artifactId = ((int)(inValues[1]));
            return this.BeginSystem_GetProjectIdForArtifact(artifactTypeId, artifactId, callback, asyncState);
        }
        
        private object[] OnEndSystem_GetProjectIdForArtifact(System.IAsyncResult result) {
            int retVal = this.EndSystem_GetProjectIdForArtifact(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSystem_GetProjectIdForArtifactCompleted(object state) {
            if ((this.System_GetProjectIdForArtifactCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.System_GetProjectIdForArtifactCompleted(this, new System_GetProjectIdForArtifactCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void System_GetProjectIdForArtifactAsync(int artifactTypeId, int artifactId) {
            this.System_GetProjectIdForArtifactAsync(artifactTypeId, artifactId, null);
        }
        
        public void System_GetProjectIdForArtifactAsync(int artifactTypeId, int artifactId, object userState) {
            if ((this.onBeginSystem_GetProjectIdForArtifactDelegate == null)) {
                this.onBeginSystem_GetProjectIdForArtifactDelegate = new BeginOperationDelegate(this.OnBeginSystem_GetProjectIdForArtifact);
            }
            if ((this.onEndSystem_GetProjectIdForArtifactDelegate == null)) {
                this.onEndSystem_GetProjectIdForArtifactDelegate = new EndOperationDelegate(this.OnEndSystem_GetProjectIdForArtifact);
            }
            if ((this.onSystem_GetProjectIdForArtifactCompletedDelegate == null)) {
                this.onSystem_GetProjectIdForArtifactCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSystem_GetProjectIdForArtifactCompleted);
            }
            base.InvokeAsync(this.onBeginSystem_GetProjectIdForArtifactDelegate, new object[] {
                        artifactTypeId,
                        artifactId}, this.onEndSystem_GetProjectIdForArtifactDelegate, this.onSystem_GetProjectIdForArtifactCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTask Task_Create(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTask remoteTask) {
            return base.Channel.Task_Create(remoteTask);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTask_Create(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTask remoteTask, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTask_Create(remoteTask, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTask EndTask_Create(System.IAsyncResult result) {
            return base.Channel.EndTask_Create(result);
        }
        
        private System.IAsyncResult OnBeginTask_Create(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTask remoteTask = ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTask)(inValues[0]));
            return this.BeginTask_Create(remoteTask, callback, asyncState);
        }
        
        private object[] OnEndTask_Create(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTask retVal = this.EndTask_Create(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTask_CreateCompleted(object state) {
            if ((this.Task_CreateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Task_CreateCompleted(this, new Task_CreateCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Task_CreateAsync(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTask remoteTask) {
            this.Task_CreateAsync(remoteTask, null);
        }
        
        public void Task_CreateAsync(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTask remoteTask, object userState) {
            if ((this.onBeginTask_CreateDelegate == null)) {
                this.onBeginTask_CreateDelegate = new BeginOperationDelegate(this.OnBeginTask_Create);
            }
            if ((this.onEndTask_CreateDelegate == null)) {
                this.onEndTask_CreateDelegate = new EndOperationDelegate(this.OnEndTask_Create);
            }
            if ((this.onTask_CreateCompletedDelegate == null)) {
                this.onTask_CreateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTask_CreateCompleted);
            }
            base.InvokeAsync(this.onBeginTask_CreateDelegate, new object[] {
                        remoteTask}, this.onEndTask_CreateDelegate, this.onTask_CreateCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTask[] Task_Retrieve(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSort remoteSort, int startingRow, int numberOfRows) {
            return base.Channel.Task_Retrieve(remoteFilters, remoteSort, startingRow, numberOfRows);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTask_Retrieve(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSort remoteSort, int startingRow, int numberOfRows, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTask_Retrieve(remoteFilters, remoteSort, startingRow, numberOfRows, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTask[] EndTask_Retrieve(System.IAsyncResult result) {
            return base.Channel.EndTask_Retrieve(result);
        }
        
        private System.IAsyncResult OnBeginTask_Retrieve(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters = ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[])(inValues[0]));
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSort remoteSort = ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSort)(inValues[1]));
            int startingRow = ((int)(inValues[2]));
            int numberOfRows = ((int)(inValues[3]));
            return this.BeginTask_Retrieve(remoteFilters, remoteSort, startingRow, numberOfRows, callback, asyncState);
        }
        
        private object[] OnEndTask_Retrieve(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTask[] retVal = this.EndTask_Retrieve(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTask_RetrieveCompleted(object state) {
            if ((this.Task_RetrieveCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Task_RetrieveCompleted(this, new Task_RetrieveCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Task_RetrieveAsync(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSort remoteSort, int startingRow, int numberOfRows) {
            this.Task_RetrieveAsync(remoteFilters, remoteSort, startingRow, numberOfRows, null);
        }
        
        public void Task_RetrieveAsync(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSort remoteSort, int startingRow, int numberOfRows, object userState) {
            if ((this.onBeginTask_RetrieveDelegate == null)) {
                this.onBeginTask_RetrieveDelegate = new BeginOperationDelegate(this.OnBeginTask_Retrieve);
            }
            if ((this.onEndTask_RetrieveDelegate == null)) {
                this.onEndTask_RetrieveDelegate = new EndOperationDelegate(this.OnEndTask_Retrieve);
            }
            if ((this.onTask_RetrieveCompletedDelegate == null)) {
                this.onTask_RetrieveCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTask_RetrieveCompleted);
            }
            base.InvokeAsync(this.onBeginTask_RetrieveDelegate, new object[] {
                        remoteFilters,
                        remoteSort,
                        startingRow,
                        numberOfRows}, this.onEndTask_RetrieveDelegate, this.onTask_RetrieveCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTask Task_RetrieveById(int taskId) {
            return base.Channel.Task_RetrieveById(taskId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTask_RetrieveById(int taskId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTask_RetrieveById(taskId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTask EndTask_RetrieveById(System.IAsyncResult result) {
            return base.Channel.EndTask_RetrieveById(result);
        }
        
        private System.IAsyncResult OnBeginTask_RetrieveById(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int taskId = ((int)(inValues[0]));
            return this.BeginTask_RetrieveById(taskId, callback, asyncState);
        }
        
        private object[] OnEndTask_RetrieveById(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTask retVal = this.EndTask_RetrieveById(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTask_RetrieveByIdCompleted(object state) {
            if ((this.Task_RetrieveByIdCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Task_RetrieveByIdCompleted(this, new Task_RetrieveByIdCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Task_RetrieveByIdAsync(int taskId) {
            this.Task_RetrieveByIdAsync(taskId, null);
        }
        
        public void Task_RetrieveByIdAsync(int taskId, object userState) {
            if ((this.onBeginTask_RetrieveByIdDelegate == null)) {
                this.onBeginTask_RetrieveByIdDelegate = new BeginOperationDelegate(this.OnBeginTask_RetrieveById);
            }
            if ((this.onEndTask_RetrieveByIdDelegate == null)) {
                this.onEndTask_RetrieveByIdDelegate = new EndOperationDelegate(this.OnEndTask_RetrieveById);
            }
            if ((this.onTask_RetrieveByIdCompletedDelegate == null)) {
                this.onTask_RetrieveByIdCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTask_RetrieveByIdCompleted);
            }
            base.InvokeAsync(this.onBeginTask_RetrieveByIdDelegate, new object[] {
                        taskId}, this.onEndTask_RetrieveByIdDelegate, this.onTask_RetrieveByIdCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTask[] Task_RetrieveForOwner() {
            return base.Channel.Task_RetrieveForOwner();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTask_RetrieveForOwner(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTask_RetrieveForOwner(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTask[] EndTask_RetrieveForOwner(System.IAsyncResult result) {
            return base.Channel.EndTask_RetrieveForOwner(result);
        }
        
        private System.IAsyncResult OnBeginTask_RetrieveForOwner(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginTask_RetrieveForOwner(callback, asyncState);
        }
        
        private object[] OnEndTask_RetrieveForOwner(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTask[] retVal = this.EndTask_RetrieveForOwner(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTask_RetrieveForOwnerCompleted(object state) {
            if ((this.Task_RetrieveForOwnerCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Task_RetrieveForOwnerCompleted(this, new Task_RetrieveForOwnerCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Task_RetrieveForOwnerAsync() {
            this.Task_RetrieveForOwnerAsync(null);
        }
        
        public void Task_RetrieveForOwnerAsync(object userState) {
            if ((this.onBeginTask_RetrieveForOwnerDelegate == null)) {
                this.onBeginTask_RetrieveForOwnerDelegate = new BeginOperationDelegate(this.OnBeginTask_RetrieveForOwner);
            }
            if ((this.onEndTask_RetrieveForOwnerDelegate == null)) {
                this.onEndTask_RetrieveForOwnerDelegate = new EndOperationDelegate(this.OnEndTask_RetrieveForOwner);
            }
            if ((this.onTask_RetrieveForOwnerCompletedDelegate == null)) {
                this.onTask_RetrieveForOwnerCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTask_RetrieveForOwnerCompleted);
            }
            base.InvokeAsync(this.onBeginTask_RetrieveForOwnerDelegate, null, this.onEndTask_RetrieveForOwnerDelegate, this.onTask_RetrieveForOwnerCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTask[] Task_RetrieveNew(System.DateTime creationDate, int startRow, int numberOfRows) {
            return base.Channel.Task_RetrieveNew(creationDate, startRow, numberOfRows);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTask_RetrieveNew(System.DateTime creationDate, int startRow, int numberOfRows, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTask_RetrieveNew(creationDate, startRow, numberOfRows, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTask[] EndTask_RetrieveNew(System.IAsyncResult result) {
            return base.Channel.EndTask_RetrieveNew(result);
        }
        
        private System.IAsyncResult OnBeginTask_RetrieveNew(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.DateTime creationDate = ((System.DateTime)(inValues[0]));
            int startRow = ((int)(inValues[1]));
            int numberOfRows = ((int)(inValues[2]));
            return this.BeginTask_RetrieveNew(creationDate, startRow, numberOfRows, callback, asyncState);
        }
        
        private object[] OnEndTask_RetrieveNew(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTask[] retVal = this.EndTask_RetrieveNew(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTask_RetrieveNewCompleted(object state) {
            if ((this.Task_RetrieveNewCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Task_RetrieveNewCompleted(this, new Task_RetrieveNewCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Task_RetrieveNewAsync(System.DateTime creationDate, int startRow, int numberOfRows) {
            this.Task_RetrieveNewAsync(creationDate, startRow, numberOfRows, null);
        }
        
        public void Task_RetrieveNewAsync(System.DateTime creationDate, int startRow, int numberOfRows, object userState) {
            if ((this.onBeginTask_RetrieveNewDelegate == null)) {
                this.onBeginTask_RetrieveNewDelegate = new BeginOperationDelegate(this.OnBeginTask_RetrieveNew);
            }
            if ((this.onEndTask_RetrieveNewDelegate == null)) {
                this.onEndTask_RetrieveNewDelegate = new EndOperationDelegate(this.OnEndTask_RetrieveNew);
            }
            if ((this.onTask_RetrieveNewCompletedDelegate == null)) {
                this.onTask_RetrieveNewCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTask_RetrieveNewCompleted);
            }
            base.InvokeAsync(this.onBeginTask_RetrieveNewDelegate, new object[] {
                        creationDate,
                        startRow,
                        numberOfRows}, this.onEndTask_RetrieveNewDelegate, this.onTask_RetrieveNewCompletedDelegate, userState);
        }
        
        public void Task_Update(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTask remoteTask) {
            base.Channel.Task_Update(remoteTask);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTask_Update(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTask remoteTask, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTask_Update(remoteTask, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndTask_Update(System.IAsyncResult result) {
            base.Channel.EndTask_Update(result);
        }
        
        private System.IAsyncResult OnBeginTask_Update(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTask remoteTask = ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTask)(inValues[0]));
            return this.BeginTask_Update(remoteTask, callback, asyncState);
        }
        
        private object[] OnEndTask_Update(System.IAsyncResult result) {
            this.EndTask_Update(result);
            return null;
        }
        
        private void OnTask_UpdateCompleted(object state) {
            if ((this.Task_UpdateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Task_UpdateCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Task_UpdateAsync(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTask remoteTask) {
            this.Task_UpdateAsync(remoteTask, null);
        }
        
        public void Task_UpdateAsync(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTask remoteTask, object userState) {
            if ((this.onBeginTask_UpdateDelegate == null)) {
                this.onBeginTask_UpdateDelegate = new BeginOperationDelegate(this.OnBeginTask_Update);
            }
            if ((this.onEndTask_UpdateDelegate == null)) {
                this.onEndTask_UpdateDelegate = new EndOperationDelegate(this.OnEndTask_Update);
            }
            if ((this.onTask_UpdateCompletedDelegate == null)) {
                this.onTask_UpdateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTask_UpdateCompleted);
            }
            base.InvokeAsync(this.onBeginTask_UpdateDelegate, new object[] {
                        remoteTask}, this.onEndTask_UpdateDelegate, this.onTask_UpdateCompletedDelegate, userState);
        }
        
        public long Task_Count(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters) {
            return base.Channel.Task_Count(remoteFilters);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTask_Count(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTask_Count(remoteFilters, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public long EndTask_Count(System.IAsyncResult result) {
            return base.Channel.EndTask_Count(result);
        }
        
        private System.IAsyncResult OnBeginTask_Count(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters = ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[])(inValues[0]));
            return this.BeginTask_Count(remoteFilters, callback, asyncState);
        }
        
        private object[] OnEndTask_Count(System.IAsyncResult result) {
            long retVal = this.EndTask_Count(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTask_CountCompleted(object state) {
            if ((this.Task_CountCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Task_CountCompleted(this, new Task_CountCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Task_CountAsync(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters) {
            this.Task_CountAsync(remoteFilters, null);
        }
        
        public void Task_CountAsync(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters, object userState) {
            if ((this.onBeginTask_CountDelegate == null)) {
                this.onBeginTask_CountDelegate = new BeginOperationDelegate(this.OnBeginTask_Count);
            }
            if ((this.onEndTask_CountDelegate == null)) {
                this.onEndTask_CountDelegate = new EndOperationDelegate(this.OnEndTask_Count);
            }
            if ((this.onTask_CountCompletedDelegate == null)) {
                this.onTask_CountCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTask_CountCompleted);
            }
            base.InvokeAsync(this.onBeginTask_CountDelegate, new object[] {
                        remoteFilters}, this.onEndTask_CountDelegate, this.onTask_CountCompletedDelegate, userState);
        }
        
        public void Task_Delete(int taskId) {
            base.Channel.Task_Delete(taskId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTask_Delete(int taskId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTask_Delete(taskId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndTask_Delete(System.IAsyncResult result) {
            base.Channel.EndTask_Delete(result);
        }
        
        private System.IAsyncResult OnBeginTask_Delete(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int taskId = ((int)(inValues[0]));
            return this.BeginTask_Delete(taskId, callback, asyncState);
        }
        
        private object[] OnEndTask_Delete(System.IAsyncResult result) {
            this.EndTask_Delete(result);
            return null;
        }
        
        private void OnTask_DeleteCompleted(object state) {
            if ((this.Task_DeleteCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Task_DeleteCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Task_DeleteAsync(int taskId) {
            this.Task_DeleteAsync(taskId, null);
        }
        
        public void Task_DeleteAsync(int taskId, object userState) {
            if ((this.onBeginTask_DeleteDelegate == null)) {
                this.onBeginTask_DeleteDelegate = new BeginOperationDelegate(this.OnBeginTask_Delete);
            }
            if ((this.onEndTask_DeleteDelegate == null)) {
                this.onEndTask_DeleteDelegate = new EndOperationDelegate(this.OnEndTask_Delete);
            }
            if ((this.onTask_DeleteCompletedDelegate == null)) {
                this.onTask_DeleteCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTask_DeleteCompleted);
            }
            base.InvokeAsync(this.onBeginTask_DeleteDelegate, new object[] {
                        taskId}, this.onEndTask_DeleteDelegate, this.onTask_DeleteCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComment[] Task_RetrieveComments(int TaskId) {
            return base.Channel.Task_RetrieveComments(TaskId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTask_RetrieveComments(int TaskId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTask_RetrieveComments(TaskId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComment[] EndTask_RetrieveComments(System.IAsyncResult result) {
            return base.Channel.EndTask_RetrieveComments(result);
        }
        
        private System.IAsyncResult OnBeginTask_RetrieveComments(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int TaskId = ((int)(inValues[0]));
            return this.BeginTask_RetrieveComments(TaskId, callback, asyncState);
        }
        
        private object[] OnEndTask_RetrieveComments(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComment[] retVal = this.EndTask_RetrieveComments(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTask_RetrieveCommentsCompleted(object state) {
            if ((this.Task_RetrieveCommentsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Task_RetrieveCommentsCompleted(this, new Task_RetrieveCommentsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Task_RetrieveCommentsAsync(int TaskId) {
            this.Task_RetrieveCommentsAsync(TaskId, null);
        }
        
        public void Task_RetrieveCommentsAsync(int TaskId, object userState) {
            if ((this.onBeginTask_RetrieveCommentsDelegate == null)) {
                this.onBeginTask_RetrieveCommentsDelegate = new BeginOperationDelegate(this.OnBeginTask_RetrieveComments);
            }
            if ((this.onEndTask_RetrieveCommentsDelegate == null)) {
                this.onEndTask_RetrieveCommentsDelegate = new EndOperationDelegate(this.OnEndTask_RetrieveComments);
            }
            if ((this.onTask_RetrieveCommentsCompletedDelegate == null)) {
                this.onTask_RetrieveCommentsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTask_RetrieveCommentsCompleted);
            }
            base.InvokeAsync(this.onBeginTask_RetrieveCommentsDelegate, new object[] {
                        TaskId}, this.onEndTask_RetrieveCommentsDelegate, this.onTask_RetrieveCommentsCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComment Task_CreateComment(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComment remoteComment) {
            return base.Channel.Task_CreateComment(remoteComment);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTask_CreateComment(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComment remoteComment, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTask_CreateComment(remoteComment, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComment EndTask_CreateComment(System.IAsyncResult result) {
            return base.Channel.EndTask_CreateComment(result);
        }
        
        private System.IAsyncResult OnBeginTask_CreateComment(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComment remoteComment = ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComment)(inValues[0]));
            return this.BeginTask_CreateComment(remoteComment, callback, asyncState);
        }
        
        private object[] OnEndTask_CreateComment(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComment retVal = this.EndTask_CreateComment(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTask_CreateCommentCompleted(object state) {
            if ((this.Task_CreateCommentCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Task_CreateCommentCompleted(this, new Task_CreateCommentCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Task_CreateCommentAsync(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComment remoteComment) {
            this.Task_CreateCommentAsync(remoteComment, null);
        }
        
        public void Task_CreateCommentAsync(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComment remoteComment, object userState) {
            if ((this.onBeginTask_CreateCommentDelegate == null)) {
                this.onBeginTask_CreateCommentDelegate = new BeginOperationDelegate(this.OnBeginTask_CreateComment);
            }
            if ((this.onEndTask_CreateCommentDelegate == null)) {
                this.onEndTask_CreateCommentDelegate = new EndOperationDelegate(this.OnEndTask_CreateComment);
            }
            if ((this.onTask_CreateCommentCompletedDelegate == null)) {
                this.onTask_CreateCommentCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTask_CreateCommentCompleted);
            }
            base.InvokeAsync(this.onBeginTask_CreateCommentDelegate, new object[] {
                        remoteComment}, this.onEndTask_CreateCommentDelegate, this.onTask_CreateCommentCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTaskStatus[] Task_RetrieveStatuses() {
            return base.Channel.Task_RetrieveStatuses();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTask_RetrieveStatuses(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTask_RetrieveStatuses(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTaskStatus[] EndTask_RetrieveStatuses(System.IAsyncResult result) {
            return base.Channel.EndTask_RetrieveStatuses(result);
        }
        
        private System.IAsyncResult OnBeginTask_RetrieveStatuses(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginTask_RetrieveStatuses(callback, asyncState);
        }
        
        private object[] OnEndTask_RetrieveStatuses(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTaskStatus[] retVal = this.EndTask_RetrieveStatuses(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTask_RetrieveStatusesCompleted(object state) {
            if ((this.Task_RetrieveStatusesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Task_RetrieveStatusesCompleted(this, new Task_RetrieveStatusesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Task_RetrieveStatusesAsync() {
            this.Task_RetrieveStatusesAsync(null);
        }
        
        public void Task_RetrieveStatusesAsync(object userState) {
            if ((this.onBeginTask_RetrieveStatusesDelegate == null)) {
                this.onBeginTask_RetrieveStatusesDelegate = new BeginOperationDelegate(this.OnBeginTask_RetrieveStatuses);
            }
            if ((this.onEndTask_RetrieveStatusesDelegate == null)) {
                this.onEndTask_RetrieveStatusesDelegate = new EndOperationDelegate(this.OnEndTask_RetrieveStatuses);
            }
            if ((this.onTask_RetrieveStatusesCompletedDelegate == null)) {
                this.onTask_RetrieveStatusesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTask_RetrieveStatusesCompleted);
            }
            base.InvokeAsync(this.onBeginTask_RetrieveStatusesDelegate, null, this.onEndTask_RetrieveStatusesDelegate, this.onTask_RetrieveStatusesCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTaskType[] Task_RetrieveTypes() {
            return base.Channel.Task_RetrieveTypes();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTask_RetrieveTypes(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTask_RetrieveTypes(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTaskType[] EndTask_RetrieveTypes(System.IAsyncResult result) {
            return base.Channel.EndTask_RetrieveTypes(result);
        }
        
        private System.IAsyncResult OnBeginTask_RetrieveTypes(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginTask_RetrieveTypes(callback, asyncState);
        }
        
        private object[] OnEndTask_RetrieveTypes(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTaskType[] retVal = this.EndTask_RetrieveTypes(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTask_RetrieveTypesCompleted(object state) {
            if ((this.Task_RetrieveTypesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Task_RetrieveTypesCompleted(this, new Task_RetrieveTypesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Task_RetrieveTypesAsync() {
            this.Task_RetrieveTypesAsync(null);
        }
        
        public void Task_RetrieveTypesAsync(object userState) {
            if ((this.onBeginTask_RetrieveTypesDelegate == null)) {
                this.onBeginTask_RetrieveTypesDelegate = new BeginOperationDelegate(this.OnBeginTask_RetrieveTypes);
            }
            if ((this.onEndTask_RetrieveTypesDelegate == null)) {
                this.onEndTask_RetrieveTypesDelegate = new EndOperationDelegate(this.OnEndTask_RetrieveTypes);
            }
            if ((this.onTask_RetrieveTypesCompletedDelegate == null)) {
                this.onTask_RetrieveTypesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTask_RetrieveTypesCompleted);
            }
            base.InvokeAsync(this.onBeginTask_RetrieveTypesDelegate, null, this.onEndTask_RetrieveTypesDelegate, this.onTask_RetrieveTypesCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteWorkflowField[] Task_RetrieveWorkflowFields(int currentTypeId, int currentStatusId) {
            return base.Channel.Task_RetrieveWorkflowFields(currentTypeId, currentStatusId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTask_RetrieveWorkflowFields(int currentTypeId, int currentStatusId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTask_RetrieveWorkflowFields(currentTypeId, currentStatusId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteWorkflowField[] EndTask_RetrieveWorkflowFields(System.IAsyncResult result) {
            return base.Channel.EndTask_RetrieveWorkflowFields(result);
        }
        
        private System.IAsyncResult OnBeginTask_RetrieveWorkflowFields(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int currentTypeId = ((int)(inValues[0]));
            int currentStatusId = ((int)(inValues[1]));
            return this.BeginTask_RetrieveWorkflowFields(currentTypeId, currentStatusId, callback, asyncState);
        }
        
        private object[] OnEndTask_RetrieveWorkflowFields(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteWorkflowField[] retVal = this.EndTask_RetrieveWorkflowFields(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTask_RetrieveWorkflowFieldsCompleted(object state) {
            if ((this.Task_RetrieveWorkflowFieldsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Task_RetrieveWorkflowFieldsCompleted(this, new Task_RetrieveWorkflowFieldsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Task_RetrieveWorkflowFieldsAsync(int currentTypeId, int currentStatusId) {
            this.Task_RetrieveWorkflowFieldsAsync(currentTypeId, currentStatusId, null);
        }
        
        public void Task_RetrieveWorkflowFieldsAsync(int currentTypeId, int currentStatusId, object userState) {
            if ((this.onBeginTask_RetrieveWorkflowFieldsDelegate == null)) {
                this.onBeginTask_RetrieveWorkflowFieldsDelegate = new BeginOperationDelegate(this.OnBeginTask_RetrieveWorkflowFields);
            }
            if ((this.onEndTask_RetrieveWorkflowFieldsDelegate == null)) {
                this.onEndTask_RetrieveWorkflowFieldsDelegate = new EndOperationDelegate(this.OnEndTask_RetrieveWorkflowFields);
            }
            if ((this.onTask_RetrieveWorkflowFieldsCompletedDelegate == null)) {
                this.onTask_RetrieveWorkflowFieldsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTask_RetrieveWorkflowFieldsCompleted);
            }
            base.InvokeAsync(this.onBeginTask_RetrieveWorkflowFieldsDelegate, new object[] {
                        currentTypeId,
                        currentStatusId}, this.onEndTask_RetrieveWorkflowFieldsDelegate, this.onTask_RetrieveWorkflowFieldsCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteWorkflowTransition[] Task_RetrieveWorkflowTransitions(int currentTypeId, int currentStatusId, bool isCreator, bool isOwner) {
            return base.Channel.Task_RetrieveWorkflowTransitions(currentTypeId, currentStatusId, isCreator, isOwner);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTask_RetrieveWorkflowTransitions(int currentTypeId, int currentStatusId, bool isCreator, bool isOwner, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTask_RetrieveWorkflowTransitions(currentTypeId, currentStatusId, isCreator, isOwner, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteWorkflowTransition[] EndTask_RetrieveWorkflowTransitions(System.IAsyncResult result) {
            return base.Channel.EndTask_RetrieveWorkflowTransitions(result);
        }
        
        private System.IAsyncResult OnBeginTask_RetrieveWorkflowTransitions(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int currentTypeId = ((int)(inValues[0]));
            int currentStatusId = ((int)(inValues[1]));
            bool isCreator = ((bool)(inValues[2]));
            bool isOwner = ((bool)(inValues[3]));
            return this.BeginTask_RetrieveWorkflowTransitions(currentTypeId, currentStatusId, isCreator, isOwner, callback, asyncState);
        }
        
        private object[] OnEndTask_RetrieveWorkflowTransitions(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteWorkflowTransition[] retVal = this.EndTask_RetrieveWorkflowTransitions(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTask_RetrieveWorkflowTransitionsCompleted(object state) {
            if ((this.Task_RetrieveWorkflowTransitionsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Task_RetrieveWorkflowTransitionsCompleted(this, new Task_RetrieveWorkflowTransitionsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Task_RetrieveWorkflowTransitionsAsync(int currentTypeId, int currentStatusId, bool isCreator, bool isOwner) {
            this.Task_RetrieveWorkflowTransitionsAsync(currentTypeId, currentStatusId, isCreator, isOwner, null);
        }
        
        public void Task_RetrieveWorkflowTransitionsAsync(int currentTypeId, int currentStatusId, bool isCreator, bool isOwner, object userState) {
            if ((this.onBeginTask_RetrieveWorkflowTransitionsDelegate == null)) {
                this.onBeginTask_RetrieveWorkflowTransitionsDelegate = new BeginOperationDelegate(this.OnBeginTask_RetrieveWorkflowTransitions);
            }
            if ((this.onEndTask_RetrieveWorkflowTransitionsDelegate == null)) {
                this.onEndTask_RetrieveWorkflowTransitionsDelegate = new EndOperationDelegate(this.OnEndTask_RetrieveWorkflowTransitions);
            }
            if ((this.onTask_RetrieveWorkflowTransitionsCompletedDelegate == null)) {
                this.onTask_RetrieveWorkflowTransitionsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTask_RetrieveWorkflowTransitionsCompleted);
            }
            base.InvokeAsync(this.onBeginTask_RetrieveWorkflowTransitionsDelegate, new object[] {
                        currentTypeId,
                        currentStatusId,
                        isCreator,
                        isOwner}, this.onEndTask_RetrieveWorkflowTransitionsDelegate, this.onTask_RetrieveWorkflowTransitionsCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteWorkflowCustomProperty[] Task_RetrieveWorkflowCustomProperties(int currentTypeId, int currentStatusId) {
            return base.Channel.Task_RetrieveWorkflowCustomProperties(currentTypeId, currentStatusId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTask_RetrieveWorkflowCustomProperties(int currentTypeId, int currentStatusId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTask_RetrieveWorkflowCustomProperties(currentTypeId, currentStatusId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteWorkflowCustomProperty[] EndTask_RetrieveWorkflowCustomProperties(System.IAsyncResult result) {
            return base.Channel.EndTask_RetrieveWorkflowCustomProperties(result);
        }
        
        private System.IAsyncResult OnBeginTask_RetrieveWorkflowCustomProperties(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int currentTypeId = ((int)(inValues[0]));
            int currentStatusId = ((int)(inValues[1]));
            return this.BeginTask_RetrieveWorkflowCustomProperties(currentTypeId, currentStatusId, callback, asyncState);
        }
        
        private object[] OnEndTask_RetrieveWorkflowCustomProperties(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteWorkflowCustomProperty[] retVal = this.EndTask_RetrieveWorkflowCustomProperties(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTask_RetrieveWorkflowCustomPropertiesCompleted(object state) {
            if ((this.Task_RetrieveWorkflowCustomPropertiesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Task_RetrieveWorkflowCustomPropertiesCompleted(this, new Task_RetrieveWorkflowCustomPropertiesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Task_RetrieveWorkflowCustomPropertiesAsync(int currentTypeId, int currentStatusId) {
            this.Task_RetrieveWorkflowCustomPropertiesAsync(currentTypeId, currentStatusId, null);
        }
        
        public void Task_RetrieveWorkflowCustomPropertiesAsync(int currentTypeId, int currentStatusId, object userState) {
            if ((this.onBeginTask_RetrieveWorkflowCustomPropertiesDelegate == null)) {
                this.onBeginTask_RetrieveWorkflowCustomPropertiesDelegate = new BeginOperationDelegate(this.OnBeginTask_RetrieveWorkflowCustomProperties);
            }
            if ((this.onEndTask_RetrieveWorkflowCustomPropertiesDelegate == null)) {
                this.onEndTask_RetrieveWorkflowCustomPropertiesDelegate = new EndOperationDelegate(this.OnEndTask_RetrieveWorkflowCustomProperties);
            }
            if ((this.onTask_RetrieveWorkflowCustomPropertiesCompletedDelegate == null)) {
                this.onTask_RetrieveWorkflowCustomPropertiesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTask_RetrieveWorkflowCustomPropertiesCompleted);
            }
            base.InvokeAsync(this.onBeginTask_RetrieveWorkflowCustomPropertiesDelegate, new object[] {
                        currentTypeId,
                        currentStatusId}, this.onEndTask_RetrieveWorkflowCustomPropertiesDelegate, this.onTask_RetrieveWorkflowCustomPropertiesCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTaskFolder[] Task_RetrieveFolders() {
            return base.Channel.Task_RetrieveFolders();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTask_RetrieveFolders(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTask_RetrieveFolders(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTaskFolder[] EndTask_RetrieveFolders(System.IAsyncResult result) {
            return base.Channel.EndTask_RetrieveFolders(result);
        }
        
        private System.IAsyncResult OnBeginTask_RetrieveFolders(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginTask_RetrieveFolders(callback, asyncState);
        }
        
        private object[] OnEndTask_RetrieveFolders(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTaskFolder[] retVal = this.EndTask_RetrieveFolders(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTask_RetrieveFoldersCompleted(object state) {
            if ((this.Task_RetrieveFoldersCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Task_RetrieveFoldersCompleted(this, new Task_RetrieveFoldersCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Task_RetrieveFoldersAsync() {
            this.Task_RetrieveFoldersAsync(null);
        }
        
        public void Task_RetrieveFoldersAsync(object userState) {
            if ((this.onBeginTask_RetrieveFoldersDelegate == null)) {
                this.onBeginTask_RetrieveFoldersDelegate = new BeginOperationDelegate(this.OnBeginTask_RetrieveFolders);
            }
            if ((this.onEndTask_RetrieveFoldersDelegate == null)) {
                this.onEndTask_RetrieveFoldersDelegate = new EndOperationDelegate(this.OnEndTask_RetrieveFolders);
            }
            if ((this.onTask_RetrieveFoldersCompletedDelegate == null)) {
                this.onTask_RetrieveFoldersCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTask_RetrieveFoldersCompleted);
            }
            base.InvokeAsync(this.onBeginTask_RetrieveFoldersDelegate, null, this.onEndTask_RetrieveFoldersDelegate, this.onTask_RetrieveFoldersCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTaskFolder[] Task_RetrieveFoldersByParent(System.Nullable<int> parentTaskFolderId) {
            return base.Channel.Task_RetrieveFoldersByParent(parentTaskFolderId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTask_RetrieveFoldersByParent(System.Nullable<int> parentTaskFolderId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTask_RetrieveFoldersByParent(parentTaskFolderId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTaskFolder[] EndTask_RetrieveFoldersByParent(System.IAsyncResult result) {
            return base.Channel.EndTask_RetrieveFoldersByParent(result);
        }
        
        private System.IAsyncResult OnBeginTask_RetrieveFoldersByParent(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Nullable<int> parentTaskFolderId = ((System.Nullable<int>)(inValues[0]));
            return this.BeginTask_RetrieveFoldersByParent(parentTaskFolderId, callback, asyncState);
        }
        
        private object[] OnEndTask_RetrieveFoldersByParent(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTaskFolder[] retVal = this.EndTask_RetrieveFoldersByParent(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTask_RetrieveFoldersByParentCompleted(object state) {
            if ((this.Task_RetrieveFoldersByParentCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Task_RetrieveFoldersByParentCompleted(this, new Task_RetrieveFoldersByParentCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Task_RetrieveFoldersByParentAsync(System.Nullable<int> parentTaskFolderId) {
            this.Task_RetrieveFoldersByParentAsync(parentTaskFolderId, null);
        }
        
        public void Task_RetrieveFoldersByParentAsync(System.Nullable<int> parentTaskFolderId, object userState) {
            if ((this.onBeginTask_RetrieveFoldersByParentDelegate == null)) {
                this.onBeginTask_RetrieveFoldersByParentDelegate = new BeginOperationDelegate(this.OnBeginTask_RetrieveFoldersByParent);
            }
            if ((this.onEndTask_RetrieveFoldersByParentDelegate == null)) {
                this.onEndTask_RetrieveFoldersByParentDelegate = new EndOperationDelegate(this.OnEndTask_RetrieveFoldersByParent);
            }
            if ((this.onTask_RetrieveFoldersByParentCompletedDelegate == null)) {
                this.onTask_RetrieveFoldersByParentCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTask_RetrieveFoldersByParentCompleted);
            }
            base.InvokeAsync(this.onBeginTask_RetrieveFoldersByParentDelegate, new object[] {
                        parentTaskFolderId}, this.onEndTask_RetrieveFoldersByParentDelegate, this.onTask_RetrieveFoldersByParentCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTaskFolder Task_CreateFolder(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTaskFolder remoteTaskFolder) {
            return base.Channel.Task_CreateFolder(remoteTaskFolder);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTask_CreateFolder(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTaskFolder remoteTaskFolder, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTask_CreateFolder(remoteTaskFolder, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTaskFolder EndTask_CreateFolder(System.IAsyncResult result) {
            return base.Channel.EndTask_CreateFolder(result);
        }
        
        private System.IAsyncResult OnBeginTask_CreateFolder(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTaskFolder remoteTaskFolder = ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTaskFolder)(inValues[0]));
            return this.BeginTask_CreateFolder(remoteTaskFolder, callback, asyncState);
        }
        
        private object[] OnEndTask_CreateFolder(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTaskFolder retVal = this.EndTask_CreateFolder(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTask_CreateFolderCompleted(object state) {
            if ((this.Task_CreateFolderCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Task_CreateFolderCompleted(this, new Task_CreateFolderCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Task_CreateFolderAsync(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTaskFolder remoteTaskFolder) {
            this.Task_CreateFolderAsync(remoteTaskFolder, null);
        }
        
        public void Task_CreateFolderAsync(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTaskFolder remoteTaskFolder, object userState) {
            if ((this.onBeginTask_CreateFolderDelegate == null)) {
                this.onBeginTask_CreateFolderDelegate = new BeginOperationDelegate(this.OnBeginTask_CreateFolder);
            }
            if ((this.onEndTask_CreateFolderDelegate == null)) {
                this.onEndTask_CreateFolderDelegate = new EndOperationDelegate(this.OnEndTask_CreateFolder);
            }
            if ((this.onTask_CreateFolderCompletedDelegate == null)) {
                this.onTask_CreateFolderCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTask_CreateFolderCompleted);
            }
            base.InvokeAsync(this.onBeginTask_CreateFolderDelegate, new object[] {
                        remoteTaskFolder}, this.onEndTask_CreateFolderDelegate, this.onTask_CreateFolderCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTaskFolder Task_RetrieveFolderById(int taskFolderId) {
            return base.Channel.Task_RetrieveFolderById(taskFolderId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTask_RetrieveFolderById(int taskFolderId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTask_RetrieveFolderById(taskFolderId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTaskFolder EndTask_RetrieveFolderById(System.IAsyncResult result) {
            return base.Channel.EndTask_RetrieveFolderById(result);
        }
        
        private System.IAsyncResult OnBeginTask_RetrieveFolderById(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int taskFolderId = ((int)(inValues[0]));
            return this.BeginTask_RetrieveFolderById(taskFolderId, callback, asyncState);
        }
        
        private object[] OnEndTask_RetrieveFolderById(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTaskFolder retVal = this.EndTask_RetrieveFolderById(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTask_RetrieveFolderByIdCompleted(object state) {
            if ((this.Task_RetrieveFolderByIdCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Task_RetrieveFolderByIdCompleted(this, new Task_RetrieveFolderByIdCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Task_RetrieveFolderByIdAsync(int taskFolderId) {
            this.Task_RetrieveFolderByIdAsync(taskFolderId, null);
        }
        
        public void Task_RetrieveFolderByIdAsync(int taskFolderId, object userState) {
            if ((this.onBeginTask_RetrieveFolderByIdDelegate == null)) {
                this.onBeginTask_RetrieveFolderByIdDelegate = new BeginOperationDelegate(this.OnBeginTask_RetrieveFolderById);
            }
            if ((this.onEndTask_RetrieveFolderByIdDelegate == null)) {
                this.onEndTask_RetrieveFolderByIdDelegate = new EndOperationDelegate(this.OnEndTask_RetrieveFolderById);
            }
            if ((this.onTask_RetrieveFolderByIdCompletedDelegate == null)) {
                this.onTask_RetrieveFolderByIdCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTask_RetrieveFolderByIdCompleted);
            }
            base.InvokeAsync(this.onBeginTask_RetrieveFolderByIdDelegate, new object[] {
                        taskFolderId}, this.onEndTask_RetrieveFolderByIdDelegate, this.onTask_RetrieveFolderByIdCompletedDelegate, userState);
        }
        
        public void Task_DeleteFolder(int taskFolderId) {
            base.Channel.Task_DeleteFolder(taskFolderId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTask_DeleteFolder(int taskFolderId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTask_DeleteFolder(taskFolderId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndTask_DeleteFolder(System.IAsyncResult result) {
            base.Channel.EndTask_DeleteFolder(result);
        }
        
        private System.IAsyncResult OnBeginTask_DeleteFolder(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int taskFolderId = ((int)(inValues[0]));
            return this.BeginTask_DeleteFolder(taskFolderId, callback, asyncState);
        }
        
        private object[] OnEndTask_DeleteFolder(System.IAsyncResult result) {
            this.EndTask_DeleteFolder(result);
            return null;
        }
        
        private void OnTask_DeleteFolderCompleted(object state) {
            if ((this.Task_DeleteFolderCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Task_DeleteFolderCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Task_DeleteFolderAsync(int taskFolderId) {
            this.Task_DeleteFolderAsync(taskFolderId, null);
        }
        
        public void Task_DeleteFolderAsync(int taskFolderId, object userState) {
            if ((this.onBeginTask_DeleteFolderDelegate == null)) {
                this.onBeginTask_DeleteFolderDelegate = new BeginOperationDelegate(this.OnBeginTask_DeleteFolder);
            }
            if ((this.onEndTask_DeleteFolderDelegate == null)) {
                this.onEndTask_DeleteFolderDelegate = new EndOperationDelegate(this.OnEndTask_DeleteFolder);
            }
            if ((this.onTask_DeleteFolderCompletedDelegate == null)) {
                this.onTask_DeleteFolderCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTask_DeleteFolderCompleted);
            }
            base.InvokeAsync(this.onBeginTask_DeleteFolderDelegate, new object[] {
                        taskFolderId}, this.onEndTask_DeleteFolderDelegate, this.onTask_DeleteFolderCompletedDelegate, userState);
        }
        
        public void Task_UpdateFolder(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTaskFolder remoteTaskFolder) {
            base.Channel.Task_UpdateFolder(remoteTaskFolder);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTask_UpdateFolder(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTaskFolder remoteTaskFolder, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTask_UpdateFolder(remoteTaskFolder, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndTask_UpdateFolder(System.IAsyncResult result) {
            base.Channel.EndTask_UpdateFolder(result);
        }
        
        private System.IAsyncResult OnBeginTask_UpdateFolder(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTaskFolder remoteTaskFolder = ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTaskFolder)(inValues[0]));
            return this.BeginTask_UpdateFolder(remoteTaskFolder, callback, asyncState);
        }
        
        private object[] OnEndTask_UpdateFolder(System.IAsyncResult result) {
            this.EndTask_UpdateFolder(result);
            return null;
        }
        
        private void OnTask_UpdateFolderCompleted(object state) {
            if ((this.Task_UpdateFolderCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Task_UpdateFolderCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Task_UpdateFolderAsync(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTaskFolder remoteTaskFolder) {
            this.Task_UpdateFolderAsync(remoteTaskFolder, null);
        }
        
        public void Task_UpdateFolderAsync(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTaskFolder remoteTaskFolder, object userState) {
            if ((this.onBeginTask_UpdateFolderDelegate == null)) {
                this.onBeginTask_UpdateFolderDelegate = new BeginOperationDelegate(this.OnBeginTask_UpdateFolder);
            }
            if ((this.onEndTask_UpdateFolderDelegate == null)) {
                this.onEndTask_UpdateFolderDelegate = new EndOperationDelegate(this.OnEndTask_UpdateFolder);
            }
            if ((this.onTask_UpdateFolderCompletedDelegate == null)) {
                this.onTask_UpdateFolderCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTask_UpdateFolderCompleted);
            }
            base.InvokeAsync(this.onBeginTask_UpdateFolderDelegate, new object[] {
                        remoteTaskFolder}, this.onEndTask_UpdateFolderDelegate, this.onTask_UpdateFolderCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestCase TestCase_Create(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestCase remoteTestCase) {
            return base.Channel.TestCase_Create(remoteTestCase);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTestCase_Create(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestCase remoteTestCase, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTestCase_Create(remoteTestCase, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestCase EndTestCase_Create(System.IAsyncResult result) {
            return base.Channel.EndTestCase_Create(result);
        }
        
        private System.IAsyncResult OnBeginTestCase_Create(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestCase remoteTestCase = ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestCase)(inValues[0]));
            return this.BeginTestCase_Create(remoteTestCase, callback, asyncState);
        }
        
        private object[] OnEndTestCase_Create(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestCase retVal = this.EndTestCase_Create(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTestCase_CreateCompleted(object state) {
            if ((this.TestCase_CreateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TestCase_CreateCompleted(this, new TestCase_CreateCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TestCase_CreateAsync(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestCase remoteTestCase) {
            this.TestCase_CreateAsync(remoteTestCase, null);
        }
        
        public void TestCase_CreateAsync(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestCase remoteTestCase, object userState) {
            if ((this.onBeginTestCase_CreateDelegate == null)) {
                this.onBeginTestCase_CreateDelegate = new BeginOperationDelegate(this.OnBeginTestCase_Create);
            }
            if ((this.onEndTestCase_CreateDelegate == null)) {
                this.onEndTestCase_CreateDelegate = new EndOperationDelegate(this.OnEndTestCase_Create);
            }
            if ((this.onTestCase_CreateCompletedDelegate == null)) {
                this.onTestCase_CreateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTestCase_CreateCompleted);
            }
            base.InvokeAsync(this.onBeginTestCase_CreateDelegate, new object[] {
                        remoteTestCase}, this.onEndTestCase_CreateDelegate, this.onTestCase_CreateCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestCaseFolder TestCase_CreateFolder(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestCaseFolder remoteTestCaseFolder) {
            return base.Channel.TestCase_CreateFolder(remoteTestCaseFolder);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTestCase_CreateFolder(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestCaseFolder remoteTestCaseFolder, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTestCase_CreateFolder(remoteTestCaseFolder, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestCaseFolder EndTestCase_CreateFolder(System.IAsyncResult result) {
            return base.Channel.EndTestCase_CreateFolder(result);
        }
        
        private System.IAsyncResult OnBeginTestCase_CreateFolder(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestCaseFolder remoteTestCaseFolder = ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestCaseFolder)(inValues[0]));
            return this.BeginTestCase_CreateFolder(remoteTestCaseFolder, callback, asyncState);
        }
        
        private object[] OnEndTestCase_CreateFolder(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestCaseFolder retVal = this.EndTestCase_CreateFolder(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTestCase_CreateFolderCompleted(object state) {
            if ((this.TestCase_CreateFolderCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TestCase_CreateFolderCompleted(this, new TestCase_CreateFolderCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TestCase_CreateFolderAsync(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestCaseFolder remoteTestCaseFolder) {
            this.TestCase_CreateFolderAsync(remoteTestCaseFolder, null);
        }
        
        public void TestCase_CreateFolderAsync(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestCaseFolder remoteTestCaseFolder, object userState) {
            if ((this.onBeginTestCase_CreateFolderDelegate == null)) {
                this.onBeginTestCase_CreateFolderDelegate = new BeginOperationDelegate(this.OnBeginTestCase_CreateFolder);
            }
            if ((this.onEndTestCase_CreateFolderDelegate == null)) {
                this.onEndTestCase_CreateFolderDelegate = new EndOperationDelegate(this.OnEndTestCase_CreateFolder);
            }
            if ((this.onTestCase_CreateFolderCompletedDelegate == null)) {
                this.onTestCase_CreateFolderCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTestCase_CreateFolderCompleted);
            }
            base.InvokeAsync(this.onBeginTestCase_CreateFolderDelegate, new object[] {
                        remoteTestCaseFolder}, this.onEndTestCase_CreateFolderDelegate, this.onTestCase_CreateFolderCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestCase TestCase_RetrieveById(int testCaseId) {
            return base.Channel.TestCase_RetrieveById(testCaseId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTestCase_RetrieveById(int testCaseId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTestCase_RetrieveById(testCaseId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestCase EndTestCase_RetrieveById(System.IAsyncResult result) {
            return base.Channel.EndTestCase_RetrieveById(result);
        }
        
        private System.IAsyncResult OnBeginTestCase_RetrieveById(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int testCaseId = ((int)(inValues[0]));
            return this.BeginTestCase_RetrieveById(testCaseId, callback, asyncState);
        }
        
        private object[] OnEndTestCase_RetrieveById(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestCase retVal = this.EndTestCase_RetrieveById(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTestCase_RetrieveByIdCompleted(object state) {
            if ((this.TestCase_RetrieveByIdCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TestCase_RetrieveByIdCompleted(this, new TestCase_RetrieveByIdCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TestCase_RetrieveByIdAsync(int testCaseId) {
            this.TestCase_RetrieveByIdAsync(testCaseId, null);
        }
        
        public void TestCase_RetrieveByIdAsync(int testCaseId, object userState) {
            if ((this.onBeginTestCase_RetrieveByIdDelegate == null)) {
                this.onBeginTestCase_RetrieveByIdDelegate = new BeginOperationDelegate(this.OnBeginTestCase_RetrieveById);
            }
            if ((this.onEndTestCase_RetrieveByIdDelegate == null)) {
                this.onEndTestCase_RetrieveByIdDelegate = new EndOperationDelegate(this.OnEndTestCase_RetrieveById);
            }
            if ((this.onTestCase_RetrieveByIdCompletedDelegate == null)) {
                this.onTestCase_RetrieveByIdCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTestCase_RetrieveByIdCompleted);
            }
            base.InvokeAsync(this.onBeginTestCase_RetrieveByIdDelegate, new object[] {
                        testCaseId}, this.onEndTestCase_RetrieveByIdDelegate, this.onTestCase_RetrieveByIdCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestCaseFolder TestCase_RetrieveFolderById(int testCaseFolderId) {
            return base.Channel.TestCase_RetrieveFolderById(testCaseFolderId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTestCase_RetrieveFolderById(int testCaseFolderId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTestCase_RetrieveFolderById(testCaseFolderId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestCaseFolder EndTestCase_RetrieveFolderById(System.IAsyncResult result) {
            return base.Channel.EndTestCase_RetrieveFolderById(result);
        }
        
        private System.IAsyncResult OnBeginTestCase_RetrieveFolderById(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int testCaseFolderId = ((int)(inValues[0]));
            return this.BeginTestCase_RetrieveFolderById(testCaseFolderId, callback, asyncState);
        }
        
        private object[] OnEndTestCase_RetrieveFolderById(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestCaseFolder retVal = this.EndTestCase_RetrieveFolderById(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTestCase_RetrieveFolderByIdCompleted(object state) {
            if ((this.TestCase_RetrieveFolderByIdCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TestCase_RetrieveFolderByIdCompleted(this, new TestCase_RetrieveFolderByIdCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TestCase_RetrieveFolderByIdAsync(int testCaseFolderId) {
            this.TestCase_RetrieveFolderByIdAsync(testCaseFolderId, null);
        }
        
        public void TestCase_RetrieveFolderByIdAsync(int testCaseFolderId, object userState) {
            if ((this.onBeginTestCase_RetrieveFolderByIdDelegate == null)) {
                this.onBeginTestCase_RetrieveFolderByIdDelegate = new BeginOperationDelegate(this.OnBeginTestCase_RetrieveFolderById);
            }
            if ((this.onEndTestCase_RetrieveFolderByIdDelegate == null)) {
                this.onEndTestCase_RetrieveFolderByIdDelegate = new EndOperationDelegate(this.OnEndTestCase_RetrieveFolderById);
            }
            if ((this.onTestCase_RetrieveFolderByIdCompletedDelegate == null)) {
                this.onTestCase_RetrieveFolderByIdCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTestCase_RetrieveFolderByIdCompleted);
            }
            base.InvokeAsync(this.onBeginTestCase_RetrieveFolderByIdDelegate, new object[] {
                        testCaseFolderId}, this.onEndTestCase_RetrieveFolderByIdDelegate, this.onTestCase_RetrieveFolderByIdCompletedDelegate, userState);
        }
        
        public void TestCase_Update(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestCase remoteTestCase) {
            base.Channel.TestCase_Update(remoteTestCase);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTestCase_Update(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestCase remoteTestCase, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTestCase_Update(remoteTestCase, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndTestCase_Update(System.IAsyncResult result) {
            base.Channel.EndTestCase_Update(result);
        }
        
        private System.IAsyncResult OnBeginTestCase_Update(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestCase remoteTestCase = ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestCase)(inValues[0]));
            return this.BeginTestCase_Update(remoteTestCase, callback, asyncState);
        }
        
        private object[] OnEndTestCase_Update(System.IAsyncResult result) {
            this.EndTestCase_Update(result);
            return null;
        }
        
        private void OnTestCase_UpdateCompleted(object state) {
            if ((this.TestCase_UpdateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TestCase_UpdateCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TestCase_UpdateAsync(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestCase remoteTestCase) {
            this.TestCase_UpdateAsync(remoteTestCase, null);
        }
        
        public void TestCase_UpdateAsync(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestCase remoteTestCase, object userState) {
            if ((this.onBeginTestCase_UpdateDelegate == null)) {
                this.onBeginTestCase_UpdateDelegate = new BeginOperationDelegate(this.OnBeginTestCase_Update);
            }
            if ((this.onEndTestCase_UpdateDelegate == null)) {
                this.onEndTestCase_UpdateDelegate = new EndOperationDelegate(this.OnEndTestCase_Update);
            }
            if ((this.onTestCase_UpdateCompletedDelegate == null)) {
                this.onTestCase_UpdateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTestCase_UpdateCompleted);
            }
            base.InvokeAsync(this.onBeginTestCase_UpdateDelegate, new object[] {
                        remoteTestCase}, this.onEndTestCase_UpdateDelegate, this.onTestCase_UpdateCompletedDelegate, userState);
        }
        
        public void TestCase_DeleteFolder(int testCaseFolderId) {
            base.Channel.TestCase_DeleteFolder(testCaseFolderId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTestCase_DeleteFolder(int testCaseFolderId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTestCase_DeleteFolder(testCaseFolderId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndTestCase_DeleteFolder(System.IAsyncResult result) {
            base.Channel.EndTestCase_DeleteFolder(result);
        }
        
        private System.IAsyncResult OnBeginTestCase_DeleteFolder(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int testCaseFolderId = ((int)(inValues[0]));
            return this.BeginTestCase_DeleteFolder(testCaseFolderId, callback, asyncState);
        }
        
        private object[] OnEndTestCase_DeleteFolder(System.IAsyncResult result) {
            this.EndTestCase_DeleteFolder(result);
            return null;
        }
        
        private void OnTestCase_DeleteFolderCompleted(object state) {
            if ((this.TestCase_DeleteFolderCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TestCase_DeleteFolderCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TestCase_DeleteFolderAsync(int testCaseFolderId) {
            this.TestCase_DeleteFolderAsync(testCaseFolderId, null);
        }
        
        public void TestCase_DeleteFolderAsync(int testCaseFolderId, object userState) {
            if ((this.onBeginTestCase_DeleteFolderDelegate == null)) {
                this.onBeginTestCase_DeleteFolderDelegate = new BeginOperationDelegate(this.OnBeginTestCase_DeleteFolder);
            }
            if ((this.onEndTestCase_DeleteFolderDelegate == null)) {
                this.onEndTestCase_DeleteFolderDelegate = new EndOperationDelegate(this.OnEndTestCase_DeleteFolder);
            }
            if ((this.onTestCase_DeleteFolderCompletedDelegate == null)) {
                this.onTestCase_DeleteFolderCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTestCase_DeleteFolderCompleted);
            }
            base.InvokeAsync(this.onBeginTestCase_DeleteFolderDelegate, new object[] {
                        testCaseFolderId}, this.onEndTestCase_DeleteFolderDelegate, this.onTestCase_DeleteFolderCompletedDelegate, userState);
        }
        
        public void TestCase_UpdateFolder(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestCaseFolder remoteTestCaseFolder) {
            base.Channel.TestCase_UpdateFolder(remoteTestCaseFolder);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTestCase_UpdateFolder(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestCaseFolder remoteTestCaseFolder, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTestCase_UpdateFolder(remoteTestCaseFolder, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndTestCase_UpdateFolder(System.IAsyncResult result) {
            base.Channel.EndTestCase_UpdateFolder(result);
        }
        
        private System.IAsyncResult OnBeginTestCase_UpdateFolder(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestCaseFolder remoteTestCaseFolder = ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestCaseFolder)(inValues[0]));
            return this.BeginTestCase_UpdateFolder(remoteTestCaseFolder, callback, asyncState);
        }
        
        private object[] OnEndTestCase_UpdateFolder(System.IAsyncResult result) {
            this.EndTestCase_UpdateFolder(result);
            return null;
        }
        
        private void OnTestCase_UpdateFolderCompleted(object state) {
            if ((this.TestCase_UpdateFolderCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TestCase_UpdateFolderCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TestCase_UpdateFolderAsync(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestCaseFolder remoteTestCaseFolder) {
            this.TestCase_UpdateFolderAsync(remoteTestCaseFolder, null);
        }
        
        public void TestCase_UpdateFolderAsync(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestCaseFolder remoteTestCaseFolder, object userState) {
            if ((this.onBeginTestCase_UpdateFolderDelegate == null)) {
                this.onBeginTestCase_UpdateFolderDelegate = new BeginOperationDelegate(this.OnBeginTestCase_UpdateFolder);
            }
            if ((this.onEndTestCase_UpdateFolderDelegate == null)) {
                this.onEndTestCase_UpdateFolderDelegate = new EndOperationDelegate(this.OnEndTestCase_UpdateFolder);
            }
            if ((this.onTestCase_UpdateFolderCompletedDelegate == null)) {
                this.onTestCase_UpdateFolderCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTestCase_UpdateFolderCompleted);
            }
            base.InvokeAsync(this.onBeginTestCase_UpdateFolderDelegate, new object[] {
                        remoteTestCaseFolder}, this.onEndTestCase_UpdateFolderDelegate, this.onTestCase_UpdateFolderCompletedDelegate, userState);
        }
        
        public void TestCase_Delete(int testCaseId) {
            base.Channel.TestCase_Delete(testCaseId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTestCase_Delete(int testCaseId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTestCase_Delete(testCaseId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndTestCase_Delete(System.IAsyncResult result) {
            base.Channel.EndTestCase_Delete(result);
        }
        
        private System.IAsyncResult OnBeginTestCase_Delete(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int testCaseId = ((int)(inValues[0]));
            return this.BeginTestCase_Delete(testCaseId, callback, asyncState);
        }
        
        private object[] OnEndTestCase_Delete(System.IAsyncResult result) {
            this.EndTestCase_Delete(result);
            return null;
        }
        
        private void OnTestCase_DeleteCompleted(object state) {
            if ((this.TestCase_DeleteCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TestCase_DeleteCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TestCase_DeleteAsync(int testCaseId) {
            this.TestCase_DeleteAsync(testCaseId, null);
        }
        
        public void TestCase_DeleteAsync(int testCaseId, object userState) {
            if ((this.onBeginTestCase_DeleteDelegate == null)) {
                this.onBeginTestCase_DeleteDelegate = new BeginOperationDelegate(this.OnBeginTestCase_Delete);
            }
            if ((this.onEndTestCase_DeleteDelegate == null)) {
                this.onEndTestCase_DeleteDelegate = new EndOperationDelegate(this.OnEndTestCase_Delete);
            }
            if ((this.onTestCase_DeleteCompletedDelegate == null)) {
                this.onTestCase_DeleteCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTestCase_DeleteCompleted);
            }
            base.InvokeAsync(this.onBeginTestCase_DeleteDelegate, new object[] {
                        testCaseId}, this.onEndTestCase_DeleteDelegate, this.onTestCase_DeleteCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestCaseParameter TestCase_AddParameter(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestCaseParameter remoteTestCaseParameter) {
            return base.Channel.TestCase_AddParameter(remoteTestCaseParameter);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTestCase_AddParameter(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestCaseParameter remoteTestCaseParameter, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTestCase_AddParameter(remoteTestCaseParameter, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestCaseParameter EndTestCase_AddParameter(System.IAsyncResult result) {
            return base.Channel.EndTestCase_AddParameter(result);
        }
        
        private System.IAsyncResult OnBeginTestCase_AddParameter(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestCaseParameter remoteTestCaseParameter = ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestCaseParameter)(inValues[0]));
            return this.BeginTestCase_AddParameter(remoteTestCaseParameter, callback, asyncState);
        }
        
        private object[] OnEndTestCase_AddParameter(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestCaseParameter retVal = this.EndTestCase_AddParameter(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTestCase_AddParameterCompleted(object state) {
            if ((this.TestCase_AddParameterCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TestCase_AddParameterCompleted(this, new TestCase_AddParameterCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TestCase_AddParameterAsync(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestCaseParameter remoteTestCaseParameter) {
            this.TestCase_AddParameterAsync(remoteTestCaseParameter, null);
        }
        
        public void TestCase_AddParameterAsync(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestCaseParameter remoteTestCaseParameter, object userState) {
            if ((this.onBeginTestCase_AddParameterDelegate == null)) {
                this.onBeginTestCase_AddParameterDelegate = new BeginOperationDelegate(this.OnBeginTestCase_AddParameter);
            }
            if ((this.onEndTestCase_AddParameterDelegate == null)) {
                this.onEndTestCase_AddParameterDelegate = new EndOperationDelegate(this.OnEndTestCase_AddParameter);
            }
            if ((this.onTestCase_AddParameterCompletedDelegate == null)) {
                this.onTestCase_AddParameterCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTestCase_AddParameterCompleted);
            }
            base.InvokeAsync(this.onBeginTestCase_AddParameterDelegate, new object[] {
                        remoteTestCaseParameter}, this.onEndTestCase_AddParameterDelegate, this.onTestCase_AddParameterCompletedDelegate, userState);
        }
        
        public string TestCase_CreateParameterToken(string parameterName) {
            return base.Channel.TestCase_CreateParameterToken(parameterName);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTestCase_CreateParameterToken(string parameterName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTestCase_CreateParameterToken(parameterName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndTestCase_CreateParameterToken(System.IAsyncResult result) {
            return base.Channel.EndTestCase_CreateParameterToken(result);
        }
        
        private System.IAsyncResult OnBeginTestCase_CreateParameterToken(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string parameterName = ((string)(inValues[0]));
            return this.BeginTestCase_CreateParameterToken(parameterName, callback, asyncState);
        }
        
        private object[] OnEndTestCase_CreateParameterToken(System.IAsyncResult result) {
            string retVal = this.EndTestCase_CreateParameterToken(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTestCase_CreateParameterTokenCompleted(object state) {
            if ((this.TestCase_CreateParameterTokenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TestCase_CreateParameterTokenCompleted(this, new TestCase_CreateParameterTokenCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TestCase_CreateParameterTokenAsync(string parameterName) {
            this.TestCase_CreateParameterTokenAsync(parameterName, null);
        }
        
        public void TestCase_CreateParameterTokenAsync(string parameterName, object userState) {
            if ((this.onBeginTestCase_CreateParameterTokenDelegate == null)) {
                this.onBeginTestCase_CreateParameterTokenDelegate = new BeginOperationDelegate(this.OnBeginTestCase_CreateParameterToken);
            }
            if ((this.onEndTestCase_CreateParameterTokenDelegate == null)) {
                this.onEndTestCase_CreateParameterTokenDelegate = new EndOperationDelegate(this.OnEndTestCase_CreateParameterToken);
            }
            if ((this.onTestCase_CreateParameterTokenCompletedDelegate == null)) {
                this.onTestCase_CreateParameterTokenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTestCase_CreateParameterTokenCompleted);
            }
            base.InvokeAsync(this.onBeginTestCase_CreateParameterTokenDelegate, new object[] {
                        parameterName}, this.onEndTestCase_CreateParameterTokenDelegate, this.onTestCase_CreateParameterTokenCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestCaseParameter[] TestCase_RetrieveParameters(int testCaseId) {
            return base.Channel.TestCase_RetrieveParameters(testCaseId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTestCase_RetrieveParameters(int testCaseId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTestCase_RetrieveParameters(testCaseId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestCaseParameter[] EndTestCase_RetrieveParameters(System.IAsyncResult result) {
            return base.Channel.EndTestCase_RetrieveParameters(result);
        }
        
        private System.IAsyncResult OnBeginTestCase_RetrieveParameters(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int testCaseId = ((int)(inValues[0]));
            return this.BeginTestCase_RetrieveParameters(testCaseId, callback, asyncState);
        }
        
        private object[] OnEndTestCase_RetrieveParameters(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestCaseParameter[] retVal = this.EndTestCase_RetrieveParameters(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTestCase_RetrieveParametersCompleted(object state) {
            if ((this.TestCase_RetrieveParametersCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TestCase_RetrieveParametersCompleted(this, new TestCase_RetrieveParametersCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TestCase_RetrieveParametersAsync(int testCaseId) {
            this.TestCase_RetrieveParametersAsync(testCaseId, null);
        }
        
        public void TestCase_RetrieveParametersAsync(int testCaseId, object userState) {
            if ((this.onBeginTestCase_RetrieveParametersDelegate == null)) {
                this.onBeginTestCase_RetrieveParametersDelegate = new BeginOperationDelegate(this.OnBeginTestCase_RetrieveParameters);
            }
            if ((this.onEndTestCase_RetrieveParametersDelegate == null)) {
                this.onEndTestCase_RetrieveParametersDelegate = new EndOperationDelegate(this.OnEndTestCase_RetrieveParameters);
            }
            if ((this.onTestCase_RetrieveParametersCompletedDelegate == null)) {
                this.onTestCase_RetrieveParametersCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTestCase_RetrieveParametersCompleted);
            }
            base.InvokeAsync(this.onBeginTestCase_RetrieveParametersDelegate, new object[] {
                        testCaseId}, this.onEndTestCase_RetrieveParametersDelegate, this.onTestCase_RetrieveParametersCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestStepParameter[] TestCase_RetrieveStepParameters(int testCaseId, int testStepId) {
            return base.Channel.TestCase_RetrieveStepParameters(testCaseId, testStepId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTestCase_RetrieveStepParameters(int testCaseId, int testStepId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTestCase_RetrieveStepParameters(testCaseId, testStepId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestStepParameter[] EndTestCase_RetrieveStepParameters(System.IAsyncResult result) {
            return base.Channel.EndTestCase_RetrieveStepParameters(result);
        }
        
        private System.IAsyncResult OnBeginTestCase_RetrieveStepParameters(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int testCaseId = ((int)(inValues[0]));
            int testStepId = ((int)(inValues[1]));
            return this.BeginTestCase_RetrieveStepParameters(testCaseId, testStepId, callback, asyncState);
        }
        
        private object[] OnEndTestCase_RetrieveStepParameters(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestStepParameter[] retVal = this.EndTestCase_RetrieveStepParameters(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTestCase_RetrieveStepParametersCompleted(object state) {
            if ((this.TestCase_RetrieveStepParametersCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TestCase_RetrieveStepParametersCompleted(this, new TestCase_RetrieveStepParametersCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TestCase_RetrieveStepParametersAsync(int testCaseId, int testStepId) {
            this.TestCase_RetrieveStepParametersAsync(testCaseId, testStepId, null);
        }
        
        public void TestCase_RetrieveStepParametersAsync(int testCaseId, int testStepId, object userState) {
            if ((this.onBeginTestCase_RetrieveStepParametersDelegate == null)) {
                this.onBeginTestCase_RetrieveStepParametersDelegate = new BeginOperationDelegate(this.OnBeginTestCase_RetrieveStepParameters);
            }
            if ((this.onEndTestCase_RetrieveStepParametersDelegate == null)) {
                this.onEndTestCase_RetrieveStepParametersDelegate = new EndOperationDelegate(this.OnEndTestCase_RetrieveStepParameters);
            }
            if ((this.onTestCase_RetrieveStepParametersCompletedDelegate == null)) {
                this.onTestCase_RetrieveStepParametersCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTestCase_RetrieveStepParametersCompleted);
            }
            base.InvokeAsync(this.onBeginTestCase_RetrieveStepParametersDelegate, new object[] {
                        testCaseId,
                        testStepId}, this.onEndTestCase_RetrieveStepParametersDelegate, this.onTestCase_RetrieveStepParametersCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestStep[] TestCase_RetrieveSteps(int testCaseId) {
            return base.Channel.TestCase_RetrieveSteps(testCaseId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTestCase_RetrieveSteps(int testCaseId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTestCase_RetrieveSteps(testCaseId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestStep[] EndTestCase_RetrieveSteps(System.IAsyncResult result) {
            return base.Channel.EndTestCase_RetrieveSteps(result);
        }
        
        private System.IAsyncResult OnBeginTestCase_RetrieveSteps(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int testCaseId = ((int)(inValues[0]));
            return this.BeginTestCase_RetrieveSteps(testCaseId, callback, asyncState);
        }
        
        private object[] OnEndTestCase_RetrieveSteps(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestStep[] retVal = this.EndTestCase_RetrieveSteps(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTestCase_RetrieveStepsCompleted(object state) {
            if ((this.TestCase_RetrieveStepsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TestCase_RetrieveStepsCompleted(this, new TestCase_RetrieveStepsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TestCase_RetrieveStepsAsync(int testCaseId) {
            this.TestCase_RetrieveStepsAsync(testCaseId, null);
        }
        
        public void TestCase_RetrieveStepsAsync(int testCaseId, object userState) {
            if ((this.onBeginTestCase_RetrieveStepsDelegate == null)) {
                this.onBeginTestCase_RetrieveStepsDelegate = new BeginOperationDelegate(this.OnBeginTestCase_RetrieveSteps);
            }
            if ((this.onEndTestCase_RetrieveStepsDelegate == null)) {
                this.onEndTestCase_RetrieveStepsDelegate = new EndOperationDelegate(this.OnEndTestCase_RetrieveSteps);
            }
            if ((this.onTestCase_RetrieveStepsCompletedDelegate == null)) {
                this.onTestCase_RetrieveStepsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTestCase_RetrieveStepsCompleted);
            }
            base.InvokeAsync(this.onBeginTestCase_RetrieveStepsDelegate, new object[] {
                        testCaseId}, this.onEndTestCase_RetrieveStepsDelegate, this.onTestCase_RetrieveStepsCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestStep TestCase_RetrieveStepById(int testStepId) {
            return base.Channel.TestCase_RetrieveStepById(testStepId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTestCase_RetrieveStepById(int testStepId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTestCase_RetrieveStepById(testStepId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestStep EndTestCase_RetrieveStepById(System.IAsyncResult result) {
            return base.Channel.EndTestCase_RetrieveStepById(result);
        }
        
        private System.IAsyncResult OnBeginTestCase_RetrieveStepById(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int testStepId = ((int)(inValues[0]));
            return this.BeginTestCase_RetrieveStepById(testStepId, callback, asyncState);
        }
        
        private object[] OnEndTestCase_RetrieveStepById(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestStep retVal = this.EndTestCase_RetrieveStepById(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTestCase_RetrieveStepByIdCompleted(object state) {
            if ((this.TestCase_RetrieveStepByIdCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TestCase_RetrieveStepByIdCompleted(this, new TestCase_RetrieveStepByIdCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TestCase_RetrieveStepByIdAsync(int testStepId) {
            this.TestCase_RetrieveStepByIdAsync(testStepId, null);
        }
        
        public void TestCase_RetrieveStepByIdAsync(int testStepId, object userState) {
            if ((this.onBeginTestCase_RetrieveStepByIdDelegate == null)) {
                this.onBeginTestCase_RetrieveStepByIdDelegate = new BeginOperationDelegate(this.OnBeginTestCase_RetrieveStepById);
            }
            if ((this.onEndTestCase_RetrieveStepByIdDelegate == null)) {
                this.onEndTestCase_RetrieveStepByIdDelegate = new EndOperationDelegate(this.OnEndTestCase_RetrieveStepById);
            }
            if ((this.onTestCase_RetrieveStepByIdCompletedDelegate == null)) {
                this.onTestCase_RetrieveStepByIdCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTestCase_RetrieveStepByIdCompleted);
            }
            base.InvokeAsync(this.onBeginTestCase_RetrieveStepByIdDelegate, new object[] {
                        testStepId}, this.onEndTestCase_RetrieveStepByIdDelegate, this.onTestCase_RetrieveStepByIdCompletedDelegate, userState);
        }
        
        public void TestCase_MoveStep(int testCaseId, int sourceTestStepId, System.Nullable<int> destinationTestStepId) {
            base.Channel.TestCase_MoveStep(testCaseId, sourceTestStepId, destinationTestStepId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTestCase_MoveStep(int testCaseId, int sourceTestStepId, System.Nullable<int> destinationTestStepId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTestCase_MoveStep(testCaseId, sourceTestStepId, destinationTestStepId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndTestCase_MoveStep(System.IAsyncResult result) {
            base.Channel.EndTestCase_MoveStep(result);
        }
        
        private System.IAsyncResult OnBeginTestCase_MoveStep(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int testCaseId = ((int)(inValues[0]));
            int sourceTestStepId = ((int)(inValues[1]));
            System.Nullable<int> destinationTestStepId = ((System.Nullable<int>)(inValues[2]));
            return this.BeginTestCase_MoveStep(testCaseId, sourceTestStepId, destinationTestStepId, callback, asyncState);
        }
        
        private object[] OnEndTestCase_MoveStep(System.IAsyncResult result) {
            this.EndTestCase_MoveStep(result);
            return null;
        }
        
        private void OnTestCase_MoveStepCompleted(object state) {
            if ((this.TestCase_MoveStepCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TestCase_MoveStepCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TestCase_MoveStepAsync(int testCaseId, int sourceTestStepId, System.Nullable<int> destinationTestStepId) {
            this.TestCase_MoveStepAsync(testCaseId, sourceTestStepId, destinationTestStepId, null);
        }
        
        public void TestCase_MoveStepAsync(int testCaseId, int sourceTestStepId, System.Nullable<int> destinationTestStepId, object userState) {
            if ((this.onBeginTestCase_MoveStepDelegate == null)) {
                this.onBeginTestCase_MoveStepDelegate = new BeginOperationDelegate(this.OnBeginTestCase_MoveStep);
            }
            if ((this.onEndTestCase_MoveStepDelegate == null)) {
                this.onEndTestCase_MoveStepDelegate = new EndOperationDelegate(this.OnEndTestCase_MoveStep);
            }
            if ((this.onTestCase_MoveStepCompletedDelegate == null)) {
                this.onTestCase_MoveStepCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTestCase_MoveStepCompleted);
            }
            base.InvokeAsync(this.onBeginTestCase_MoveStepDelegate, new object[] {
                        testCaseId,
                        sourceTestStepId,
                        destinationTestStepId}, this.onEndTestCase_MoveStepDelegate, this.onTestCase_MoveStepCompletedDelegate, userState);
        }
        
        public void TestCase_DeleteStep(int testCaseId, int testStepId) {
            base.Channel.TestCase_DeleteStep(testCaseId, testStepId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTestCase_DeleteStep(int testCaseId, int testStepId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTestCase_DeleteStep(testCaseId, testStepId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndTestCase_DeleteStep(System.IAsyncResult result) {
            base.Channel.EndTestCase_DeleteStep(result);
        }
        
        private System.IAsyncResult OnBeginTestCase_DeleteStep(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int testCaseId = ((int)(inValues[0]));
            int testStepId = ((int)(inValues[1]));
            return this.BeginTestCase_DeleteStep(testCaseId, testStepId, callback, asyncState);
        }
        
        private object[] OnEndTestCase_DeleteStep(System.IAsyncResult result) {
            this.EndTestCase_DeleteStep(result);
            return null;
        }
        
        private void OnTestCase_DeleteStepCompleted(object state) {
            if ((this.TestCase_DeleteStepCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TestCase_DeleteStepCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TestCase_DeleteStepAsync(int testCaseId, int testStepId) {
            this.TestCase_DeleteStepAsync(testCaseId, testStepId, null);
        }
        
        public void TestCase_DeleteStepAsync(int testCaseId, int testStepId, object userState) {
            if ((this.onBeginTestCase_DeleteStepDelegate == null)) {
                this.onBeginTestCase_DeleteStepDelegate = new BeginOperationDelegate(this.OnBeginTestCase_DeleteStep);
            }
            if ((this.onEndTestCase_DeleteStepDelegate == null)) {
                this.onEndTestCase_DeleteStepDelegate = new EndOperationDelegate(this.OnEndTestCase_DeleteStep);
            }
            if ((this.onTestCase_DeleteStepCompletedDelegate == null)) {
                this.onTestCase_DeleteStepCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTestCase_DeleteStepCompleted);
            }
            base.InvokeAsync(this.onBeginTestCase_DeleteStepDelegate, new object[] {
                        testCaseId,
                        testStepId}, this.onEndTestCase_DeleteStepDelegate, this.onTestCase_DeleteStepCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestStep TestCase_AddStep(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestStep remoteTestStep, int testCaseId) {
            return base.Channel.TestCase_AddStep(remoteTestStep, testCaseId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTestCase_AddStep(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestStep remoteTestStep, int testCaseId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTestCase_AddStep(remoteTestStep, testCaseId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestStep EndTestCase_AddStep(System.IAsyncResult result) {
            return base.Channel.EndTestCase_AddStep(result);
        }
        
        private System.IAsyncResult OnBeginTestCase_AddStep(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestStep remoteTestStep = ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestStep)(inValues[0]));
            int testCaseId = ((int)(inValues[1]));
            return this.BeginTestCase_AddStep(remoteTestStep, testCaseId, callback, asyncState);
        }
        
        private object[] OnEndTestCase_AddStep(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestStep retVal = this.EndTestCase_AddStep(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTestCase_AddStepCompleted(object state) {
            if ((this.TestCase_AddStepCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TestCase_AddStepCompleted(this, new TestCase_AddStepCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TestCase_AddStepAsync(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestStep remoteTestStep, int testCaseId) {
            this.TestCase_AddStepAsync(remoteTestStep, testCaseId, null);
        }
        
        public void TestCase_AddStepAsync(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestStep remoteTestStep, int testCaseId, object userState) {
            if ((this.onBeginTestCase_AddStepDelegate == null)) {
                this.onBeginTestCase_AddStepDelegate = new BeginOperationDelegate(this.OnBeginTestCase_AddStep);
            }
            if ((this.onEndTestCase_AddStepDelegate == null)) {
                this.onEndTestCase_AddStepDelegate = new EndOperationDelegate(this.OnEndTestCase_AddStep);
            }
            if ((this.onTestCase_AddStepCompletedDelegate == null)) {
                this.onTestCase_AddStepCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTestCase_AddStepCompleted);
            }
            base.InvokeAsync(this.onBeginTestCase_AddStepDelegate, new object[] {
                        remoteTestStep,
                        testCaseId}, this.onEndTestCase_AddStepDelegate, this.onTestCase_AddStepCompletedDelegate, userState);
        }
        
        public void TestCase_UpdateStep(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestStep remoteTestStep) {
            base.Channel.TestCase_UpdateStep(remoteTestStep);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTestCase_UpdateStep(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestStep remoteTestStep, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTestCase_UpdateStep(remoteTestStep, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndTestCase_UpdateStep(System.IAsyncResult result) {
            base.Channel.EndTestCase_UpdateStep(result);
        }
        
        private System.IAsyncResult OnBeginTestCase_UpdateStep(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestStep remoteTestStep = ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestStep)(inValues[0]));
            return this.BeginTestCase_UpdateStep(remoteTestStep, callback, asyncState);
        }
        
        private object[] OnEndTestCase_UpdateStep(System.IAsyncResult result) {
            this.EndTestCase_UpdateStep(result);
            return null;
        }
        
        private void OnTestCase_UpdateStepCompleted(object state) {
            if ((this.TestCase_UpdateStepCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TestCase_UpdateStepCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TestCase_UpdateStepAsync(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestStep remoteTestStep) {
            this.TestCase_UpdateStepAsync(remoteTestStep, null);
        }
        
        public void TestCase_UpdateStepAsync(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestStep remoteTestStep, object userState) {
            if ((this.onBeginTestCase_UpdateStepDelegate == null)) {
                this.onBeginTestCase_UpdateStepDelegate = new BeginOperationDelegate(this.OnBeginTestCase_UpdateStep);
            }
            if ((this.onEndTestCase_UpdateStepDelegate == null)) {
                this.onEndTestCase_UpdateStepDelegate = new EndOperationDelegate(this.OnEndTestCase_UpdateStep);
            }
            if ((this.onTestCase_UpdateStepCompletedDelegate == null)) {
                this.onTestCase_UpdateStepCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTestCase_UpdateStepCompleted);
            }
            base.InvokeAsync(this.onBeginTestCase_UpdateStepDelegate, new object[] {
                        remoteTestStep}, this.onEndTestCase_UpdateStepDelegate, this.onTestCase_UpdateStepCompletedDelegate, userState);
        }
        
        public int TestCase_AddLink(int testCaseId, int position, int linkedTestCaseId, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestStepParameter[] parameters) {
            return base.Channel.TestCase_AddLink(testCaseId, position, linkedTestCaseId, parameters);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTestCase_AddLink(int testCaseId, int position, int linkedTestCaseId, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestStepParameter[] parameters, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTestCase_AddLink(testCaseId, position, linkedTestCaseId, parameters, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public int EndTestCase_AddLink(System.IAsyncResult result) {
            return base.Channel.EndTestCase_AddLink(result);
        }
        
        private System.IAsyncResult OnBeginTestCase_AddLink(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int testCaseId = ((int)(inValues[0]));
            int position = ((int)(inValues[1]));
            int linkedTestCaseId = ((int)(inValues[2]));
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestStepParameter[] parameters = ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestStepParameter[])(inValues[3]));
            return this.BeginTestCase_AddLink(testCaseId, position, linkedTestCaseId, parameters, callback, asyncState);
        }
        
        private object[] OnEndTestCase_AddLink(System.IAsyncResult result) {
            int retVal = this.EndTestCase_AddLink(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTestCase_AddLinkCompleted(object state) {
            if ((this.TestCase_AddLinkCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TestCase_AddLinkCompleted(this, new TestCase_AddLinkCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TestCase_AddLinkAsync(int testCaseId, int position, int linkedTestCaseId, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestStepParameter[] parameters) {
            this.TestCase_AddLinkAsync(testCaseId, position, linkedTestCaseId, parameters, null);
        }
        
        public void TestCase_AddLinkAsync(int testCaseId, int position, int linkedTestCaseId, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestStepParameter[] parameters, object userState) {
            if ((this.onBeginTestCase_AddLinkDelegate == null)) {
                this.onBeginTestCase_AddLinkDelegate = new BeginOperationDelegate(this.OnBeginTestCase_AddLink);
            }
            if ((this.onEndTestCase_AddLinkDelegate == null)) {
                this.onEndTestCase_AddLinkDelegate = new EndOperationDelegate(this.OnEndTestCase_AddLink);
            }
            if ((this.onTestCase_AddLinkCompletedDelegate == null)) {
                this.onTestCase_AddLinkCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTestCase_AddLinkCompleted);
            }
            base.InvokeAsync(this.onBeginTestCase_AddLinkDelegate, new object[] {
                        testCaseId,
                        position,
                        linkedTestCaseId,
                        parameters}, this.onEndTestCase_AddLinkDelegate, this.onTestCase_AddLinkCompletedDelegate, userState);
        }
        
        public void TestCase_AddUpdateAutomationScript(int testCaseId, System.Nullable<int> automationEngineId, string urlOrFilename, string description, byte[] binaryData, string version, System.Nullable<int> projectAttachmentTypeId, System.Nullable<int> projectAttachmentFolderId) {
            base.Channel.TestCase_AddUpdateAutomationScript(testCaseId, automationEngineId, urlOrFilename, description, binaryData, version, projectAttachmentTypeId, projectAttachmentFolderId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTestCase_AddUpdateAutomationScript(int testCaseId, System.Nullable<int> automationEngineId, string urlOrFilename, string description, byte[] binaryData, string version, System.Nullable<int> projectAttachmentTypeId, System.Nullable<int> projectAttachmentFolderId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTestCase_AddUpdateAutomationScript(testCaseId, automationEngineId, urlOrFilename, description, binaryData, version, projectAttachmentTypeId, projectAttachmentFolderId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndTestCase_AddUpdateAutomationScript(System.IAsyncResult result) {
            base.Channel.EndTestCase_AddUpdateAutomationScript(result);
        }
        
        private System.IAsyncResult OnBeginTestCase_AddUpdateAutomationScript(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int testCaseId = ((int)(inValues[0]));
            System.Nullable<int> automationEngineId = ((System.Nullable<int>)(inValues[1]));
            string urlOrFilename = ((string)(inValues[2]));
            string description = ((string)(inValues[3]));
            byte[] binaryData = ((byte[])(inValues[4]));
            string version = ((string)(inValues[5]));
            System.Nullable<int> projectAttachmentTypeId = ((System.Nullable<int>)(inValues[6]));
            System.Nullable<int> projectAttachmentFolderId = ((System.Nullable<int>)(inValues[7]));
            return this.BeginTestCase_AddUpdateAutomationScript(testCaseId, automationEngineId, urlOrFilename, description, binaryData, version, projectAttachmentTypeId, projectAttachmentFolderId, callback, asyncState);
        }
        
        private object[] OnEndTestCase_AddUpdateAutomationScript(System.IAsyncResult result) {
            this.EndTestCase_AddUpdateAutomationScript(result);
            return null;
        }
        
        private void OnTestCase_AddUpdateAutomationScriptCompleted(object state) {
            if ((this.TestCase_AddUpdateAutomationScriptCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TestCase_AddUpdateAutomationScriptCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TestCase_AddUpdateAutomationScriptAsync(int testCaseId, System.Nullable<int> automationEngineId, string urlOrFilename, string description, byte[] binaryData, string version, System.Nullable<int> projectAttachmentTypeId, System.Nullable<int> projectAttachmentFolderId) {
            this.TestCase_AddUpdateAutomationScriptAsync(testCaseId, automationEngineId, urlOrFilename, description, binaryData, version, projectAttachmentTypeId, projectAttachmentFolderId, null);
        }
        
        public void TestCase_AddUpdateAutomationScriptAsync(int testCaseId, System.Nullable<int> automationEngineId, string urlOrFilename, string description, byte[] binaryData, string version, System.Nullable<int> projectAttachmentTypeId, System.Nullable<int> projectAttachmentFolderId, object userState) {
            if ((this.onBeginTestCase_AddUpdateAutomationScriptDelegate == null)) {
                this.onBeginTestCase_AddUpdateAutomationScriptDelegate = new BeginOperationDelegate(this.OnBeginTestCase_AddUpdateAutomationScript);
            }
            if ((this.onEndTestCase_AddUpdateAutomationScriptDelegate == null)) {
                this.onEndTestCase_AddUpdateAutomationScriptDelegate = new EndOperationDelegate(this.OnEndTestCase_AddUpdateAutomationScript);
            }
            if ((this.onTestCase_AddUpdateAutomationScriptCompletedDelegate == null)) {
                this.onTestCase_AddUpdateAutomationScriptCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTestCase_AddUpdateAutomationScriptCompleted);
            }
            base.InvokeAsync(this.onBeginTestCase_AddUpdateAutomationScriptDelegate, new object[] {
                        testCaseId,
                        automationEngineId,
                        urlOrFilename,
                        description,
                        binaryData,
                        version,
                        projectAttachmentTypeId,
                        projectAttachmentFolderId}, this.onEndTestCase_AddUpdateAutomationScriptDelegate, this.onTestCase_AddUpdateAutomationScriptCompletedDelegate, userState);
        }
        
        public long TestCase_Count(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters, System.Nullable<int> releaseId) {
            return base.Channel.TestCase_Count(remoteFilters, releaseId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTestCase_Count(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters, System.Nullable<int> releaseId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTestCase_Count(remoteFilters, releaseId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public long EndTestCase_Count(System.IAsyncResult result) {
            return base.Channel.EndTestCase_Count(result);
        }
        
        private System.IAsyncResult OnBeginTestCase_Count(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters = ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[])(inValues[0]));
            System.Nullable<int> releaseId = ((System.Nullable<int>)(inValues[1]));
            return this.BeginTestCase_Count(remoteFilters, releaseId, callback, asyncState);
        }
        
        private object[] OnEndTestCase_Count(System.IAsyncResult result) {
            long retVal = this.EndTestCase_Count(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTestCase_CountCompleted(object state) {
            if ((this.TestCase_CountCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TestCase_CountCompleted(this, new TestCase_CountCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TestCase_CountAsync(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters, System.Nullable<int> releaseId) {
            this.TestCase_CountAsync(remoteFilters, releaseId, null);
        }
        
        public void TestCase_CountAsync(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters, System.Nullable<int> releaseId, object userState) {
            if ((this.onBeginTestCase_CountDelegate == null)) {
                this.onBeginTestCase_CountDelegate = new BeginOperationDelegate(this.OnBeginTestCase_Count);
            }
            if ((this.onEndTestCase_CountDelegate == null)) {
                this.onEndTestCase_CountDelegate = new EndOperationDelegate(this.OnEndTestCase_Count);
            }
            if ((this.onTestCase_CountCompletedDelegate == null)) {
                this.onTestCase_CountCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTestCase_CountCompleted);
            }
            base.InvokeAsync(this.onBeginTestCase_CountDelegate, new object[] {
                        remoteFilters,
                        releaseId}, this.onEndTestCase_CountDelegate, this.onTestCase_CountCompletedDelegate, userState);
        }
        
        public long TestCase_CountForFolder(System.Nullable<int> testCaseFolderId, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters, System.Nullable<int> releaseId) {
            return base.Channel.TestCase_CountForFolder(testCaseFolderId, remoteFilters, releaseId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTestCase_CountForFolder(System.Nullable<int> testCaseFolderId, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters, System.Nullable<int> releaseId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTestCase_CountForFolder(testCaseFolderId, remoteFilters, releaseId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public long EndTestCase_CountForFolder(System.IAsyncResult result) {
            return base.Channel.EndTestCase_CountForFolder(result);
        }
        
        private System.IAsyncResult OnBeginTestCase_CountForFolder(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Nullable<int> testCaseFolderId = ((System.Nullable<int>)(inValues[0]));
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters = ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[])(inValues[1]));
            System.Nullable<int> releaseId = ((System.Nullable<int>)(inValues[2]));
            return this.BeginTestCase_CountForFolder(testCaseFolderId, remoteFilters, releaseId, callback, asyncState);
        }
        
        private object[] OnEndTestCase_CountForFolder(System.IAsyncResult result) {
            long retVal = this.EndTestCase_CountForFolder(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTestCase_CountForFolderCompleted(object state) {
            if ((this.TestCase_CountForFolderCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TestCase_CountForFolderCompleted(this, new TestCase_CountForFolderCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TestCase_CountForFolderAsync(System.Nullable<int> testCaseFolderId, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters, System.Nullable<int> releaseId) {
            this.TestCase_CountForFolderAsync(testCaseFolderId, remoteFilters, releaseId, null);
        }
        
        public void TestCase_CountForFolderAsync(System.Nullable<int> testCaseFolderId, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters, System.Nullable<int> releaseId, object userState) {
            if ((this.onBeginTestCase_CountForFolderDelegate == null)) {
                this.onBeginTestCase_CountForFolderDelegate = new BeginOperationDelegate(this.OnBeginTestCase_CountForFolder);
            }
            if ((this.onEndTestCase_CountForFolderDelegate == null)) {
                this.onEndTestCase_CountForFolderDelegate = new EndOperationDelegate(this.OnEndTestCase_CountForFolder);
            }
            if ((this.onTestCase_CountForFolderCompletedDelegate == null)) {
                this.onTestCase_CountForFolderCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTestCase_CountForFolderCompleted);
            }
            base.InvokeAsync(this.onBeginTestCase_CountForFolderDelegate, new object[] {
                        testCaseFolderId,
                        remoteFilters,
                        releaseId}, this.onEndTestCase_CountForFolderDelegate, this.onTestCase_CountForFolderCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestCase[] TestCase_Retrieve(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSort remoteSort, int startingRow, int numberOfRows, System.Nullable<int> releaseId) {
            return base.Channel.TestCase_Retrieve(remoteFilters, remoteSort, startingRow, numberOfRows, releaseId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTestCase_Retrieve(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSort remoteSort, int startingRow, int numberOfRows, System.Nullable<int> releaseId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTestCase_Retrieve(remoteFilters, remoteSort, startingRow, numberOfRows, releaseId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestCase[] EndTestCase_Retrieve(System.IAsyncResult result) {
            return base.Channel.EndTestCase_Retrieve(result);
        }
        
        private System.IAsyncResult OnBeginTestCase_Retrieve(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters = ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[])(inValues[0]));
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSort remoteSort = ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSort)(inValues[1]));
            int startingRow = ((int)(inValues[2]));
            int numberOfRows = ((int)(inValues[3]));
            System.Nullable<int> releaseId = ((System.Nullable<int>)(inValues[4]));
            return this.BeginTestCase_Retrieve(remoteFilters, remoteSort, startingRow, numberOfRows, releaseId, callback, asyncState);
        }
        
        private object[] OnEndTestCase_Retrieve(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestCase[] retVal = this.EndTestCase_Retrieve(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTestCase_RetrieveCompleted(object state) {
            if ((this.TestCase_RetrieveCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TestCase_RetrieveCompleted(this, new TestCase_RetrieveCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TestCase_RetrieveAsync(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSort remoteSort, int startingRow, int numberOfRows, System.Nullable<int> releaseId) {
            this.TestCase_RetrieveAsync(remoteFilters, remoteSort, startingRow, numberOfRows, releaseId, null);
        }
        
        public void TestCase_RetrieveAsync(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSort remoteSort, int startingRow, int numberOfRows, System.Nullable<int> releaseId, object userState) {
            if ((this.onBeginTestCase_RetrieveDelegate == null)) {
                this.onBeginTestCase_RetrieveDelegate = new BeginOperationDelegate(this.OnBeginTestCase_Retrieve);
            }
            if ((this.onEndTestCase_RetrieveDelegate == null)) {
                this.onEndTestCase_RetrieveDelegate = new EndOperationDelegate(this.OnEndTestCase_Retrieve);
            }
            if ((this.onTestCase_RetrieveCompletedDelegate == null)) {
                this.onTestCase_RetrieveCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTestCase_RetrieveCompleted);
            }
            base.InvokeAsync(this.onBeginTestCase_RetrieveDelegate, new object[] {
                        remoteFilters,
                        remoteSort,
                        startingRow,
                        numberOfRows,
                        releaseId}, this.onEndTestCase_RetrieveDelegate, this.onTestCase_RetrieveCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestCase[] TestCase_RetrieveByFolder(System.Nullable<int> testCaseFolderId, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSort remoteSort, int startingRow, int numberOfRows, System.Nullable<int> releaseId) {
            return base.Channel.TestCase_RetrieveByFolder(testCaseFolderId, remoteFilters, remoteSort, startingRow, numberOfRows, releaseId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTestCase_RetrieveByFolder(System.Nullable<int> testCaseFolderId, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSort remoteSort, int startingRow, int numberOfRows, System.Nullable<int> releaseId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTestCase_RetrieveByFolder(testCaseFolderId, remoteFilters, remoteSort, startingRow, numberOfRows, releaseId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestCase[] EndTestCase_RetrieveByFolder(System.IAsyncResult result) {
            return base.Channel.EndTestCase_RetrieveByFolder(result);
        }
        
        private System.IAsyncResult OnBeginTestCase_RetrieveByFolder(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Nullable<int> testCaseFolderId = ((System.Nullable<int>)(inValues[0]));
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters = ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[])(inValues[1]));
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSort remoteSort = ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSort)(inValues[2]));
            int startingRow = ((int)(inValues[3]));
            int numberOfRows = ((int)(inValues[4]));
            System.Nullable<int> releaseId = ((System.Nullable<int>)(inValues[5]));
            return this.BeginTestCase_RetrieveByFolder(testCaseFolderId, remoteFilters, remoteSort, startingRow, numberOfRows, releaseId, callback, asyncState);
        }
        
        private object[] OnEndTestCase_RetrieveByFolder(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestCase[] retVal = this.EndTestCase_RetrieveByFolder(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTestCase_RetrieveByFolderCompleted(object state) {
            if ((this.TestCase_RetrieveByFolderCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TestCase_RetrieveByFolderCompleted(this, new TestCase_RetrieveByFolderCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TestCase_RetrieveByFolderAsync(System.Nullable<int> testCaseFolderId, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSort remoteSort, int startingRow, int numberOfRows, System.Nullable<int> releaseId) {
            this.TestCase_RetrieveByFolderAsync(testCaseFolderId, remoteFilters, remoteSort, startingRow, numberOfRows, releaseId, null);
        }
        
        public void TestCase_RetrieveByFolderAsync(System.Nullable<int> testCaseFolderId, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSort remoteSort, int startingRow, int numberOfRows, System.Nullable<int> releaseId, object userState) {
            if ((this.onBeginTestCase_RetrieveByFolderDelegate == null)) {
                this.onBeginTestCase_RetrieveByFolderDelegate = new BeginOperationDelegate(this.OnBeginTestCase_RetrieveByFolder);
            }
            if ((this.onEndTestCase_RetrieveByFolderDelegate == null)) {
                this.onEndTestCase_RetrieveByFolderDelegate = new EndOperationDelegate(this.OnEndTestCase_RetrieveByFolder);
            }
            if ((this.onTestCase_RetrieveByFolderCompletedDelegate == null)) {
                this.onTestCase_RetrieveByFolderCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTestCase_RetrieveByFolderCompleted);
            }
            base.InvokeAsync(this.onBeginTestCase_RetrieveByFolderDelegate, new object[] {
                        testCaseFolderId,
                        remoteFilters,
                        remoteSort,
                        startingRow,
                        numberOfRows,
                        releaseId}, this.onEndTestCase_RetrieveByFolderDelegate, this.onTestCase_RetrieveByFolderCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestCase[] TestCase_RetrieveByTestSetId(int testSetId) {
            return base.Channel.TestCase_RetrieveByTestSetId(testSetId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTestCase_RetrieveByTestSetId(int testSetId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTestCase_RetrieveByTestSetId(testSetId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestCase[] EndTestCase_RetrieveByTestSetId(System.IAsyncResult result) {
            return base.Channel.EndTestCase_RetrieveByTestSetId(result);
        }
        
        private System.IAsyncResult OnBeginTestCase_RetrieveByTestSetId(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int testSetId = ((int)(inValues[0]));
            return this.BeginTestCase_RetrieveByTestSetId(testSetId, callback, asyncState);
        }
        
        private object[] OnEndTestCase_RetrieveByTestSetId(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestCase[] retVal = this.EndTestCase_RetrieveByTestSetId(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTestCase_RetrieveByTestSetIdCompleted(object state) {
            if ((this.TestCase_RetrieveByTestSetIdCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TestCase_RetrieveByTestSetIdCompleted(this, new TestCase_RetrieveByTestSetIdCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TestCase_RetrieveByTestSetIdAsync(int testSetId) {
            this.TestCase_RetrieveByTestSetIdAsync(testSetId, null);
        }
        
        public void TestCase_RetrieveByTestSetIdAsync(int testSetId, object userState) {
            if ((this.onBeginTestCase_RetrieveByTestSetIdDelegate == null)) {
                this.onBeginTestCase_RetrieveByTestSetIdDelegate = new BeginOperationDelegate(this.OnBeginTestCase_RetrieveByTestSetId);
            }
            if ((this.onEndTestCase_RetrieveByTestSetIdDelegate == null)) {
                this.onEndTestCase_RetrieveByTestSetIdDelegate = new EndOperationDelegate(this.OnEndTestCase_RetrieveByTestSetId);
            }
            if ((this.onTestCase_RetrieveByTestSetIdCompletedDelegate == null)) {
                this.onTestCase_RetrieveByTestSetIdCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTestCase_RetrieveByTestSetIdCompleted);
            }
            base.InvokeAsync(this.onBeginTestCase_RetrieveByTestSetIdDelegate, new object[] {
                        testSetId}, this.onEndTestCase_RetrieveByTestSetIdDelegate, this.onTestCase_RetrieveByTestSetIdCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestCase[] TestCase_RetrieveForOwner() {
            return base.Channel.TestCase_RetrieveForOwner();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTestCase_RetrieveForOwner(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTestCase_RetrieveForOwner(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestCase[] EndTestCase_RetrieveForOwner(System.IAsyncResult result) {
            return base.Channel.EndTestCase_RetrieveForOwner(result);
        }
        
        private System.IAsyncResult OnBeginTestCase_RetrieveForOwner(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginTestCase_RetrieveForOwner(callback, asyncState);
        }
        
        private object[] OnEndTestCase_RetrieveForOwner(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestCase[] retVal = this.EndTestCase_RetrieveForOwner(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTestCase_RetrieveForOwnerCompleted(object state) {
            if ((this.TestCase_RetrieveForOwnerCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TestCase_RetrieveForOwnerCompleted(this, new TestCase_RetrieveForOwnerCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TestCase_RetrieveForOwnerAsync() {
            this.TestCase_RetrieveForOwnerAsync(null);
        }
        
        public void TestCase_RetrieveForOwnerAsync(object userState) {
            if ((this.onBeginTestCase_RetrieveForOwnerDelegate == null)) {
                this.onBeginTestCase_RetrieveForOwnerDelegate = new BeginOperationDelegate(this.OnBeginTestCase_RetrieveForOwner);
            }
            if ((this.onEndTestCase_RetrieveForOwnerDelegate == null)) {
                this.onEndTestCase_RetrieveForOwnerDelegate = new EndOperationDelegate(this.OnEndTestCase_RetrieveForOwner);
            }
            if ((this.onTestCase_RetrieveForOwnerCompletedDelegate == null)) {
                this.onTestCase_RetrieveForOwnerCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTestCase_RetrieveForOwnerCompleted);
            }
            base.InvokeAsync(this.onBeginTestCase_RetrieveForOwnerDelegate, null, this.onEndTestCase_RetrieveForOwnerDelegate, this.onTestCase_RetrieveForOwnerCompletedDelegate, userState);
        }
        
        public void TestCase_Move(int testCaseId, System.Nullable<int> testCaseFolderId) {
            base.Channel.TestCase_Move(testCaseId, testCaseFolderId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTestCase_Move(int testCaseId, System.Nullable<int> testCaseFolderId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTestCase_Move(testCaseId, testCaseFolderId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndTestCase_Move(System.IAsyncResult result) {
            base.Channel.EndTestCase_Move(result);
        }
        
        private System.IAsyncResult OnBeginTestCase_Move(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int testCaseId = ((int)(inValues[0]));
            System.Nullable<int> testCaseFolderId = ((System.Nullable<int>)(inValues[1]));
            return this.BeginTestCase_Move(testCaseId, testCaseFolderId, callback, asyncState);
        }
        
        private object[] OnEndTestCase_Move(System.IAsyncResult result) {
            this.EndTestCase_Move(result);
            return null;
        }
        
        private void OnTestCase_MoveCompleted(object state) {
            if ((this.TestCase_MoveCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TestCase_MoveCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TestCase_MoveAsync(int testCaseId, System.Nullable<int> testCaseFolderId) {
            this.TestCase_MoveAsync(testCaseId, testCaseFolderId, null);
        }
        
        public void TestCase_MoveAsync(int testCaseId, System.Nullable<int> testCaseFolderId, object userState) {
            if ((this.onBeginTestCase_MoveDelegate == null)) {
                this.onBeginTestCase_MoveDelegate = new BeginOperationDelegate(this.OnBeginTestCase_Move);
            }
            if ((this.onEndTestCase_MoveDelegate == null)) {
                this.onEndTestCase_MoveDelegate = new EndOperationDelegate(this.OnEndTestCase_Move);
            }
            if ((this.onTestCase_MoveCompletedDelegate == null)) {
                this.onTestCase_MoveCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTestCase_MoveCompleted);
            }
            base.InvokeAsync(this.onBeginTestCase_MoveDelegate, new object[] {
                        testCaseId,
                        testCaseFolderId}, this.onEndTestCase_MoveDelegate, this.onTestCase_MoveCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestCaseFolder[] TestCase_RetrieveFolders() {
            return base.Channel.TestCase_RetrieveFolders();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTestCase_RetrieveFolders(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTestCase_RetrieveFolders(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestCaseFolder[] EndTestCase_RetrieveFolders(System.IAsyncResult result) {
            return base.Channel.EndTestCase_RetrieveFolders(result);
        }
        
        private System.IAsyncResult OnBeginTestCase_RetrieveFolders(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginTestCase_RetrieveFolders(callback, asyncState);
        }
        
        private object[] OnEndTestCase_RetrieveFolders(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestCaseFolder[] retVal = this.EndTestCase_RetrieveFolders(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTestCase_RetrieveFoldersCompleted(object state) {
            if ((this.TestCase_RetrieveFoldersCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TestCase_RetrieveFoldersCompleted(this, new TestCase_RetrieveFoldersCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TestCase_RetrieveFoldersAsync() {
            this.TestCase_RetrieveFoldersAsync(null);
        }
        
        public void TestCase_RetrieveFoldersAsync(object userState) {
            if ((this.onBeginTestCase_RetrieveFoldersDelegate == null)) {
                this.onBeginTestCase_RetrieveFoldersDelegate = new BeginOperationDelegate(this.OnBeginTestCase_RetrieveFolders);
            }
            if ((this.onEndTestCase_RetrieveFoldersDelegate == null)) {
                this.onEndTestCase_RetrieveFoldersDelegate = new EndOperationDelegate(this.OnEndTestCase_RetrieveFolders);
            }
            if ((this.onTestCase_RetrieveFoldersCompletedDelegate == null)) {
                this.onTestCase_RetrieveFoldersCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTestCase_RetrieveFoldersCompleted);
            }
            base.InvokeAsync(this.onBeginTestCase_RetrieveFoldersDelegate, null, this.onEndTestCase_RetrieveFoldersDelegate, this.onTestCase_RetrieveFoldersCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestCaseFolder[] TestCase_RetrieveFoldersByParent(System.Nullable<int> parentTestCaseFolderId, System.Nullable<int> releaseId) {
            return base.Channel.TestCase_RetrieveFoldersByParent(parentTestCaseFolderId, releaseId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTestCase_RetrieveFoldersByParent(System.Nullable<int> parentTestCaseFolderId, System.Nullable<int> releaseId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTestCase_RetrieveFoldersByParent(parentTestCaseFolderId, releaseId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestCaseFolder[] EndTestCase_RetrieveFoldersByParent(System.IAsyncResult result) {
            return base.Channel.EndTestCase_RetrieveFoldersByParent(result);
        }
        
        private System.IAsyncResult OnBeginTestCase_RetrieveFoldersByParent(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Nullable<int> parentTestCaseFolderId = ((System.Nullable<int>)(inValues[0]));
            System.Nullable<int> releaseId = ((System.Nullable<int>)(inValues[1]));
            return this.BeginTestCase_RetrieveFoldersByParent(parentTestCaseFolderId, releaseId, callback, asyncState);
        }
        
        private object[] OnEndTestCase_RetrieveFoldersByParent(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestCaseFolder[] retVal = this.EndTestCase_RetrieveFoldersByParent(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTestCase_RetrieveFoldersByParentCompleted(object state) {
            if ((this.TestCase_RetrieveFoldersByParentCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TestCase_RetrieveFoldersByParentCompleted(this, new TestCase_RetrieveFoldersByParentCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TestCase_RetrieveFoldersByParentAsync(System.Nullable<int> parentTestCaseFolderId, System.Nullable<int> releaseId) {
            this.TestCase_RetrieveFoldersByParentAsync(parentTestCaseFolderId, releaseId, null);
        }
        
        public void TestCase_RetrieveFoldersByParentAsync(System.Nullable<int> parentTestCaseFolderId, System.Nullable<int> releaseId, object userState) {
            if ((this.onBeginTestCase_RetrieveFoldersByParentDelegate == null)) {
                this.onBeginTestCase_RetrieveFoldersByParentDelegate = new BeginOperationDelegate(this.OnBeginTestCase_RetrieveFoldersByParent);
            }
            if ((this.onEndTestCase_RetrieveFoldersByParentDelegate == null)) {
                this.onEndTestCase_RetrieveFoldersByParentDelegate = new EndOperationDelegate(this.OnEndTestCase_RetrieveFoldersByParent);
            }
            if ((this.onTestCase_RetrieveFoldersByParentCompletedDelegate == null)) {
                this.onTestCase_RetrieveFoldersByParentCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTestCase_RetrieveFoldersByParentCompleted);
            }
            base.InvokeAsync(this.onBeginTestCase_RetrieveFoldersByParentDelegate, new object[] {
                        parentTestCaseFolderId,
                        releaseId}, this.onEndTestCase_RetrieveFoldersByParentDelegate, this.onTestCase_RetrieveFoldersByParentCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComment[] TestCase_RetrieveComments(int TestCaseId) {
            return base.Channel.TestCase_RetrieveComments(TestCaseId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTestCase_RetrieveComments(int TestCaseId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTestCase_RetrieveComments(TestCaseId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComment[] EndTestCase_RetrieveComments(System.IAsyncResult result) {
            return base.Channel.EndTestCase_RetrieveComments(result);
        }
        
        private System.IAsyncResult OnBeginTestCase_RetrieveComments(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int TestCaseId = ((int)(inValues[0]));
            return this.BeginTestCase_RetrieveComments(TestCaseId, callback, asyncState);
        }
        
        private object[] OnEndTestCase_RetrieveComments(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComment[] retVal = this.EndTestCase_RetrieveComments(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTestCase_RetrieveCommentsCompleted(object state) {
            if ((this.TestCase_RetrieveCommentsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TestCase_RetrieveCommentsCompleted(this, new TestCase_RetrieveCommentsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TestCase_RetrieveCommentsAsync(int TestCaseId) {
            this.TestCase_RetrieveCommentsAsync(TestCaseId, null);
        }
        
        public void TestCase_RetrieveCommentsAsync(int TestCaseId, object userState) {
            if ((this.onBeginTestCase_RetrieveCommentsDelegate == null)) {
                this.onBeginTestCase_RetrieveCommentsDelegate = new BeginOperationDelegate(this.OnBeginTestCase_RetrieveComments);
            }
            if ((this.onEndTestCase_RetrieveCommentsDelegate == null)) {
                this.onEndTestCase_RetrieveCommentsDelegate = new EndOperationDelegate(this.OnEndTestCase_RetrieveComments);
            }
            if ((this.onTestCase_RetrieveCommentsCompletedDelegate == null)) {
                this.onTestCase_RetrieveCommentsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTestCase_RetrieveCommentsCompleted);
            }
            base.InvokeAsync(this.onBeginTestCase_RetrieveCommentsDelegate, new object[] {
                        TestCaseId}, this.onEndTestCase_RetrieveCommentsDelegate, this.onTestCase_RetrieveCommentsCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComment TestCase_CreateComment(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComment remoteComment) {
            return base.Channel.TestCase_CreateComment(remoteComment);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTestCase_CreateComment(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComment remoteComment, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTestCase_CreateComment(remoteComment, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComment EndTestCase_CreateComment(System.IAsyncResult result) {
            return base.Channel.EndTestCase_CreateComment(result);
        }
        
        private System.IAsyncResult OnBeginTestCase_CreateComment(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComment remoteComment = ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComment)(inValues[0]));
            return this.BeginTestCase_CreateComment(remoteComment, callback, asyncState);
        }
        
        private object[] OnEndTestCase_CreateComment(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComment retVal = this.EndTestCase_CreateComment(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTestCase_CreateCommentCompleted(object state) {
            if ((this.TestCase_CreateCommentCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TestCase_CreateCommentCompleted(this, new TestCase_CreateCommentCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TestCase_CreateCommentAsync(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComment remoteComment) {
            this.TestCase_CreateCommentAsync(remoteComment, null);
        }
        
        public void TestCase_CreateCommentAsync(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComment remoteComment, object userState) {
            if ((this.onBeginTestCase_CreateCommentDelegate == null)) {
                this.onBeginTestCase_CreateCommentDelegate = new BeginOperationDelegate(this.OnBeginTestCase_CreateComment);
            }
            if ((this.onEndTestCase_CreateCommentDelegate == null)) {
                this.onEndTestCase_CreateCommentDelegate = new EndOperationDelegate(this.OnEndTestCase_CreateComment);
            }
            if ((this.onTestCase_CreateCommentCompletedDelegate == null)) {
                this.onTestCase_CreateCommentCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTestCase_CreateCommentCompleted);
            }
            base.InvokeAsync(this.onBeginTestCase_CreateCommentDelegate, new object[] {
                        remoteComment}, this.onEndTestCase_CreateCommentDelegate, this.onTestCase_CreateCommentCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestCaseStatus[] TestCase_RetrieveStatuses() {
            return base.Channel.TestCase_RetrieveStatuses();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTestCase_RetrieveStatuses(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTestCase_RetrieveStatuses(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestCaseStatus[] EndTestCase_RetrieveStatuses(System.IAsyncResult result) {
            return base.Channel.EndTestCase_RetrieveStatuses(result);
        }
        
        private System.IAsyncResult OnBeginTestCase_RetrieveStatuses(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginTestCase_RetrieveStatuses(callback, asyncState);
        }
        
        private object[] OnEndTestCase_RetrieveStatuses(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestCaseStatus[] retVal = this.EndTestCase_RetrieveStatuses(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTestCase_RetrieveStatusesCompleted(object state) {
            if ((this.TestCase_RetrieveStatusesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TestCase_RetrieveStatusesCompleted(this, new TestCase_RetrieveStatusesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TestCase_RetrieveStatusesAsync() {
            this.TestCase_RetrieveStatusesAsync(null);
        }
        
        public void TestCase_RetrieveStatusesAsync(object userState) {
            if ((this.onBeginTestCase_RetrieveStatusesDelegate == null)) {
                this.onBeginTestCase_RetrieveStatusesDelegate = new BeginOperationDelegate(this.OnBeginTestCase_RetrieveStatuses);
            }
            if ((this.onEndTestCase_RetrieveStatusesDelegate == null)) {
                this.onEndTestCase_RetrieveStatusesDelegate = new EndOperationDelegate(this.OnEndTestCase_RetrieveStatuses);
            }
            if ((this.onTestCase_RetrieveStatusesCompletedDelegate == null)) {
                this.onTestCase_RetrieveStatusesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTestCase_RetrieveStatusesCompleted);
            }
            base.InvokeAsync(this.onBeginTestCase_RetrieveStatusesDelegate, null, this.onEndTestCase_RetrieveStatusesDelegate, this.onTestCase_RetrieveStatusesCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestCaseType[] TestCase_RetrieveTypes() {
            return base.Channel.TestCase_RetrieveTypes();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTestCase_RetrieveTypes(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTestCase_RetrieveTypes(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestCaseType[] EndTestCase_RetrieveTypes(System.IAsyncResult result) {
            return base.Channel.EndTestCase_RetrieveTypes(result);
        }
        
        private System.IAsyncResult OnBeginTestCase_RetrieveTypes(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginTestCase_RetrieveTypes(callback, asyncState);
        }
        
        private object[] OnEndTestCase_RetrieveTypes(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestCaseType[] retVal = this.EndTestCase_RetrieveTypes(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTestCase_RetrieveTypesCompleted(object state) {
            if ((this.TestCase_RetrieveTypesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TestCase_RetrieveTypesCompleted(this, new TestCase_RetrieveTypesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TestCase_RetrieveTypesAsync() {
            this.TestCase_RetrieveTypesAsync(null);
        }
        
        public void TestCase_RetrieveTypesAsync(object userState) {
            if ((this.onBeginTestCase_RetrieveTypesDelegate == null)) {
                this.onBeginTestCase_RetrieveTypesDelegate = new BeginOperationDelegate(this.OnBeginTestCase_RetrieveTypes);
            }
            if ((this.onEndTestCase_RetrieveTypesDelegate == null)) {
                this.onEndTestCase_RetrieveTypesDelegate = new EndOperationDelegate(this.OnEndTestCase_RetrieveTypes);
            }
            if ((this.onTestCase_RetrieveTypesCompletedDelegate == null)) {
                this.onTestCase_RetrieveTypesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTestCase_RetrieveTypesCompleted);
            }
            base.InvokeAsync(this.onBeginTestCase_RetrieveTypesDelegate, null, this.onEndTestCase_RetrieveTypesDelegate, this.onTestCase_RetrieveTypesCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteWorkflowField[] TestCase_RetrieveWorkflowFields(int currentTypeId, int currentStatusId) {
            return base.Channel.TestCase_RetrieveWorkflowFields(currentTypeId, currentStatusId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTestCase_RetrieveWorkflowFields(int currentTypeId, int currentStatusId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTestCase_RetrieveWorkflowFields(currentTypeId, currentStatusId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteWorkflowField[] EndTestCase_RetrieveWorkflowFields(System.IAsyncResult result) {
            return base.Channel.EndTestCase_RetrieveWorkflowFields(result);
        }
        
        private System.IAsyncResult OnBeginTestCase_RetrieveWorkflowFields(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int currentTypeId = ((int)(inValues[0]));
            int currentStatusId = ((int)(inValues[1]));
            return this.BeginTestCase_RetrieveWorkflowFields(currentTypeId, currentStatusId, callback, asyncState);
        }
        
        private object[] OnEndTestCase_RetrieveWorkflowFields(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteWorkflowField[] retVal = this.EndTestCase_RetrieveWorkflowFields(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTestCase_RetrieveWorkflowFieldsCompleted(object state) {
            if ((this.TestCase_RetrieveWorkflowFieldsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TestCase_RetrieveWorkflowFieldsCompleted(this, new TestCase_RetrieveWorkflowFieldsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TestCase_RetrieveWorkflowFieldsAsync(int currentTypeId, int currentStatusId) {
            this.TestCase_RetrieveWorkflowFieldsAsync(currentTypeId, currentStatusId, null);
        }
        
        public void TestCase_RetrieveWorkflowFieldsAsync(int currentTypeId, int currentStatusId, object userState) {
            if ((this.onBeginTestCase_RetrieveWorkflowFieldsDelegate == null)) {
                this.onBeginTestCase_RetrieveWorkflowFieldsDelegate = new BeginOperationDelegate(this.OnBeginTestCase_RetrieveWorkflowFields);
            }
            if ((this.onEndTestCase_RetrieveWorkflowFieldsDelegate == null)) {
                this.onEndTestCase_RetrieveWorkflowFieldsDelegate = new EndOperationDelegate(this.OnEndTestCase_RetrieveWorkflowFields);
            }
            if ((this.onTestCase_RetrieveWorkflowFieldsCompletedDelegate == null)) {
                this.onTestCase_RetrieveWorkflowFieldsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTestCase_RetrieveWorkflowFieldsCompleted);
            }
            base.InvokeAsync(this.onBeginTestCase_RetrieveWorkflowFieldsDelegate, new object[] {
                        currentTypeId,
                        currentStatusId}, this.onEndTestCase_RetrieveWorkflowFieldsDelegate, this.onTestCase_RetrieveWorkflowFieldsCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteWorkflowTransition[] TestCase_RetrieveWorkflowTransitions(int currentTypeId, int currentStatusId, bool isCreator, bool isOwner) {
            return base.Channel.TestCase_RetrieveWorkflowTransitions(currentTypeId, currentStatusId, isCreator, isOwner);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTestCase_RetrieveWorkflowTransitions(int currentTypeId, int currentStatusId, bool isCreator, bool isOwner, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTestCase_RetrieveWorkflowTransitions(currentTypeId, currentStatusId, isCreator, isOwner, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteWorkflowTransition[] EndTestCase_RetrieveWorkflowTransitions(System.IAsyncResult result) {
            return base.Channel.EndTestCase_RetrieveWorkflowTransitions(result);
        }
        
        private System.IAsyncResult OnBeginTestCase_RetrieveWorkflowTransitions(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int currentTypeId = ((int)(inValues[0]));
            int currentStatusId = ((int)(inValues[1]));
            bool isCreator = ((bool)(inValues[2]));
            bool isOwner = ((bool)(inValues[3]));
            return this.BeginTestCase_RetrieveWorkflowTransitions(currentTypeId, currentStatusId, isCreator, isOwner, callback, asyncState);
        }
        
        private object[] OnEndTestCase_RetrieveWorkflowTransitions(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteWorkflowTransition[] retVal = this.EndTestCase_RetrieveWorkflowTransitions(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTestCase_RetrieveWorkflowTransitionsCompleted(object state) {
            if ((this.TestCase_RetrieveWorkflowTransitionsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TestCase_RetrieveWorkflowTransitionsCompleted(this, new TestCase_RetrieveWorkflowTransitionsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TestCase_RetrieveWorkflowTransitionsAsync(int currentTypeId, int currentStatusId, bool isCreator, bool isOwner) {
            this.TestCase_RetrieveWorkflowTransitionsAsync(currentTypeId, currentStatusId, isCreator, isOwner, null);
        }
        
        public void TestCase_RetrieveWorkflowTransitionsAsync(int currentTypeId, int currentStatusId, bool isCreator, bool isOwner, object userState) {
            if ((this.onBeginTestCase_RetrieveWorkflowTransitionsDelegate == null)) {
                this.onBeginTestCase_RetrieveWorkflowTransitionsDelegate = new BeginOperationDelegate(this.OnBeginTestCase_RetrieveWorkflowTransitions);
            }
            if ((this.onEndTestCase_RetrieveWorkflowTransitionsDelegate == null)) {
                this.onEndTestCase_RetrieveWorkflowTransitionsDelegate = new EndOperationDelegate(this.OnEndTestCase_RetrieveWorkflowTransitions);
            }
            if ((this.onTestCase_RetrieveWorkflowTransitionsCompletedDelegate == null)) {
                this.onTestCase_RetrieveWorkflowTransitionsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTestCase_RetrieveWorkflowTransitionsCompleted);
            }
            base.InvokeAsync(this.onBeginTestCase_RetrieveWorkflowTransitionsDelegate, new object[] {
                        currentTypeId,
                        currentStatusId,
                        isCreator,
                        isOwner}, this.onEndTestCase_RetrieveWorkflowTransitionsDelegate, this.onTestCase_RetrieveWorkflowTransitionsCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteWorkflowCustomProperty[] TestCase_RetrieveWorkflowCustomProperties(int currentTypeId, int currentStatusId) {
            return base.Channel.TestCase_RetrieveWorkflowCustomProperties(currentTypeId, currentStatusId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTestCase_RetrieveWorkflowCustomProperties(int currentTypeId, int currentStatusId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTestCase_RetrieveWorkflowCustomProperties(currentTypeId, currentStatusId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteWorkflowCustomProperty[] EndTestCase_RetrieveWorkflowCustomProperties(System.IAsyncResult result) {
            return base.Channel.EndTestCase_RetrieveWorkflowCustomProperties(result);
        }
        
        private System.IAsyncResult OnBeginTestCase_RetrieveWorkflowCustomProperties(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int currentTypeId = ((int)(inValues[0]));
            int currentStatusId = ((int)(inValues[1]));
            return this.BeginTestCase_RetrieveWorkflowCustomProperties(currentTypeId, currentStatusId, callback, asyncState);
        }
        
        private object[] OnEndTestCase_RetrieveWorkflowCustomProperties(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteWorkflowCustomProperty[] retVal = this.EndTestCase_RetrieveWorkflowCustomProperties(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTestCase_RetrieveWorkflowCustomPropertiesCompleted(object state) {
            if ((this.TestCase_RetrieveWorkflowCustomPropertiesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TestCase_RetrieveWorkflowCustomPropertiesCompleted(this, new TestCase_RetrieveWorkflowCustomPropertiesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TestCase_RetrieveWorkflowCustomPropertiesAsync(int currentTypeId, int currentStatusId) {
            this.TestCase_RetrieveWorkflowCustomPropertiesAsync(currentTypeId, currentStatusId, null);
        }
        
        public void TestCase_RetrieveWorkflowCustomPropertiesAsync(int currentTypeId, int currentStatusId, object userState) {
            if ((this.onBeginTestCase_RetrieveWorkflowCustomPropertiesDelegate == null)) {
                this.onBeginTestCase_RetrieveWorkflowCustomPropertiesDelegate = new BeginOperationDelegate(this.OnBeginTestCase_RetrieveWorkflowCustomProperties);
            }
            if ((this.onEndTestCase_RetrieveWorkflowCustomPropertiesDelegate == null)) {
                this.onEndTestCase_RetrieveWorkflowCustomPropertiesDelegate = new EndOperationDelegate(this.OnEndTestCase_RetrieveWorkflowCustomProperties);
            }
            if ((this.onTestCase_RetrieveWorkflowCustomPropertiesCompletedDelegate == null)) {
                this.onTestCase_RetrieveWorkflowCustomPropertiesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTestCase_RetrieveWorkflowCustomPropertiesCompleted);
            }
            base.InvokeAsync(this.onBeginTestCase_RetrieveWorkflowCustomPropertiesDelegate, new object[] {
                        currentTypeId,
                        currentStatusId}, this.onEndTestCase_RetrieveWorkflowCustomPropertiesDelegate, this.onTestCase_RetrieveWorkflowCustomPropertiesCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteManualTestRun[] TestRun_CreateFromTestCases(int[] testCaseIds, System.Nullable<int> releaseId) {
            return base.Channel.TestRun_CreateFromTestCases(testCaseIds, releaseId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTestRun_CreateFromTestCases(int[] testCaseIds, System.Nullable<int> releaseId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTestRun_CreateFromTestCases(testCaseIds, releaseId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteManualTestRun[] EndTestRun_CreateFromTestCases(System.IAsyncResult result) {
            return base.Channel.EndTestRun_CreateFromTestCases(result);
        }
        
        private System.IAsyncResult OnBeginTestRun_CreateFromTestCases(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int[] testCaseIds = ((int[])(inValues[0]));
            System.Nullable<int> releaseId = ((System.Nullable<int>)(inValues[1]));
            return this.BeginTestRun_CreateFromTestCases(testCaseIds, releaseId, callback, asyncState);
        }
        
        private object[] OnEndTestRun_CreateFromTestCases(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteManualTestRun[] retVal = this.EndTestRun_CreateFromTestCases(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTestRun_CreateFromTestCasesCompleted(object state) {
            if ((this.TestRun_CreateFromTestCasesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TestRun_CreateFromTestCasesCompleted(this, new TestRun_CreateFromTestCasesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TestRun_CreateFromTestCasesAsync(int[] testCaseIds, System.Nullable<int> releaseId) {
            this.TestRun_CreateFromTestCasesAsync(testCaseIds, releaseId, null);
        }
        
        public void TestRun_CreateFromTestCasesAsync(int[] testCaseIds, System.Nullable<int> releaseId, object userState) {
            if ((this.onBeginTestRun_CreateFromTestCasesDelegate == null)) {
                this.onBeginTestRun_CreateFromTestCasesDelegate = new BeginOperationDelegate(this.OnBeginTestRun_CreateFromTestCases);
            }
            if ((this.onEndTestRun_CreateFromTestCasesDelegate == null)) {
                this.onEndTestRun_CreateFromTestCasesDelegate = new EndOperationDelegate(this.OnEndTestRun_CreateFromTestCases);
            }
            if ((this.onTestRun_CreateFromTestCasesCompletedDelegate == null)) {
                this.onTestRun_CreateFromTestCasesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTestRun_CreateFromTestCasesCompleted);
            }
            base.InvokeAsync(this.onBeginTestRun_CreateFromTestCasesDelegate, new object[] {
                        testCaseIds,
                        releaseId}, this.onEndTestRun_CreateFromTestCasesDelegate, this.onTestRun_CreateFromTestCasesCompletedDelegate, userState);
        }
        
        public long TestRun_Count(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters) {
            return base.Channel.TestRun_Count(remoteFilters);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTestRun_Count(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTestRun_Count(remoteFilters, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public long EndTestRun_Count(System.IAsyncResult result) {
            return base.Channel.EndTestRun_Count(result);
        }
        
        private System.IAsyncResult OnBeginTestRun_Count(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters = ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[])(inValues[0]));
            return this.BeginTestRun_Count(remoteFilters, callback, asyncState);
        }
        
        private object[] OnEndTestRun_Count(System.IAsyncResult result) {
            long retVal = this.EndTestRun_Count(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTestRun_CountCompleted(object state) {
            if ((this.TestRun_CountCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TestRun_CountCompleted(this, new TestRun_CountCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TestRun_CountAsync(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters) {
            this.TestRun_CountAsync(remoteFilters, null);
        }
        
        public void TestRun_CountAsync(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters, object userState) {
            if ((this.onBeginTestRun_CountDelegate == null)) {
                this.onBeginTestRun_CountDelegate = new BeginOperationDelegate(this.OnBeginTestRun_Count);
            }
            if ((this.onEndTestRun_CountDelegate == null)) {
                this.onEndTestRun_CountDelegate = new EndOperationDelegate(this.OnEndTestRun_Count);
            }
            if ((this.onTestRun_CountCompletedDelegate == null)) {
                this.onTestRun_CountCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTestRun_CountCompleted);
            }
            base.InvokeAsync(this.onBeginTestRun_CountDelegate, new object[] {
                        remoteFilters}, this.onEndTestRun_CountDelegate, this.onTestRun_CountCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteManualTestRun[] TestRun_CreateFromTestSet(int testSetId) {
            return base.Channel.TestRun_CreateFromTestSet(testSetId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTestRun_CreateFromTestSet(int testSetId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTestRun_CreateFromTestSet(testSetId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteManualTestRun[] EndTestRun_CreateFromTestSet(System.IAsyncResult result) {
            return base.Channel.EndTestRun_CreateFromTestSet(result);
        }
        
        private System.IAsyncResult OnBeginTestRun_CreateFromTestSet(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int testSetId = ((int)(inValues[0]));
            return this.BeginTestRun_CreateFromTestSet(testSetId, callback, asyncState);
        }
        
        private object[] OnEndTestRun_CreateFromTestSet(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteManualTestRun[] retVal = this.EndTestRun_CreateFromTestSet(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTestRun_CreateFromTestSetCompleted(object state) {
            if ((this.TestRun_CreateFromTestSetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TestRun_CreateFromTestSetCompleted(this, new TestRun_CreateFromTestSetCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TestRun_CreateFromTestSetAsync(int testSetId) {
            this.TestRun_CreateFromTestSetAsync(testSetId, null);
        }
        
        public void TestRun_CreateFromTestSetAsync(int testSetId, object userState) {
            if ((this.onBeginTestRun_CreateFromTestSetDelegate == null)) {
                this.onBeginTestRun_CreateFromTestSetDelegate = new BeginOperationDelegate(this.OnBeginTestRun_CreateFromTestSet);
            }
            if ((this.onEndTestRun_CreateFromTestSetDelegate == null)) {
                this.onEndTestRun_CreateFromTestSetDelegate = new EndOperationDelegate(this.OnEndTestRun_CreateFromTestSet);
            }
            if ((this.onTestRun_CreateFromTestSetCompletedDelegate == null)) {
                this.onTestRun_CreateFromTestSetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTestRun_CreateFromTestSetCompleted);
            }
            base.InvokeAsync(this.onBeginTestRun_CreateFromTestSetDelegate, new object[] {
                        testSetId}, this.onEndTestRun_CreateFromTestSetDelegate, this.onTestRun_CreateFromTestSetCompletedDelegate, userState);
        }
        
        public void TestRun_Delete(int testRunId) {
            base.Channel.TestRun_Delete(testRunId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTestRun_Delete(int testRunId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTestRun_Delete(testRunId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndTestRun_Delete(System.IAsyncResult result) {
            base.Channel.EndTestRun_Delete(result);
        }
        
        private System.IAsyncResult OnBeginTestRun_Delete(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int testRunId = ((int)(inValues[0]));
            return this.BeginTestRun_Delete(testRunId, callback, asyncState);
        }
        
        private object[] OnEndTestRun_Delete(System.IAsyncResult result) {
            this.EndTestRun_Delete(result);
            return null;
        }
        
        private void OnTestRun_DeleteCompleted(object state) {
            if ((this.TestRun_DeleteCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TestRun_DeleteCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TestRun_DeleteAsync(int testRunId) {
            this.TestRun_DeleteAsync(testRunId, null);
        }
        
        public void TestRun_DeleteAsync(int testRunId, object userState) {
            if ((this.onBeginTestRun_DeleteDelegate == null)) {
                this.onBeginTestRun_DeleteDelegate = new BeginOperationDelegate(this.OnBeginTestRun_Delete);
            }
            if ((this.onEndTestRun_DeleteDelegate == null)) {
                this.onEndTestRun_DeleteDelegate = new EndOperationDelegate(this.OnEndTestRun_Delete);
            }
            if ((this.onTestRun_DeleteCompletedDelegate == null)) {
                this.onTestRun_DeleteCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTestRun_DeleteCompleted);
            }
            base.InvokeAsync(this.onBeginTestRun_DeleteDelegate, new object[] {
                        testRunId}, this.onEndTestRun_DeleteDelegate, this.onTestRun_DeleteCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAutomatedTestRun[] TestRun_CreateForAutomationHost(string automationHostToken, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.DateRange dateRange) {
            return base.Channel.TestRun_CreateForAutomationHost(automationHostToken, dateRange);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTestRun_CreateForAutomationHost(string automationHostToken, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.DateRange dateRange, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTestRun_CreateForAutomationHost(automationHostToken, dateRange, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAutomatedTestRun[] EndTestRun_CreateForAutomationHost(System.IAsyncResult result) {
            return base.Channel.EndTestRun_CreateForAutomationHost(result);
        }
        
        private System.IAsyncResult OnBeginTestRun_CreateForAutomationHost(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string automationHostToken = ((string)(inValues[0]));
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.DateRange dateRange = ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.DateRange)(inValues[1]));
            return this.BeginTestRun_CreateForAutomationHost(automationHostToken, dateRange, callback, asyncState);
        }
        
        private object[] OnEndTestRun_CreateForAutomationHost(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAutomatedTestRun[] retVal = this.EndTestRun_CreateForAutomationHost(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTestRun_CreateForAutomationHostCompleted(object state) {
            if ((this.TestRun_CreateForAutomationHostCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TestRun_CreateForAutomationHostCompleted(this, new TestRun_CreateForAutomationHostCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TestRun_CreateForAutomationHostAsync(string automationHostToken, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.DateRange dateRange) {
            this.TestRun_CreateForAutomationHostAsync(automationHostToken, dateRange, null);
        }
        
        public void TestRun_CreateForAutomationHostAsync(string automationHostToken, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.DateRange dateRange, object userState) {
            if ((this.onBeginTestRun_CreateForAutomationHostDelegate == null)) {
                this.onBeginTestRun_CreateForAutomationHostDelegate = new BeginOperationDelegate(this.OnBeginTestRun_CreateForAutomationHost);
            }
            if ((this.onEndTestRun_CreateForAutomationHostDelegate == null)) {
                this.onEndTestRun_CreateForAutomationHostDelegate = new EndOperationDelegate(this.OnEndTestRun_CreateForAutomationHost);
            }
            if ((this.onTestRun_CreateForAutomationHostCompletedDelegate == null)) {
                this.onTestRun_CreateForAutomationHostCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTestRun_CreateForAutomationHostCompleted);
            }
            base.InvokeAsync(this.onBeginTestRun_CreateForAutomationHostDelegate, new object[] {
                        automationHostToken,
                        dateRange}, this.onEndTestRun_CreateForAutomationHostDelegate, this.onTestRun_CreateForAutomationHostCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAutomatedTestRun[] TestRun_CreateForAutomatedTestSet(int testSetId, string automationHostToken) {
            return base.Channel.TestRun_CreateForAutomatedTestSet(testSetId, automationHostToken);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTestRun_CreateForAutomatedTestSet(int testSetId, string automationHostToken, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTestRun_CreateForAutomatedTestSet(testSetId, automationHostToken, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAutomatedTestRun[] EndTestRun_CreateForAutomatedTestSet(System.IAsyncResult result) {
            return base.Channel.EndTestRun_CreateForAutomatedTestSet(result);
        }
        
        private System.IAsyncResult OnBeginTestRun_CreateForAutomatedTestSet(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int testSetId = ((int)(inValues[0]));
            string automationHostToken = ((string)(inValues[1]));
            return this.BeginTestRun_CreateForAutomatedTestSet(testSetId, automationHostToken, callback, asyncState);
        }
        
        private object[] OnEndTestRun_CreateForAutomatedTestSet(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAutomatedTestRun[] retVal = this.EndTestRun_CreateForAutomatedTestSet(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTestRun_CreateForAutomatedTestSetCompleted(object state) {
            if ((this.TestRun_CreateForAutomatedTestSetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TestRun_CreateForAutomatedTestSetCompleted(this, new TestRun_CreateForAutomatedTestSetCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TestRun_CreateForAutomatedTestSetAsync(int testSetId, string automationHostToken) {
            this.TestRun_CreateForAutomatedTestSetAsync(testSetId, automationHostToken, null);
        }
        
        public void TestRun_CreateForAutomatedTestSetAsync(int testSetId, string automationHostToken, object userState) {
            if ((this.onBeginTestRun_CreateForAutomatedTestSetDelegate == null)) {
                this.onBeginTestRun_CreateForAutomatedTestSetDelegate = new BeginOperationDelegate(this.OnBeginTestRun_CreateForAutomatedTestSet);
            }
            if ((this.onEndTestRun_CreateForAutomatedTestSetDelegate == null)) {
                this.onEndTestRun_CreateForAutomatedTestSetDelegate = new EndOperationDelegate(this.OnEndTestRun_CreateForAutomatedTestSet);
            }
            if ((this.onTestRun_CreateForAutomatedTestSetCompletedDelegate == null)) {
                this.onTestRun_CreateForAutomatedTestSetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTestRun_CreateForAutomatedTestSetCompleted);
            }
            base.InvokeAsync(this.onBeginTestRun_CreateForAutomatedTestSetDelegate, new object[] {
                        testSetId,
                        automationHostToken}, this.onEndTestRun_CreateForAutomatedTestSetDelegate, this.onTestRun_CreateForAutomatedTestSetCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAutomatedTestRun TestRun_RecordAutomated1(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAutomatedTestRun remoteTestRun) {
            return base.Channel.TestRun_RecordAutomated1(remoteTestRun);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTestRun_RecordAutomated1(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAutomatedTestRun remoteTestRun, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTestRun_RecordAutomated1(remoteTestRun, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAutomatedTestRun EndTestRun_RecordAutomated1(System.IAsyncResult result) {
            return base.Channel.EndTestRun_RecordAutomated1(result);
        }
        
        private System.IAsyncResult OnBeginTestRun_RecordAutomated1(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAutomatedTestRun remoteTestRun = ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAutomatedTestRun)(inValues[0]));
            return this.BeginTestRun_RecordAutomated1(remoteTestRun, callback, asyncState);
        }
        
        private object[] OnEndTestRun_RecordAutomated1(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAutomatedTestRun retVal = this.EndTestRun_RecordAutomated1(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTestRun_RecordAutomated1Completed(object state) {
            if ((this.TestRun_RecordAutomated1Completed != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TestRun_RecordAutomated1Completed(this, new TestRun_RecordAutomated1CompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TestRun_RecordAutomated1Async(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAutomatedTestRun remoteTestRun) {
            this.TestRun_RecordAutomated1Async(remoteTestRun, null);
        }
        
        public void TestRun_RecordAutomated1Async(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAutomatedTestRun remoteTestRun, object userState) {
            if ((this.onBeginTestRun_RecordAutomated1Delegate == null)) {
                this.onBeginTestRun_RecordAutomated1Delegate = new BeginOperationDelegate(this.OnBeginTestRun_RecordAutomated1);
            }
            if ((this.onEndTestRun_RecordAutomated1Delegate == null)) {
                this.onEndTestRun_RecordAutomated1Delegate = new EndOperationDelegate(this.OnEndTestRun_RecordAutomated1);
            }
            if ((this.onTestRun_RecordAutomated1CompletedDelegate == null)) {
                this.onTestRun_RecordAutomated1CompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTestRun_RecordAutomated1Completed);
            }
            base.InvokeAsync(this.onBeginTestRun_RecordAutomated1Delegate, new object[] {
                        remoteTestRun}, this.onEndTestRun_RecordAutomated1Delegate, this.onTestRun_RecordAutomated1CompletedDelegate, userState);
        }
        
        public int TestRun_RecordAutomated2(
                    string userName, 
                    string password, 
                    int projectId, 
                    System.Nullable<int> testerUserId, 
                    int testCaseId, 
                    System.Nullable<int> releaseId, 
                    System.Nullable<int> testSetId, 
                    System.Nullable<int> testSetTestCaseId, 
                    System.Nullable<int> buildId, 
                    System.DateTime startDate, 
                    System.DateTime endDate, 
                    int executionStatusId, 
                    string runnerName, 
                    string runnerTestName, 
                    int runnerAssertCount, 
                    string runnerMessage, 
                    string runnerStackTrace, 
                    int testRunFormatId) {
            return base.Channel.TestRun_RecordAutomated2(userName, password, projectId, testerUserId, testCaseId, releaseId, testSetId, testSetTestCaseId, buildId, startDate, endDate, executionStatusId, runnerName, runnerTestName, runnerAssertCount, runnerMessage, runnerStackTrace, testRunFormatId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTestRun_RecordAutomated2(
                    string userName, 
                    string password, 
                    int projectId, 
                    System.Nullable<int> testerUserId, 
                    int testCaseId, 
                    System.Nullable<int> releaseId, 
                    System.Nullable<int> testSetId, 
                    System.Nullable<int> testSetTestCaseId, 
                    System.Nullable<int> buildId, 
                    System.DateTime startDate, 
                    System.DateTime endDate, 
                    int executionStatusId, 
                    string runnerName, 
                    string runnerTestName, 
                    int runnerAssertCount, 
                    string runnerMessage, 
                    string runnerStackTrace, 
                    int testRunFormatId, 
                    System.AsyncCallback callback, 
                    object asyncState) {
            return base.Channel.BeginTestRun_RecordAutomated2(userName, password, projectId, testerUserId, testCaseId, releaseId, testSetId, testSetTestCaseId, buildId, startDate, endDate, executionStatusId, runnerName, runnerTestName, runnerAssertCount, runnerMessage, runnerStackTrace, testRunFormatId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public int EndTestRun_RecordAutomated2(System.IAsyncResult result) {
            return base.Channel.EndTestRun_RecordAutomated2(result);
        }
        
        private System.IAsyncResult OnBeginTestRun_RecordAutomated2(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string userName = ((string)(inValues[0]));
            string password = ((string)(inValues[1]));
            int projectId = ((int)(inValues[2]));
            System.Nullable<int> testerUserId = ((System.Nullable<int>)(inValues[3]));
            int testCaseId = ((int)(inValues[4]));
            System.Nullable<int> releaseId = ((System.Nullable<int>)(inValues[5]));
            System.Nullable<int> testSetId = ((System.Nullable<int>)(inValues[6]));
            System.Nullable<int> testSetTestCaseId = ((System.Nullable<int>)(inValues[7]));
            System.Nullable<int> buildId = ((System.Nullable<int>)(inValues[8]));
            System.DateTime startDate = ((System.DateTime)(inValues[9]));
            System.DateTime endDate = ((System.DateTime)(inValues[10]));
            int executionStatusId = ((int)(inValues[11]));
            string runnerName = ((string)(inValues[12]));
            string runnerTestName = ((string)(inValues[13]));
            int runnerAssertCount = ((int)(inValues[14]));
            string runnerMessage = ((string)(inValues[15]));
            string runnerStackTrace = ((string)(inValues[16]));
            int testRunFormatId = ((int)(inValues[17]));
            return this.BeginTestRun_RecordAutomated2(userName, password, projectId, testerUserId, testCaseId, releaseId, testSetId, testSetTestCaseId, buildId, startDate, endDate, executionStatusId, runnerName, runnerTestName, runnerAssertCount, runnerMessage, runnerStackTrace, testRunFormatId, callback, asyncState);
        }
        
        private object[] OnEndTestRun_RecordAutomated2(System.IAsyncResult result) {
            int retVal = this.EndTestRun_RecordAutomated2(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTestRun_RecordAutomated2Completed(object state) {
            if ((this.TestRun_RecordAutomated2Completed != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TestRun_RecordAutomated2Completed(this, new TestRun_RecordAutomated2CompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TestRun_RecordAutomated2Async(
                    string userName, 
                    string password, 
                    int projectId, 
                    System.Nullable<int> testerUserId, 
                    int testCaseId, 
                    System.Nullable<int> releaseId, 
                    System.Nullable<int> testSetId, 
                    System.Nullable<int> testSetTestCaseId, 
                    System.Nullable<int> buildId, 
                    System.DateTime startDate, 
                    System.DateTime endDate, 
                    int executionStatusId, 
                    string runnerName, 
                    string runnerTestName, 
                    int runnerAssertCount, 
                    string runnerMessage, 
                    string runnerStackTrace, 
                    int testRunFormatId) {
            this.TestRun_RecordAutomated2Async(userName, password, projectId, testerUserId, testCaseId, releaseId, testSetId, testSetTestCaseId, buildId, startDate, endDate, executionStatusId, runnerName, runnerTestName, runnerAssertCount, runnerMessage, runnerStackTrace, testRunFormatId, null);
        }
        
        public void TestRun_RecordAutomated2Async(
                    string userName, 
                    string password, 
                    int projectId, 
                    System.Nullable<int> testerUserId, 
                    int testCaseId, 
                    System.Nullable<int> releaseId, 
                    System.Nullable<int> testSetId, 
                    System.Nullable<int> testSetTestCaseId, 
                    System.Nullable<int> buildId, 
                    System.DateTime startDate, 
                    System.DateTime endDate, 
                    int executionStatusId, 
                    string runnerName, 
                    string runnerTestName, 
                    int runnerAssertCount, 
                    string runnerMessage, 
                    string runnerStackTrace, 
                    int testRunFormatId, 
                    object userState) {
            if ((this.onBeginTestRun_RecordAutomated2Delegate == null)) {
                this.onBeginTestRun_RecordAutomated2Delegate = new BeginOperationDelegate(this.OnBeginTestRun_RecordAutomated2);
            }
            if ((this.onEndTestRun_RecordAutomated2Delegate == null)) {
                this.onEndTestRun_RecordAutomated2Delegate = new EndOperationDelegate(this.OnEndTestRun_RecordAutomated2);
            }
            if ((this.onTestRun_RecordAutomated2CompletedDelegate == null)) {
                this.onTestRun_RecordAutomated2CompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTestRun_RecordAutomated2Completed);
            }
            base.InvokeAsync(this.onBeginTestRun_RecordAutomated2Delegate, new object[] {
                        userName,
                        password,
                        projectId,
                        testerUserId,
                        testCaseId,
                        releaseId,
                        testSetId,
                        testSetTestCaseId,
                        buildId,
                        startDate,
                        endDate,
                        executionStatusId,
                        runnerName,
                        runnerTestName,
                        runnerAssertCount,
                        runnerMessage,
                        runnerStackTrace,
                        testRunFormatId}, this.onEndTestRun_RecordAutomated2Delegate, this.onTestRun_RecordAutomated2CompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAutomatedTestRun[] TestRun_RecordAutomated3(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAutomatedTestRun[] remoteTestRuns) {
            return base.Channel.TestRun_RecordAutomated3(remoteTestRuns);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTestRun_RecordAutomated3(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAutomatedTestRun[] remoteTestRuns, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTestRun_RecordAutomated3(remoteTestRuns, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAutomatedTestRun[] EndTestRun_RecordAutomated3(System.IAsyncResult result) {
            return base.Channel.EndTestRun_RecordAutomated3(result);
        }
        
        private System.IAsyncResult OnBeginTestRun_RecordAutomated3(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAutomatedTestRun[] remoteTestRuns = ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAutomatedTestRun[])(inValues[0]));
            return this.BeginTestRun_RecordAutomated3(remoteTestRuns, callback, asyncState);
        }
        
        private object[] OnEndTestRun_RecordAutomated3(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAutomatedTestRun[] retVal = this.EndTestRun_RecordAutomated3(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTestRun_RecordAutomated3Completed(object state) {
            if ((this.TestRun_RecordAutomated3Completed != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TestRun_RecordAutomated3Completed(this, new TestRun_RecordAutomated3CompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TestRun_RecordAutomated3Async(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAutomatedTestRun[] remoteTestRuns) {
            this.TestRun_RecordAutomated3Async(remoteTestRuns, null);
        }
        
        public void TestRun_RecordAutomated3Async(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAutomatedTestRun[] remoteTestRuns, object userState) {
            if ((this.onBeginTestRun_RecordAutomated3Delegate == null)) {
                this.onBeginTestRun_RecordAutomated3Delegate = new BeginOperationDelegate(this.OnBeginTestRun_RecordAutomated3);
            }
            if ((this.onEndTestRun_RecordAutomated3Delegate == null)) {
                this.onEndTestRun_RecordAutomated3Delegate = new EndOperationDelegate(this.OnEndTestRun_RecordAutomated3);
            }
            if ((this.onTestRun_RecordAutomated3CompletedDelegate == null)) {
                this.onTestRun_RecordAutomated3CompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTestRun_RecordAutomated3Completed);
            }
            base.InvokeAsync(this.onBeginTestRun_RecordAutomated3Delegate, new object[] {
                        remoteTestRuns}, this.onEndTestRun_RecordAutomated3Delegate, this.onTestRun_RecordAutomated3CompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestRun[] TestRun_Retrieve(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSort remoteSort, int startingRow, int numberOfRows) {
            return base.Channel.TestRun_Retrieve(remoteFilters, remoteSort, startingRow, numberOfRows);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTestRun_Retrieve(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSort remoteSort, int startingRow, int numberOfRows, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTestRun_Retrieve(remoteFilters, remoteSort, startingRow, numberOfRows, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestRun[] EndTestRun_Retrieve(System.IAsyncResult result) {
            return base.Channel.EndTestRun_Retrieve(result);
        }
        
        private System.IAsyncResult OnBeginTestRun_Retrieve(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters = ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[])(inValues[0]));
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSort remoteSort = ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSort)(inValues[1]));
            int startingRow = ((int)(inValues[2]));
            int numberOfRows = ((int)(inValues[3]));
            return this.BeginTestRun_Retrieve(remoteFilters, remoteSort, startingRow, numberOfRows, callback, asyncState);
        }
        
        private object[] OnEndTestRun_Retrieve(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestRun[] retVal = this.EndTestRun_Retrieve(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTestRun_RetrieveCompleted(object state) {
            if ((this.TestRun_RetrieveCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TestRun_RetrieveCompleted(this, new TestRun_RetrieveCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TestRun_RetrieveAsync(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSort remoteSort, int startingRow, int numberOfRows) {
            this.TestRun_RetrieveAsync(remoteFilters, remoteSort, startingRow, numberOfRows, null);
        }
        
        public void TestRun_RetrieveAsync(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSort remoteSort, int startingRow, int numberOfRows, object userState) {
            if ((this.onBeginTestRun_RetrieveDelegate == null)) {
                this.onBeginTestRun_RetrieveDelegate = new BeginOperationDelegate(this.OnBeginTestRun_Retrieve);
            }
            if ((this.onEndTestRun_RetrieveDelegate == null)) {
                this.onEndTestRun_RetrieveDelegate = new EndOperationDelegate(this.OnEndTestRun_Retrieve);
            }
            if ((this.onTestRun_RetrieveCompletedDelegate == null)) {
                this.onTestRun_RetrieveCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTestRun_RetrieveCompleted);
            }
            base.InvokeAsync(this.onBeginTestRun_RetrieveDelegate, new object[] {
                        remoteFilters,
                        remoteSort,
                        startingRow,
                        numberOfRows}, this.onEndTestRun_RetrieveDelegate, this.onTestRun_RetrieveCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteManualTestRun[] TestRun_RetrieveManual(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSort remoteSort, int startingRow, int numberOfRows) {
            return base.Channel.TestRun_RetrieveManual(remoteFilters, remoteSort, startingRow, numberOfRows);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTestRun_RetrieveManual(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSort remoteSort, int startingRow, int numberOfRows, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTestRun_RetrieveManual(remoteFilters, remoteSort, startingRow, numberOfRows, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteManualTestRun[] EndTestRun_RetrieveManual(System.IAsyncResult result) {
            return base.Channel.EndTestRun_RetrieveManual(result);
        }
        
        private System.IAsyncResult OnBeginTestRun_RetrieveManual(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters = ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[])(inValues[0]));
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSort remoteSort = ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSort)(inValues[1]));
            int startingRow = ((int)(inValues[2]));
            int numberOfRows = ((int)(inValues[3]));
            return this.BeginTestRun_RetrieveManual(remoteFilters, remoteSort, startingRow, numberOfRows, callback, asyncState);
        }
        
        private object[] OnEndTestRun_RetrieveManual(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteManualTestRun[] retVal = this.EndTestRun_RetrieveManual(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTestRun_RetrieveManualCompleted(object state) {
            if ((this.TestRun_RetrieveManualCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TestRun_RetrieveManualCompleted(this, new TestRun_RetrieveManualCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TestRun_RetrieveManualAsync(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSort remoteSort, int startingRow, int numberOfRows) {
            this.TestRun_RetrieveManualAsync(remoteFilters, remoteSort, startingRow, numberOfRows, null);
        }
        
        public void TestRun_RetrieveManualAsync(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSort remoteSort, int startingRow, int numberOfRows, object userState) {
            if ((this.onBeginTestRun_RetrieveManualDelegate == null)) {
                this.onBeginTestRun_RetrieveManualDelegate = new BeginOperationDelegate(this.OnBeginTestRun_RetrieveManual);
            }
            if ((this.onEndTestRun_RetrieveManualDelegate == null)) {
                this.onEndTestRun_RetrieveManualDelegate = new EndOperationDelegate(this.OnEndTestRun_RetrieveManual);
            }
            if ((this.onTestRun_RetrieveManualCompletedDelegate == null)) {
                this.onTestRun_RetrieveManualCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTestRun_RetrieveManualCompleted);
            }
            base.InvokeAsync(this.onBeginTestRun_RetrieveManualDelegate, new object[] {
                        remoteFilters,
                        remoteSort,
                        startingRow,
                        numberOfRows}, this.onEndTestRun_RetrieveManualDelegate, this.onTestRun_RetrieveManualCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAutomatedTestRun[] TestRun_RetrieveAutomated(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSort remoteSort, int startingRow, int numberOfRows) {
            return base.Channel.TestRun_RetrieveAutomated(remoteFilters, remoteSort, startingRow, numberOfRows);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTestRun_RetrieveAutomated(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSort remoteSort, int startingRow, int numberOfRows, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTestRun_RetrieveAutomated(remoteFilters, remoteSort, startingRow, numberOfRows, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAutomatedTestRun[] EndTestRun_RetrieveAutomated(System.IAsyncResult result) {
            return base.Channel.EndTestRun_RetrieveAutomated(result);
        }
        
        private System.IAsyncResult OnBeginTestRun_RetrieveAutomated(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters = ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[])(inValues[0]));
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSort remoteSort = ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSort)(inValues[1]));
            int startingRow = ((int)(inValues[2]));
            int numberOfRows = ((int)(inValues[3]));
            return this.BeginTestRun_RetrieveAutomated(remoteFilters, remoteSort, startingRow, numberOfRows, callback, asyncState);
        }
        
        private object[] OnEndTestRun_RetrieveAutomated(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAutomatedTestRun[] retVal = this.EndTestRun_RetrieveAutomated(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTestRun_RetrieveAutomatedCompleted(object state) {
            if ((this.TestRun_RetrieveAutomatedCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TestRun_RetrieveAutomatedCompleted(this, new TestRun_RetrieveAutomatedCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TestRun_RetrieveAutomatedAsync(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSort remoteSort, int startingRow, int numberOfRows) {
            this.TestRun_RetrieveAutomatedAsync(remoteFilters, remoteSort, startingRow, numberOfRows, null);
        }
        
        public void TestRun_RetrieveAutomatedAsync(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSort remoteSort, int startingRow, int numberOfRows, object userState) {
            if ((this.onBeginTestRun_RetrieveAutomatedDelegate == null)) {
                this.onBeginTestRun_RetrieveAutomatedDelegate = new BeginOperationDelegate(this.OnBeginTestRun_RetrieveAutomated);
            }
            if ((this.onEndTestRun_RetrieveAutomatedDelegate == null)) {
                this.onEndTestRun_RetrieveAutomatedDelegate = new EndOperationDelegate(this.OnEndTestRun_RetrieveAutomated);
            }
            if ((this.onTestRun_RetrieveAutomatedCompletedDelegate == null)) {
                this.onTestRun_RetrieveAutomatedCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTestRun_RetrieveAutomatedCompleted);
            }
            base.InvokeAsync(this.onBeginTestRun_RetrieveAutomatedDelegate, new object[] {
                        remoteFilters,
                        remoteSort,
                        startingRow,
                        numberOfRows}, this.onEndTestRun_RetrieveAutomatedDelegate, this.onTestRun_RetrieveAutomatedCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestRun TestRun_RetrieveById(int testRunId) {
            return base.Channel.TestRun_RetrieveById(testRunId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTestRun_RetrieveById(int testRunId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTestRun_RetrieveById(testRunId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestRun EndTestRun_RetrieveById(System.IAsyncResult result) {
            return base.Channel.EndTestRun_RetrieveById(result);
        }
        
        private System.IAsyncResult OnBeginTestRun_RetrieveById(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int testRunId = ((int)(inValues[0]));
            return this.BeginTestRun_RetrieveById(testRunId, callback, asyncState);
        }
        
        private object[] OnEndTestRun_RetrieveById(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestRun retVal = this.EndTestRun_RetrieveById(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTestRun_RetrieveByIdCompleted(object state) {
            if ((this.TestRun_RetrieveByIdCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TestRun_RetrieveByIdCompleted(this, new TestRun_RetrieveByIdCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TestRun_RetrieveByIdAsync(int testRunId) {
            this.TestRun_RetrieveByIdAsync(testRunId, null);
        }
        
        public void TestRun_RetrieveByIdAsync(int testRunId, object userState) {
            if ((this.onBeginTestRun_RetrieveByIdDelegate == null)) {
                this.onBeginTestRun_RetrieveByIdDelegate = new BeginOperationDelegate(this.OnBeginTestRun_RetrieveById);
            }
            if ((this.onEndTestRun_RetrieveByIdDelegate == null)) {
                this.onEndTestRun_RetrieveByIdDelegate = new EndOperationDelegate(this.OnEndTestRun_RetrieveById);
            }
            if ((this.onTestRun_RetrieveByIdCompletedDelegate == null)) {
                this.onTestRun_RetrieveByIdCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTestRun_RetrieveByIdCompleted);
            }
            base.InvokeAsync(this.onBeginTestRun_RetrieveByIdDelegate, new object[] {
                        testRunId}, this.onEndTestRun_RetrieveByIdDelegate, this.onTestRun_RetrieveByIdCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestRun[] TestRun_RetrieveByTestCaseId(int testCaseId, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSort remoteSort, int startingRow, int numberOfRows) {
            return base.Channel.TestRun_RetrieveByTestCaseId(testCaseId, remoteFilters, remoteSort, startingRow, numberOfRows);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTestRun_RetrieveByTestCaseId(int testCaseId, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSort remoteSort, int startingRow, int numberOfRows, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTestRun_RetrieveByTestCaseId(testCaseId, remoteFilters, remoteSort, startingRow, numberOfRows, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestRun[] EndTestRun_RetrieveByTestCaseId(System.IAsyncResult result) {
            return base.Channel.EndTestRun_RetrieveByTestCaseId(result);
        }
        
        private System.IAsyncResult OnBeginTestRun_RetrieveByTestCaseId(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int testCaseId = ((int)(inValues[0]));
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters = ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[])(inValues[1]));
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSort remoteSort = ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSort)(inValues[2]));
            int startingRow = ((int)(inValues[3]));
            int numberOfRows = ((int)(inValues[4]));
            return this.BeginTestRun_RetrieveByTestCaseId(testCaseId, remoteFilters, remoteSort, startingRow, numberOfRows, callback, asyncState);
        }
        
        private object[] OnEndTestRun_RetrieveByTestCaseId(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestRun[] retVal = this.EndTestRun_RetrieveByTestCaseId(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTestRun_RetrieveByTestCaseIdCompleted(object state) {
            if ((this.TestRun_RetrieveByTestCaseIdCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TestRun_RetrieveByTestCaseIdCompleted(this, new TestRun_RetrieveByTestCaseIdCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TestRun_RetrieveByTestCaseIdAsync(int testCaseId, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSort remoteSort, int startingRow, int numberOfRows) {
            this.TestRun_RetrieveByTestCaseIdAsync(testCaseId, remoteFilters, remoteSort, startingRow, numberOfRows, null);
        }
        
        public void TestRun_RetrieveByTestCaseIdAsync(int testCaseId, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSort remoteSort, int startingRow, int numberOfRows, object userState) {
            if ((this.onBeginTestRun_RetrieveByTestCaseIdDelegate == null)) {
                this.onBeginTestRun_RetrieveByTestCaseIdDelegate = new BeginOperationDelegate(this.OnBeginTestRun_RetrieveByTestCaseId);
            }
            if ((this.onEndTestRun_RetrieveByTestCaseIdDelegate == null)) {
                this.onEndTestRun_RetrieveByTestCaseIdDelegate = new EndOperationDelegate(this.OnEndTestRun_RetrieveByTestCaseId);
            }
            if ((this.onTestRun_RetrieveByTestCaseIdCompletedDelegate == null)) {
                this.onTestRun_RetrieveByTestCaseIdCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTestRun_RetrieveByTestCaseIdCompleted);
            }
            base.InvokeAsync(this.onBeginTestRun_RetrieveByTestCaseIdDelegate, new object[] {
                        testCaseId,
                        remoteFilters,
                        remoteSort,
                        startingRow,
                        numberOfRows}, this.onEndTestRun_RetrieveByTestCaseIdDelegate, this.onTestRun_RetrieveByTestCaseIdCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAutomatedTestRun TestRun_RetrieveAutomatedById(int testRunId) {
            return base.Channel.TestRun_RetrieveAutomatedById(testRunId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTestRun_RetrieveAutomatedById(int testRunId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTestRun_RetrieveAutomatedById(testRunId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAutomatedTestRun EndTestRun_RetrieveAutomatedById(System.IAsyncResult result) {
            return base.Channel.EndTestRun_RetrieveAutomatedById(result);
        }
        
        private System.IAsyncResult OnBeginTestRun_RetrieveAutomatedById(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int testRunId = ((int)(inValues[0]));
            return this.BeginTestRun_RetrieveAutomatedById(testRunId, callback, asyncState);
        }
        
        private object[] OnEndTestRun_RetrieveAutomatedById(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAutomatedTestRun retVal = this.EndTestRun_RetrieveAutomatedById(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTestRun_RetrieveAutomatedByIdCompleted(object state) {
            if ((this.TestRun_RetrieveAutomatedByIdCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TestRun_RetrieveAutomatedByIdCompleted(this, new TestRun_RetrieveAutomatedByIdCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TestRun_RetrieveAutomatedByIdAsync(int testRunId) {
            this.TestRun_RetrieveAutomatedByIdAsync(testRunId, null);
        }
        
        public void TestRun_RetrieveAutomatedByIdAsync(int testRunId, object userState) {
            if ((this.onBeginTestRun_RetrieveAutomatedByIdDelegate == null)) {
                this.onBeginTestRun_RetrieveAutomatedByIdDelegate = new BeginOperationDelegate(this.OnBeginTestRun_RetrieveAutomatedById);
            }
            if ((this.onEndTestRun_RetrieveAutomatedByIdDelegate == null)) {
                this.onEndTestRun_RetrieveAutomatedByIdDelegate = new EndOperationDelegate(this.OnEndTestRun_RetrieveAutomatedById);
            }
            if ((this.onTestRun_RetrieveAutomatedByIdCompletedDelegate == null)) {
                this.onTestRun_RetrieveAutomatedByIdCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTestRun_RetrieveAutomatedByIdCompleted);
            }
            base.InvokeAsync(this.onBeginTestRun_RetrieveAutomatedByIdDelegate, new object[] {
                        testRunId}, this.onEndTestRun_RetrieveAutomatedByIdDelegate, this.onTestRun_RetrieveAutomatedByIdCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteManualTestRun TestRun_RetrieveManualById(int testRunId) {
            return base.Channel.TestRun_RetrieveManualById(testRunId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTestRun_RetrieveManualById(int testRunId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTestRun_RetrieveManualById(testRunId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteManualTestRun EndTestRun_RetrieveManualById(System.IAsyncResult result) {
            return base.Channel.EndTestRun_RetrieveManualById(result);
        }
        
        private System.IAsyncResult OnBeginTestRun_RetrieveManualById(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int testRunId = ((int)(inValues[0]));
            return this.BeginTestRun_RetrieveManualById(testRunId, callback, asyncState);
        }
        
        private object[] OnEndTestRun_RetrieveManualById(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteManualTestRun retVal = this.EndTestRun_RetrieveManualById(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTestRun_RetrieveManualByIdCompleted(object state) {
            if ((this.TestRun_RetrieveManualByIdCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TestRun_RetrieveManualByIdCompleted(this, new TestRun_RetrieveManualByIdCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TestRun_RetrieveManualByIdAsync(int testRunId) {
            this.TestRun_RetrieveManualByIdAsync(testRunId, null);
        }
        
        public void TestRun_RetrieveManualByIdAsync(int testRunId, object userState) {
            if ((this.onBeginTestRun_RetrieveManualByIdDelegate == null)) {
                this.onBeginTestRun_RetrieveManualByIdDelegate = new BeginOperationDelegate(this.OnBeginTestRun_RetrieveManualById);
            }
            if ((this.onEndTestRun_RetrieveManualByIdDelegate == null)) {
                this.onEndTestRun_RetrieveManualByIdDelegate = new EndOperationDelegate(this.OnEndTestRun_RetrieveManualById);
            }
            if ((this.onTestRun_RetrieveManualByIdCompletedDelegate == null)) {
                this.onTestRun_RetrieveManualByIdCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTestRun_RetrieveManualByIdCompleted);
            }
            base.InvokeAsync(this.onBeginTestRun_RetrieveManualByIdDelegate, new object[] {
                        testRunId}, this.onEndTestRun_RetrieveManualByIdDelegate, this.onTestRun_RetrieveManualByIdCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteManualTestRun[] TestRun_Save(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteManualTestRun[] remoteTestRuns, System.Nullable<System.DateTime> endDate) {
            return base.Channel.TestRun_Save(remoteTestRuns, endDate);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTestRun_Save(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteManualTestRun[] remoteTestRuns, System.Nullable<System.DateTime> endDate, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTestRun_Save(remoteTestRuns, endDate, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteManualTestRun[] EndTestRun_Save(System.IAsyncResult result) {
            return base.Channel.EndTestRun_Save(result);
        }
        
        private System.IAsyncResult OnBeginTestRun_Save(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteManualTestRun[] remoteTestRuns = ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteManualTestRun[])(inValues[0]));
            System.Nullable<System.DateTime> endDate = ((System.Nullable<System.DateTime>)(inValues[1]));
            return this.BeginTestRun_Save(remoteTestRuns, endDate, callback, asyncState);
        }
        
        private object[] OnEndTestRun_Save(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteManualTestRun[] retVal = this.EndTestRun_Save(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTestRun_SaveCompleted(object state) {
            if ((this.TestRun_SaveCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TestRun_SaveCompleted(this, new TestRun_SaveCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TestRun_SaveAsync(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteManualTestRun[] remoteTestRuns, System.Nullable<System.DateTime> endDate) {
            this.TestRun_SaveAsync(remoteTestRuns, endDate, null);
        }
        
        public void TestRun_SaveAsync(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteManualTestRun[] remoteTestRuns, System.Nullable<System.DateTime> endDate, object userState) {
            if ((this.onBeginTestRun_SaveDelegate == null)) {
                this.onBeginTestRun_SaveDelegate = new BeginOperationDelegate(this.OnBeginTestRun_Save);
            }
            if ((this.onEndTestRun_SaveDelegate == null)) {
                this.onEndTestRun_SaveDelegate = new EndOperationDelegate(this.OnEndTestRun_Save);
            }
            if ((this.onTestRun_SaveCompletedDelegate == null)) {
                this.onTestRun_SaveCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTestRun_SaveCompleted);
            }
            base.InvokeAsync(this.onBeginTestRun_SaveDelegate, new object[] {
                        remoteTestRuns,
                        endDate}, this.onEndTestRun_SaveDelegate, this.onTestRun_SaveCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestSetTestCaseMapping[] TestSet_AddTestMapping(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestSetTestCaseMapping remoteTestSetTestCaseMapping, System.Nullable<int> existingTestSetTestCaseId, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestSetTestCaseParameter[] parameters) {
            return base.Channel.TestSet_AddTestMapping(remoteTestSetTestCaseMapping, existingTestSetTestCaseId, parameters);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTestSet_AddTestMapping(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestSetTestCaseMapping remoteTestSetTestCaseMapping, System.Nullable<int> existingTestSetTestCaseId, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestSetTestCaseParameter[] parameters, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTestSet_AddTestMapping(remoteTestSetTestCaseMapping, existingTestSetTestCaseId, parameters, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestSetTestCaseMapping[] EndTestSet_AddTestMapping(System.IAsyncResult result) {
            return base.Channel.EndTestSet_AddTestMapping(result);
        }
        
        private System.IAsyncResult OnBeginTestSet_AddTestMapping(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestSetTestCaseMapping remoteTestSetTestCaseMapping = ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestSetTestCaseMapping)(inValues[0]));
            System.Nullable<int> existingTestSetTestCaseId = ((System.Nullable<int>)(inValues[1]));
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestSetTestCaseParameter[] parameters = ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestSetTestCaseParameter[])(inValues[2]));
            return this.BeginTestSet_AddTestMapping(remoteTestSetTestCaseMapping, existingTestSetTestCaseId, parameters, callback, asyncState);
        }
        
        private object[] OnEndTestSet_AddTestMapping(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestSetTestCaseMapping[] retVal = this.EndTestSet_AddTestMapping(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTestSet_AddTestMappingCompleted(object state) {
            if ((this.TestSet_AddTestMappingCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TestSet_AddTestMappingCompleted(this, new TestSet_AddTestMappingCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TestSet_AddTestMappingAsync(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestSetTestCaseMapping remoteTestSetTestCaseMapping, System.Nullable<int> existingTestSetTestCaseId, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestSetTestCaseParameter[] parameters) {
            this.TestSet_AddTestMappingAsync(remoteTestSetTestCaseMapping, existingTestSetTestCaseId, parameters, null);
        }
        
        public void TestSet_AddTestMappingAsync(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestSetTestCaseMapping remoteTestSetTestCaseMapping, System.Nullable<int> existingTestSetTestCaseId, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestSetTestCaseParameter[] parameters, object userState) {
            if ((this.onBeginTestSet_AddTestMappingDelegate == null)) {
                this.onBeginTestSet_AddTestMappingDelegate = new BeginOperationDelegate(this.OnBeginTestSet_AddTestMapping);
            }
            if ((this.onEndTestSet_AddTestMappingDelegate == null)) {
                this.onEndTestSet_AddTestMappingDelegate = new EndOperationDelegate(this.OnEndTestSet_AddTestMapping);
            }
            if ((this.onTestSet_AddTestMappingCompletedDelegate == null)) {
                this.onTestSet_AddTestMappingCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTestSet_AddTestMappingCompleted);
            }
            base.InvokeAsync(this.onBeginTestSet_AddTestMappingDelegate, new object[] {
                        remoteTestSetTestCaseMapping,
                        existingTestSetTestCaseId,
                        parameters}, this.onEndTestSet_AddTestMappingDelegate, this.onTestSet_AddTestMappingCompletedDelegate, userState);
        }
        
        public void TestSet_RemoveTestMapping(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestSetTestCaseMapping remoteTestSetTestCaseMapping) {
            base.Channel.TestSet_RemoveTestMapping(remoteTestSetTestCaseMapping);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTestSet_RemoveTestMapping(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestSetTestCaseMapping remoteTestSetTestCaseMapping, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTestSet_RemoveTestMapping(remoteTestSetTestCaseMapping, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndTestSet_RemoveTestMapping(System.IAsyncResult result) {
            base.Channel.EndTestSet_RemoveTestMapping(result);
        }
        
        private System.IAsyncResult OnBeginTestSet_RemoveTestMapping(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestSetTestCaseMapping remoteTestSetTestCaseMapping = ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestSetTestCaseMapping)(inValues[0]));
            return this.BeginTestSet_RemoveTestMapping(remoteTestSetTestCaseMapping, callback, asyncState);
        }
        
        private object[] OnEndTestSet_RemoveTestMapping(System.IAsyncResult result) {
            this.EndTestSet_RemoveTestMapping(result);
            return null;
        }
        
        private void OnTestSet_RemoveTestMappingCompleted(object state) {
            if ((this.TestSet_RemoveTestMappingCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TestSet_RemoveTestMappingCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TestSet_RemoveTestMappingAsync(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestSetTestCaseMapping remoteTestSetTestCaseMapping) {
            this.TestSet_RemoveTestMappingAsync(remoteTestSetTestCaseMapping, null);
        }
        
        public void TestSet_RemoveTestMappingAsync(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestSetTestCaseMapping remoteTestSetTestCaseMapping, object userState) {
            if ((this.onBeginTestSet_RemoveTestMappingDelegate == null)) {
                this.onBeginTestSet_RemoveTestMappingDelegate = new BeginOperationDelegate(this.OnBeginTestSet_RemoveTestMapping);
            }
            if ((this.onEndTestSet_RemoveTestMappingDelegate == null)) {
                this.onEndTestSet_RemoveTestMappingDelegate = new EndOperationDelegate(this.OnEndTestSet_RemoveTestMapping);
            }
            if ((this.onTestSet_RemoveTestMappingCompletedDelegate == null)) {
                this.onTestSet_RemoveTestMappingCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTestSet_RemoveTestMappingCompleted);
            }
            base.InvokeAsync(this.onBeginTestSet_RemoveTestMappingDelegate, new object[] {
                        remoteTestSetTestCaseMapping}, this.onEndTestSet_RemoveTestMappingDelegate, this.onTestSet_RemoveTestMappingCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestSetTestCaseMapping[] TestSet_RetrieveTestCaseMapping(int testSetId) {
            return base.Channel.TestSet_RetrieveTestCaseMapping(testSetId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTestSet_RetrieveTestCaseMapping(int testSetId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTestSet_RetrieveTestCaseMapping(testSetId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestSetTestCaseMapping[] EndTestSet_RetrieveTestCaseMapping(System.IAsyncResult result) {
            return base.Channel.EndTestSet_RetrieveTestCaseMapping(result);
        }
        
        private System.IAsyncResult OnBeginTestSet_RetrieveTestCaseMapping(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int testSetId = ((int)(inValues[0]));
            return this.BeginTestSet_RetrieveTestCaseMapping(testSetId, callback, asyncState);
        }
        
        private object[] OnEndTestSet_RetrieveTestCaseMapping(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestSetTestCaseMapping[] retVal = this.EndTestSet_RetrieveTestCaseMapping(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTestSet_RetrieveTestCaseMappingCompleted(object state) {
            if ((this.TestSet_RetrieveTestCaseMappingCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TestSet_RetrieveTestCaseMappingCompleted(this, new TestSet_RetrieveTestCaseMappingCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TestSet_RetrieveTestCaseMappingAsync(int testSetId) {
            this.TestSet_RetrieveTestCaseMappingAsync(testSetId, null);
        }
        
        public void TestSet_RetrieveTestCaseMappingAsync(int testSetId, object userState) {
            if ((this.onBeginTestSet_RetrieveTestCaseMappingDelegate == null)) {
                this.onBeginTestSet_RetrieveTestCaseMappingDelegate = new BeginOperationDelegate(this.OnBeginTestSet_RetrieveTestCaseMapping);
            }
            if ((this.onEndTestSet_RetrieveTestCaseMappingDelegate == null)) {
                this.onEndTestSet_RetrieveTestCaseMappingDelegate = new EndOperationDelegate(this.OnEndTestSet_RetrieveTestCaseMapping);
            }
            if ((this.onTestSet_RetrieveTestCaseMappingCompletedDelegate == null)) {
                this.onTestSet_RetrieveTestCaseMappingCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTestSet_RetrieveTestCaseMappingCompleted);
            }
            base.InvokeAsync(this.onBeginTestSet_RetrieveTestCaseMappingDelegate, new object[] {
                        testSetId}, this.onEndTestSet_RetrieveTestCaseMappingDelegate, this.onTestSet_RetrieveTestCaseMappingCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestSet TestSet_Create(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestSet remoteTestSet) {
            return base.Channel.TestSet_Create(remoteTestSet);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTestSet_Create(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestSet remoteTestSet, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTestSet_Create(remoteTestSet, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestSet EndTestSet_Create(System.IAsyncResult result) {
            return base.Channel.EndTestSet_Create(result);
        }
        
        private System.IAsyncResult OnBeginTestSet_Create(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestSet remoteTestSet = ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestSet)(inValues[0]));
            return this.BeginTestSet_Create(remoteTestSet, callback, asyncState);
        }
        
        private object[] OnEndTestSet_Create(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestSet retVal = this.EndTestSet_Create(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTestSet_CreateCompleted(object state) {
            if ((this.TestSet_CreateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TestSet_CreateCompleted(this, new TestSet_CreateCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TestSet_CreateAsync(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestSet remoteTestSet) {
            this.TestSet_CreateAsync(remoteTestSet, null);
        }
        
        public void TestSet_CreateAsync(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestSet remoteTestSet, object userState) {
            if ((this.onBeginTestSet_CreateDelegate == null)) {
                this.onBeginTestSet_CreateDelegate = new BeginOperationDelegate(this.OnBeginTestSet_Create);
            }
            if ((this.onEndTestSet_CreateDelegate == null)) {
                this.onEndTestSet_CreateDelegate = new EndOperationDelegate(this.OnEndTestSet_Create);
            }
            if ((this.onTestSet_CreateCompletedDelegate == null)) {
                this.onTestSet_CreateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTestSet_CreateCompleted);
            }
            base.InvokeAsync(this.onBeginTestSet_CreateDelegate, new object[] {
                        remoteTestSet}, this.onEndTestSet_CreateDelegate, this.onTestSet_CreateCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestSetFolder TestSet_CreateFolder(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestSetFolder remoteTestSetFolder) {
            return base.Channel.TestSet_CreateFolder(remoteTestSetFolder);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTestSet_CreateFolder(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestSetFolder remoteTestSetFolder, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTestSet_CreateFolder(remoteTestSetFolder, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestSetFolder EndTestSet_CreateFolder(System.IAsyncResult result) {
            return base.Channel.EndTestSet_CreateFolder(result);
        }
        
        private System.IAsyncResult OnBeginTestSet_CreateFolder(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestSetFolder remoteTestSetFolder = ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestSetFolder)(inValues[0]));
            return this.BeginTestSet_CreateFolder(remoteTestSetFolder, callback, asyncState);
        }
        
        private object[] OnEndTestSet_CreateFolder(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestSetFolder retVal = this.EndTestSet_CreateFolder(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTestSet_CreateFolderCompleted(object state) {
            if ((this.TestSet_CreateFolderCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TestSet_CreateFolderCompleted(this, new TestSet_CreateFolderCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TestSet_CreateFolderAsync(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestSetFolder remoteTestSetFolder) {
            this.TestSet_CreateFolderAsync(remoteTestSetFolder, null);
        }
        
        public void TestSet_CreateFolderAsync(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestSetFolder remoteTestSetFolder, object userState) {
            if ((this.onBeginTestSet_CreateFolderDelegate == null)) {
                this.onBeginTestSet_CreateFolderDelegate = new BeginOperationDelegate(this.OnBeginTestSet_CreateFolder);
            }
            if ((this.onEndTestSet_CreateFolderDelegate == null)) {
                this.onEndTestSet_CreateFolderDelegate = new EndOperationDelegate(this.OnEndTestSet_CreateFolder);
            }
            if ((this.onTestSet_CreateFolderCompletedDelegate == null)) {
                this.onTestSet_CreateFolderCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTestSet_CreateFolderCompleted);
            }
            base.InvokeAsync(this.onBeginTestSet_CreateFolderDelegate, new object[] {
                        remoteTestSetFolder}, this.onEndTestSet_CreateFolderDelegate, this.onTestSet_CreateFolderCompletedDelegate, userState);
        }
        
        public long TestSet_Count(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters, System.Nullable<int> releaseId) {
            return base.Channel.TestSet_Count(remoteFilters, releaseId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTestSet_Count(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters, System.Nullable<int> releaseId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTestSet_Count(remoteFilters, releaseId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public long EndTestSet_Count(System.IAsyncResult result) {
            return base.Channel.EndTestSet_Count(result);
        }
        
        private System.IAsyncResult OnBeginTestSet_Count(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters = ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[])(inValues[0]));
            System.Nullable<int> releaseId = ((System.Nullable<int>)(inValues[1]));
            return this.BeginTestSet_Count(remoteFilters, releaseId, callback, asyncState);
        }
        
        private object[] OnEndTestSet_Count(System.IAsyncResult result) {
            long retVal = this.EndTestSet_Count(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTestSet_CountCompleted(object state) {
            if ((this.TestSet_CountCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TestSet_CountCompleted(this, new TestSet_CountCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TestSet_CountAsync(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters, System.Nullable<int> releaseId) {
            this.TestSet_CountAsync(remoteFilters, releaseId, null);
        }
        
        public void TestSet_CountAsync(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters, System.Nullable<int> releaseId, object userState) {
            if ((this.onBeginTestSet_CountDelegate == null)) {
                this.onBeginTestSet_CountDelegate = new BeginOperationDelegate(this.OnBeginTestSet_Count);
            }
            if ((this.onEndTestSet_CountDelegate == null)) {
                this.onEndTestSet_CountDelegate = new EndOperationDelegate(this.OnEndTestSet_Count);
            }
            if ((this.onTestSet_CountCompletedDelegate == null)) {
                this.onTestSet_CountCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTestSet_CountCompleted);
            }
            base.InvokeAsync(this.onBeginTestSet_CountDelegate, new object[] {
                        remoteFilters,
                        releaseId}, this.onEndTestSet_CountDelegate, this.onTestSet_CountCompletedDelegate, userState);
        }
        
        public long TestSet_CountForFolder(System.Nullable<int> testSetFolderId, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters, System.Nullable<int> releaseId) {
            return base.Channel.TestSet_CountForFolder(testSetFolderId, remoteFilters, releaseId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTestSet_CountForFolder(System.Nullable<int> testSetFolderId, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters, System.Nullable<int> releaseId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTestSet_CountForFolder(testSetFolderId, remoteFilters, releaseId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public long EndTestSet_CountForFolder(System.IAsyncResult result) {
            return base.Channel.EndTestSet_CountForFolder(result);
        }
        
        private System.IAsyncResult OnBeginTestSet_CountForFolder(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Nullable<int> testSetFolderId = ((System.Nullable<int>)(inValues[0]));
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters = ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[])(inValues[1]));
            System.Nullable<int> releaseId = ((System.Nullable<int>)(inValues[2]));
            return this.BeginTestSet_CountForFolder(testSetFolderId, remoteFilters, releaseId, callback, asyncState);
        }
        
        private object[] OnEndTestSet_CountForFolder(System.IAsyncResult result) {
            long retVal = this.EndTestSet_CountForFolder(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTestSet_CountForFolderCompleted(object state) {
            if ((this.TestSet_CountForFolderCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TestSet_CountForFolderCompleted(this, new TestSet_CountForFolderCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TestSet_CountForFolderAsync(System.Nullable<int> testSetFolderId, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters, System.Nullable<int> releaseId) {
            this.TestSet_CountForFolderAsync(testSetFolderId, remoteFilters, releaseId, null);
        }
        
        public void TestSet_CountForFolderAsync(System.Nullable<int> testSetFolderId, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters, System.Nullable<int> releaseId, object userState) {
            if ((this.onBeginTestSet_CountForFolderDelegate == null)) {
                this.onBeginTestSet_CountForFolderDelegate = new BeginOperationDelegate(this.OnBeginTestSet_CountForFolder);
            }
            if ((this.onEndTestSet_CountForFolderDelegate == null)) {
                this.onEndTestSet_CountForFolderDelegate = new EndOperationDelegate(this.OnEndTestSet_CountForFolder);
            }
            if ((this.onTestSet_CountForFolderCompletedDelegate == null)) {
                this.onTestSet_CountForFolderCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTestSet_CountForFolderCompleted);
            }
            base.InvokeAsync(this.onBeginTestSet_CountForFolderDelegate, new object[] {
                        testSetFolderId,
                        remoteFilters,
                        releaseId}, this.onEndTestSet_CountForFolderDelegate, this.onTestSet_CountForFolderCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestSet[] TestSet_Retrieve(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSort remoteSort, int startingRow, int numberOfRows, System.Nullable<int> releaseId) {
            return base.Channel.TestSet_Retrieve(remoteFilters, remoteSort, startingRow, numberOfRows, releaseId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTestSet_Retrieve(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSort remoteSort, int startingRow, int numberOfRows, System.Nullable<int> releaseId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTestSet_Retrieve(remoteFilters, remoteSort, startingRow, numberOfRows, releaseId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestSet[] EndTestSet_Retrieve(System.IAsyncResult result) {
            return base.Channel.EndTestSet_Retrieve(result);
        }
        
        private System.IAsyncResult OnBeginTestSet_Retrieve(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters = ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[])(inValues[0]));
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSort remoteSort = ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSort)(inValues[1]));
            int startingRow = ((int)(inValues[2]));
            int numberOfRows = ((int)(inValues[3]));
            System.Nullable<int> releaseId = ((System.Nullable<int>)(inValues[4]));
            return this.BeginTestSet_Retrieve(remoteFilters, remoteSort, startingRow, numberOfRows, releaseId, callback, asyncState);
        }
        
        private object[] OnEndTestSet_Retrieve(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestSet[] retVal = this.EndTestSet_Retrieve(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTestSet_RetrieveCompleted(object state) {
            if ((this.TestSet_RetrieveCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TestSet_RetrieveCompleted(this, new TestSet_RetrieveCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TestSet_RetrieveAsync(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSort remoteSort, int startingRow, int numberOfRows, System.Nullable<int> releaseId) {
            this.TestSet_RetrieveAsync(remoteFilters, remoteSort, startingRow, numberOfRows, releaseId, null);
        }
        
        public void TestSet_RetrieveAsync(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSort remoteSort, int startingRow, int numberOfRows, System.Nullable<int> releaseId, object userState) {
            if ((this.onBeginTestSet_RetrieveDelegate == null)) {
                this.onBeginTestSet_RetrieveDelegate = new BeginOperationDelegate(this.OnBeginTestSet_Retrieve);
            }
            if ((this.onEndTestSet_RetrieveDelegate == null)) {
                this.onEndTestSet_RetrieveDelegate = new EndOperationDelegate(this.OnEndTestSet_Retrieve);
            }
            if ((this.onTestSet_RetrieveCompletedDelegate == null)) {
                this.onTestSet_RetrieveCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTestSet_RetrieveCompleted);
            }
            base.InvokeAsync(this.onBeginTestSet_RetrieveDelegate, new object[] {
                        remoteFilters,
                        remoteSort,
                        startingRow,
                        numberOfRows,
                        releaseId}, this.onEndTestSet_RetrieveDelegate, this.onTestSet_RetrieveCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestSet[] TestSet_RetrieveByFolder(System.Nullable<int> testSetFolderId, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSort remoteSort, int startingRow, int numberOfRows, System.Nullable<int> releaseId) {
            return base.Channel.TestSet_RetrieveByFolder(testSetFolderId, remoteFilters, remoteSort, startingRow, numberOfRows, releaseId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTestSet_RetrieveByFolder(System.Nullable<int> testSetFolderId, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSort remoteSort, int startingRow, int numberOfRows, System.Nullable<int> releaseId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTestSet_RetrieveByFolder(testSetFolderId, remoteFilters, remoteSort, startingRow, numberOfRows, releaseId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestSet[] EndTestSet_RetrieveByFolder(System.IAsyncResult result) {
            return base.Channel.EndTestSet_RetrieveByFolder(result);
        }
        
        private System.IAsyncResult OnBeginTestSet_RetrieveByFolder(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Nullable<int> testSetFolderId = ((System.Nullable<int>)(inValues[0]));
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters = ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[])(inValues[1]));
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSort remoteSort = ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSort)(inValues[2]));
            int startingRow = ((int)(inValues[3]));
            int numberOfRows = ((int)(inValues[4]));
            System.Nullable<int> releaseId = ((System.Nullable<int>)(inValues[5]));
            return this.BeginTestSet_RetrieveByFolder(testSetFolderId, remoteFilters, remoteSort, startingRow, numberOfRows, releaseId, callback, asyncState);
        }
        
        private object[] OnEndTestSet_RetrieveByFolder(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestSet[] retVal = this.EndTestSet_RetrieveByFolder(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTestSet_RetrieveByFolderCompleted(object state) {
            if ((this.TestSet_RetrieveByFolderCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TestSet_RetrieveByFolderCompleted(this, new TestSet_RetrieveByFolderCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TestSet_RetrieveByFolderAsync(System.Nullable<int> testSetFolderId, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSort remoteSort, int startingRow, int numberOfRows, System.Nullable<int> releaseId) {
            this.TestSet_RetrieveByFolderAsync(testSetFolderId, remoteFilters, remoteSort, startingRow, numberOfRows, releaseId, null);
        }
        
        public void TestSet_RetrieveByFolderAsync(System.Nullable<int> testSetFolderId, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSort remoteSort, int startingRow, int numberOfRows, System.Nullable<int> releaseId, object userState) {
            if ((this.onBeginTestSet_RetrieveByFolderDelegate == null)) {
                this.onBeginTestSet_RetrieveByFolderDelegate = new BeginOperationDelegate(this.OnBeginTestSet_RetrieveByFolder);
            }
            if ((this.onEndTestSet_RetrieveByFolderDelegate == null)) {
                this.onEndTestSet_RetrieveByFolderDelegate = new EndOperationDelegate(this.OnEndTestSet_RetrieveByFolder);
            }
            if ((this.onTestSet_RetrieveByFolderCompletedDelegate == null)) {
                this.onTestSet_RetrieveByFolderCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTestSet_RetrieveByFolderCompleted);
            }
            base.InvokeAsync(this.onBeginTestSet_RetrieveByFolderDelegate, new object[] {
                        testSetFolderId,
                        remoteFilters,
                        remoteSort,
                        startingRow,
                        numberOfRows,
                        releaseId}, this.onEndTestSet_RetrieveByFolderDelegate, this.onTestSet_RetrieveByFolderCompletedDelegate, userState);
        }
        
        public void TestSet_Update(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestSet remoteTestSet) {
            base.Channel.TestSet_Update(remoteTestSet);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTestSet_Update(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestSet remoteTestSet, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTestSet_Update(remoteTestSet, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndTestSet_Update(System.IAsyncResult result) {
            base.Channel.EndTestSet_Update(result);
        }
        
        private System.IAsyncResult OnBeginTestSet_Update(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestSet remoteTestSet = ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestSet)(inValues[0]));
            return this.BeginTestSet_Update(remoteTestSet, callback, asyncState);
        }
        
        private object[] OnEndTestSet_Update(System.IAsyncResult result) {
            this.EndTestSet_Update(result);
            return null;
        }
        
        private void OnTestSet_UpdateCompleted(object state) {
            if ((this.TestSet_UpdateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TestSet_UpdateCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TestSet_UpdateAsync(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestSet remoteTestSet) {
            this.TestSet_UpdateAsync(remoteTestSet, null);
        }
        
        public void TestSet_UpdateAsync(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestSet remoteTestSet, object userState) {
            if ((this.onBeginTestSet_UpdateDelegate == null)) {
                this.onBeginTestSet_UpdateDelegate = new BeginOperationDelegate(this.OnBeginTestSet_Update);
            }
            if ((this.onEndTestSet_UpdateDelegate == null)) {
                this.onEndTestSet_UpdateDelegate = new EndOperationDelegate(this.OnEndTestSet_Update);
            }
            if ((this.onTestSet_UpdateCompletedDelegate == null)) {
                this.onTestSet_UpdateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTestSet_UpdateCompleted);
            }
            base.InvokeAsync(this.onBeginTestSet_UpdateDelegate, new object[] {
                        remoteTestSet}, this.onEndTestSet_UpdateDelegate, this.onTestSet_UpdateCompletedDelegate, userState);
        }
        
        public void TestSet_Delete(int testSetId) {
            base.Channel.TestSet_Delete(testSetId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTestSet_Delete(int testSetId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTestSet_Delete(testSetId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndTestSet_Delete(System.IAsyncResult result) {
            base.Channel.EndTestSet_Delete(result);
        }
        
        private System.IAsyncResult OnBeginTestSet_Delete(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int testSetId = ((int)(inValues[0]));
            return this.BeginTestSet_Delete(testSetId, callback, asyncState);
        }
        
        private object[] OnEndTestSet_Delete(System.IAsyncResult result) {
            this.EndTestSet_Delete(result);
            return null;
        }
        
        private void OnTestSet_DeleteCompleted(object state) {
            if ((this.TestSet_DeleteCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TestSet_DeleteCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TestSet_DeleteAsync(int testSetId) {
            this.TestSet_DeleteAsync(testSetId, null);
        }
        
        public void TestSet_DeleteAsync(int testSetId, object userState) {
            if ((this.onBeginTestSet_DeleteDelegate == null)) {
                this.onBeginTestSet_DeleteDelegate = new BeginOperationDelegate(this.OnBeginTestSet_Delete);
            }
            if ((this.onEndTestSet_DeleteDelegate == null)) {
                this.onEndTestSet_DeleteDelegate = new EndOperationDelegate(this.OnEndTestSet_Delete);
            }
            if ((this.onTestSet_DeleteCompletedDelegate == null)) {
                this.onTestSet_DeleteCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTestSet_DeleteCompleted);
            }
            base.InvokeAsync(this.onBeginTestSet_DeleteDelegate, new object[] {
                        testSetId}, this.onEndTestSet_DeleteDelegate, this.onTestSet_DeleteCompletedDelegate, userState);
        }
        
        public void TestSet_UpdateFolder(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestSetFolder remoteTestSetFolder) {
            base.Channel.TestSet_UpdateFolder(remoteTestSetFolder);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTestSet_UpdateFolder(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestSetFolder remoteTestSetFolder, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTestSet_UpdateFolder(remoteTestSetFolder, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndTestSet_UpdateFolder(System.IAsyncResult result) {
            base.Channel.EndTestSet_UpdateFolder(result);
        }
        
        private System.IAsyncResult OnBeginTestSet_UpdateFolder(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestSetFolder remoteTestSetFolder = ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestSetFolder)(inValues[0]));
            return this.BeginTestSet_UpdateFolder(remoteTestSetFolder, callback, asyncState);
        }
        
        private object[] OnEndTestSet_UpdateFolder(System.IAsyncResult result) {
            this.EndTestSet_UpdateFolder(result);
            return null;
        }
        
        private void OnTestSet_UpdateFolderCompleted(object state) {
            if ((this.TestSet_UpdateFolderCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TestSet_UpdateFolderCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TestSet_UpdateFolderAsync(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestSetFolder remoteTestSetFolder) {
            this.TestSet_UpdateFolderAsync(remoteTestSetFolder, null);
        }
        
        public void TestSet_UpdateFolderAsync(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestSetFolder remoteTestSetFolder, object userState) {
            if ((this.onBeginTestSet_UpdateFolderDelegate == null)) {
                this.onBeginTestSet_UpdateFolderDelegate = new BeginOperationDelegate(this.OnBeginTestSet_UpdateFolder);
            }
            if ((this.onEndTestSet_UpdateFolderDelegate == null)) {
                this.onEndTestSet_UpdateFolderDelegate = new EndOperationDelegate(this.OnEndTestSet_UpdateFolder);
            }
            if ((this.onTestSet_UpdateFolderCompletedDelegate == null)) {
                this.onTestSet_UpdateFolderCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTestSet_UpdateFolderCompleted);
            }
            base.InvokeAsync(this.onBeginTestSet_UpdateFolderDelegate, new object[] {
                        remoteTestSetFolder}, this.onEndTestSet_UpdateFolderDelegate, this.onTestSet_UpdateFolderCompletedDelegate, userState);
        }
        
        public void TestSet_DeleteFolder(int testSetFolderId) {
            base.Channel.TestSet_DeleteFolder(testSetFolderId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTestSet_DeleteFolder(int testSetFolderId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTestSet_DeleteFolder(testSetFolderId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndTestSet_DeleteFolder(System.IAsyncResult result) {
            base.Channel.EndTestSet_DeleteFolder(result);
        }
        
        private System.IAsyncResult OnBeginTestSet_DeleteFolder(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int testSetFolderId = ((int)(inValues[0]));
            return this.BeginTestSet_DeleteFolder(testSetFolderId, callback, asyncState);
        }
        
        private object[] OnEndTestSet_DeleteFolder(System.IAsyncResult result) {
            this.EndTestSet_DeleteFolder(result);
            return null;
        }
        
        private void OnTestSet_DeleteFolderCompleted(object state) {
            if ((this.TestSet_DeleteFolderCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TestSet_DeleteFolderCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TestSet_DeleteFolderAsync(int testSetFolderId) {
            this.TestSet_DeleteFolderAsync(testSetFolderId, null);
        }
        
        public void TestSet_DeleteFolderAsync(int testSetFolderId, object userState) {
            if ((this.onBeginTestSet_DeleteFolderDelegate == null)) {
                this.onBeginTestSet_DeleteFolderDelegate = new BeginOperationDelegate(this.OnBeginTestSet_DeleteFolder);
            }
            if ((this.onEndTestSet_DeleteFolderDelegate == null)) {
                this.onEndTestSet_DeleteFolderDelegate = new EndOperationDelegate(this.OnEndTestSet_DeleteFolder);
            }
            if ((this.onTestSet_DeleteFolderCompletedDelegate == null)) {
                this.onTestSet_DeleteFolderCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTestSet_DeleteFolderCompleted);
            }
            base.InvokeAsync(this.onBeginTestSet_DeleteFolderDelegate, new object[] {
                        testSetFolderId}, this.onEndTestSet_DeleteFolderDelegate, this.onTestSet_DeleteFolderCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestSet TestSet_RetrieveById(int testSetId) {
            return base.Channel.TestSet_RetrieveById(testSetId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTestSet_RetrieveById(int testSetId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTestSet_RetrieveById(testSetId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestSet EndTestSet_RetrieveById(System.IAsyncResult result) {
            return base.Channel.EndTestSet_RetrieveById(result);
        }
        
        private System.IAsyncResult OnBeginTestSet_RetrieveById(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int testSetId = ((int)(inValues[0]));
            return this.BeginTestSet_RetrieveById(testSetId, callback, asyncState);
        }
        
        private object[] OnEndTestSet_RetrieveById(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestSet retVal = this.EndTestSet_RetrieveById(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTestSet_RetrieveByIdCompleted(object state) {
            if ((this.TestSet_RetrieveByIdCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TestSet_RetrieveByIdCompleted(this, new TestSet_RetrieveByIdCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TestSet_RetrieveByIdAsync(int testSetId) {
            this.TestSet_RetrieveByIdAsync(testSetId, null);
        }
        
        public void TestSet_RetrieveByIdAsync(int testSetId, object userState) {
            if ((this.onBeginTestSet_RetrieveByIdDelegate == null)) {
                this.onBeginTestSet_RetrieveByIdDelegate = new BeginOperationDelegate(this.OnBeginTestSet_RetrieveById);
            }
            if ((this.onEndTestSet_RetrieveByIdDelegate == null)) {
                this.onEndTestSet_RetrieveByIdDelegate = new EndOperationDelegate(this.OnEndTestSet_RetrieveById);
            }
            if ((this.onTestSet_RetrieveByIdCompletedDelegate == null)) {
                this.onTestSet_RetrieveByIdCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTestSet_RetrieveByIdCompleted);
            }
            base.InvokeAsync(this.onBeginTestSet_RetrieveByIdDelegate, new object[] {
                        testSetId}, this.onEndTestSet_RetrieveByIdDelegate, this.onTestSet_RetrieveByIdCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestSetFolder TestSet_RetrieveFolderById(int testSetFolderId) {
            return base.Channel.TestSet_RetrieveFolderById(testSetFolderId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTestSet_RetrieveFolderById(int testSetFolderId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTestSet_RetrieveFolderById(testSetFolderId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestSetFolder EndTestSet_RetrieveFolderById(System.IAsyncResult result) {
            return base.Channel.EndTestSet_RetrieveFolderById(result);
        }
        
        private System.IAsyncResult OnBeginTestSet_RetrieveFolderById(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int testSetFolderId = ((int)(inValues[0]));
            return this.BeginTestSet_RetrieveFolderById(testSetFolderId, callback, asyncState);
        }
        
        private object[] OnEndTestSet_RetrieveFolderById(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestSetFolder retVal = this.EndTestSet_RetrieveFolderById(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTestSet_RetrieveFolderByIdCompleted(object state) {
            if ((this.TestSet_RetrieveFolderByIdCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TestSet_RetrieveFolderByIdCompleted(this, new TestSet_RetrieveFolderByIdCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TestSet_RetrieveFolderByIdAsync(int testSetFolderId) {
            this.TestSet_RetrieveFolderByIdAsync(testSetFolderId, null);
        }
        
        public void TestSet_RetrieveFolderByIdAsync(int testSetFolderId, object userState) {
            if ((this.onBeginTestSet_RetrieveFolderByIdDelegate == null)) {
                this.onBeginTestSet_RetrieveFolderByIdDelegate = new BeginOperationDelegate(this.OnBeginTestSet_RetrieveFolderById);
            }
            if ((this.onEndTestSet_RetrieveFolderByIdDelegate == null)) {
                this.onEndTestSet_RetrieveFolderByIdDelegate = new EndOperationDelegate(this.OnEndTestSet_RetrieveFolderById);
            }
            if ((this.onTestSet_RetrieveFolderByIdCompletedDelegate == null)) {
                this.onTestSet_RetrieveFolderByIdCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTestSet_RetrieveFolderByIdCompleted);
            }
            base.InvokeAsync(this.onBeginTestSet_RetrieveFolderByIdDelegate, new object[] {
                        testSetFolderId}, this.onEndTestSet_RetrieveFolderByIdDelegate, this.onTestSet_RetrieveFolderByIdCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestSetFolder[] TestSet_RetrieveFolders() {
            return base.Channel.TestSet_RetrieveFolders();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTestSet_RetrieveFolders(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTestSet_RetrieveFolders(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestSetFolder[] EndTestSet_RetrieveFolders(System.IAsyncResult result) {
            return base.Channel.EndTestSet_RetrieveFolders(result);
        }
        
        private System.IAsyncResult OnBeginTestSet_RetrieveFolders(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginTestSet_RetrieveFolders(callback, asyncState);
        }
        
        private object[] OnEndTestSet_RetrieveFolders(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestSetFolder[] retVal = this.EndTestSet_RetrieveFolders(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTestSet_RetrieveFoldersCompleted(object state) {
            if ((this.TestSet_RetrieveFoldersCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TestSet_RetrieveFoldersCompleted(this, new TestSet_RetrieveFoldersCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TestSet_RetrieveFoldersAsync() {
            this.TestSet_RetrieveFoldersAsync(null);
        }
        
        public void TestSet_RetrieveFoldersAsync(object userState) {
            if ((this.onBeginTestSet_RetrieveFoldersDelegate == null)) {
                this.onBeginTestSet_RetrieveFoldersDelegate = new BeginOperationDelegate(this.OnBeginTestSet_RetrieveFolders);
            }
            if ((this.onEndTestSet_RetrieveFoldersDelegate == null)) {
                this.onEndTestSet_RetrieveFoldersDelegate = new EndOperationDelegate(this.OnEndTestSet_RetrieveFolders);
            }
            if ((this.onTestSet_RetrieveFoldersCompletedDelegate == null)) {
                this.onTestSet_RetrieveFoldersCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTestSet_RetrieveFoldersCompleted);
            }
            base.InvokeAsync(this.onBeginTestSet_RetrieveFoldersDelegate, null, this.onEndTestSet_RetrieveFoldersDelegate, this.onTestSet_RetrieveFoldersCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestSetFolder[] TestSet_RetrieveFoldersByParent(System.Nullable<int> parentTestSetFolderId, System.Nullable<int> releaseId) {
            return base.Channel.TestSet_RetrieveFoldersByParent(parentTestSetFolderId, releaseId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTestSet_RetrieveFoldersByParent(System.Nullable<int> parentTestSetFolderId, System.Nullable<int> releaseId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTestSet_RetrieveFoldersByParent(parentTestSetFolderId, releaseId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestSetFolder[] EndTestSet_RetrieveFoldersByParent(System.IAsyncResult result) {
            return base.Channel.EndTestSet_RetrieveFoldersByParent(result);
        }
        
        private System.IAsyncResult OnBeginTestSet_RetrieveFoldersByParent(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Nullable<int> parentTestSetFolderId = ((System.Nullable<int>)(inValues[0]));
            System.Nullable<int> releaseId = ((System.Nullable<int>)(inValues[1]));
            return this.BeginTestSet_RetrieveFoldersByParent(parentTestSetFolderId, releaseId, callback, asyncState);
        }
        
        private object[] OnEndTestSet_RetrieveFoldersByParent(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestSetFolder[] retVal = this.EndTestSet_RetrieveFoldersByParent(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTestSet_RetrieveFoldersByParentCompleted(object state) {
            if ((this.TestSet_RetrieveFoldersByParentCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TestSet_RetrieveFoldersByParentCompleted(this, new TestSet_RetrieveFoldersByParentCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TestSet_RetrieveFoldersByParentAsync(System.Nullable<int> parentTestSetFolderId, System.Nullable<int> releaseId) {
            this.TestSet_RetrieveFoldersByParentAsync(parentTestSetFolderId, releaseId, null);
        }
        
        public void TestSet_RetrieveFoldersByParentAsync(System.Nullable<int> parentTestSetFolderId, System.Nullable<int> releaseId, object userState) {
            if ((this.onBeginTestSet_RetrieveFoldersByParentDelegate == null)) {
                this.onBeginTestSet_RetrieveFoldersByParentDelegate = new BeginOperationDelegate(this.OnBeginTestSet_RetrieveFoldersByParent);
            }
            if ((this.onEndTestSet_RetrieveFoldersByParentDelegate == null)) {
                this.onEndTestSet_RetrieveFoldersByParentDelegate = new EndOperationDelegate(this.OnEndTestSet_RetrieveFoldersByParent);
            }
            if ((this.onTestSet_RetrieveFoldersByParentCompletedDelegate == null)) {
                this.onTestSet_RetrieveFoldersByParentCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTestSet_RetrieveFoldersByParentCompleted);
            }
            base.InvokeAsync(this.onBeginTestSet_RetrieveFoldersByParentDelegate, new object[] {
                        parentTestSetFolderId,
                        releaseId}, this.onEndTestSet_RetrieveFoldersByParentDelegate, this.onTestSet_RetrieveFoldersByParentCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestSet[] TestSet_RetrieveForOwner() {
            return base.Channel.TestSet_RetrieveForOwner();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTestSet_RetrieveForOwner(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTestSet_RetrieveForOwner(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestSet[] EndTestSet_RetrieveForOwner(System.IAsyncResult result) {
            return base.Channel.EndTestSet_RetrieveForOwner(result);
        }
        
        private System.IAsyncResult OnBeginTestSet_RetrieveForOwner(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginTestSet_RetrieveForOwner(callback, asyncState);
        }
        
        private object[] OnEndTestSet_RetrieveForOwner(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestSet[] retVal = this.EndTestSet_RetrieveForOwner(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTestSet_RetrieveForOwnerCompleted(object state) {
            if ((this.TestSet_RetrieveForOwnerCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TestSet_RetrieveForOwnerCompleted(this, new TestSet_RetrieveForOwnerCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TestSet_RetrieveForOwnerAsync() {
            this.TestSet_RetrieveForOwnerAsync(null);
        }
        
        public void TestSet_RetrieveForOwnerAsync(object userState) {
            if ((this.onBeginTestSet_RetrieveForOwnerDelegate == null)) {
                this.onBeginTestSet_RetrieveForOwnerDelegate = new BeginOperationDelegate(this.OnBeginTestSet_RetrieveForOwner);
            }
            if ((this.onEndTestSet_RetrieveForOwnerDelegate == null)) {
                this.onEndTestSet_RetrieveForOwnerDelegate = new EndOperationDelegate(this.OnEndTestSet_RetrieveForOwner);
            }
            if ((this.onTestSet_RetrieveForOwnerCompletedDelegate == null)) {
                this.onTestSet_RetrieveForOwnerCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTestSet_RetrieveForOwnerCompleted);
            }
            base.InvokeAsync(this.onBeginTestSet_RetrieveForOwnerDelegate, null, this.onEndTestSet_RetrieveForOwnerDelegate, this.onTestSet_RetrieveForOwnerCompletedDelegate, userState);
        }
        
        public void TestSet_Move(int testSetId, System.Nullable<int> destinationTestSetId) {
            base.Channel.TestSet_Move(testSetId, destinationTestSetId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTestSet_Move(int testSetId, System.Nullable<int> destinationTestSetId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTestSet_Move(testSetId, destinationTestSetId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndTestSet_Move(System.IAsyncResult result) {
            base.Channel.EndTestSet_Move(result);
        }
        
        private System.IAsyncResult OnBeginTestSet_Move(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int testSetId = ((int)(inValues[0]));
            System.Nullable<int> destinationTestSetId = ((System.Nullable<int>)(inValues[1]));
            return this.BeginTestSet_Move(testSetId, destinationTestSetId, callback, asyncState);
        }
        
        private object[] OnEndTestSet_Move(System.IAsyncResult result) {
            this.EndTestSet_Move(result);
            return null;
        }
        
        private void OnTestSet_MoveCompleted(object state) {
            if ((this.TestSet_MoveCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TestSet_MoveCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TestSet_MoveAsync(int testSetId, System.Nullable<int> destinationTestSetId) {
            this.TestSet_MoveAsync(testSetId, destinationTestSetId, null);
        }
        
        public void TestSet_MoveAsync(int testSetId, System.Nullable<int> destinationTestSetId, object userState) {
            if ((this.onBeginTestSet_MoveDelegate == null)) {
                this.onBeginTestSet_MoveDelegate = new BeginOperationDelegate(this.OnBeginTestSet_Move);
            }
            if ((this.onEndTestSet_MoveDelegate == null)) {
                this.onEndTestSet_MoveDelegate = new EndOperationDelegate(this.OnEndTestSet_Move);
            }
            if ((this.onTestSet_MoveCompletedDelegate == null)) {
                this.onTestSet_MoveCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTestSet_MoveCompleted);
            }
            base.InvokeAsync(this.onBeginTestSet_MoveDelegate, new object[] {
                        testSetId,
                        destinationTestSetId}, this.onEndTestSet_MoveDelegate, this.onTestSet_MoveCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComment[] TestSet_RetrieveComments(int TestSetId) {
            return base.Channel.TestSet_RetrieveComments(TestSetId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTestSet_RetrieveComments(int TestSetId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTestSet_RetrieveComments(TestSetId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComment[] EndTestSet_RetrieveComments(System.IAsyncResult result) {
            return base.Channel.EndTestSet_RetrieveComments(result);
        }
        
        private System.IAsyncResult OnBeginTestSet_RetrieveComments(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int TestSetId = ((int)(inValues[0]));
            return this.BeginTestSet_RetrieveComments(TestSetId, callback, asyncState);
        }
        
        private object[] OnEndTestSet_RetrieveComments(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComment[] retVal = this.EndTestSet_RetrieveComments(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTestSet_RetrieveCommentsCompleted(object state) {
            if ((this.TestSet_RetrieveCommentsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TestSet_RetrieveCommentsCompleted(this, new TestSet_RetrieveCommentsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TestSet_RetrieveCommentsAsync(int TestSetId) {
            this.TestSet_RetrieveCommentsAsync(TestSetId, null);
        }
        
        public void TestSet_RetrieveCommentsAsync(int TestSetId, object userState) {
            if ((this.onBeginTestSet_RetrieveCommentsDelegate == null)) {
                this.onBeginTestSet_RetrieveCommentsDelegate = new BeginOperationDelegate(this.OnBeginTestSet_RetrieveComments);
            }
            if ((this.onEndTestSet_RetrieveCommentsDelegate == null)) {
                this.onEndTestSet_RetrieveCommentsDelegate = new EndOperationDelegate(this.OnEndTestSet_RetrieveComments);
            }
            if ((this.onTestSet_RetrieveCommentsCompletedDelegate == null)) {
                this.onTestSet_RetrieveCommentsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTestSet_RetrieveCommentsCompleted);
            }
            base.InvokeAsync(this.onBeginTestSet_RetrieveCommentsDelegate, new object[] {
                        TestSetId}, this.onEndTestSet_RetrieveCommentsDelegate, this.onTestSet_RetrieveCommentsCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComment TestSet_CreateComment(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComment remoteComment) {
            return base.Channel.TestSet_CreateComment(remoteComment);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTestSet_CreateComment(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComment remoteComment, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTestSet_CreateComment(remoteComment, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComment EndTestSet_CreateComment(System.IAsyncResult result) {
            return base.Channel.EndTestSet_CreateComment(result);
        }
        
        private System.IAsyncResult OnBeginTestSet_CreateComment(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComment remoteComment = ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComment)(inValues[0]));
            return this.BeginTestSet_CreateComment(remoteComment, callback, asyncState);
        }
        
        private object[] OnEndTestSet_CreateComment(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComment retVal = this.EndTestSet_CreateComment(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTestSet_CreateCommentCompleted(object state) {
            if ((this.TestSet_CreateCommentCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TestSet_CreateCommentCompleted(this, new TestSet_CreateCommentCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TestSet_CreateCommentAsync(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComment remoteComment) {
            this.TestSet_CreateCommentAsync(remoteComment, null);
        }
        
        public void TestSet_CreateCommentAsync(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComment remoteComment, object userState) {
            if ((this.onBeginTestSet_CreateCommentDelegate == null)) {
                this.onBeginTestSet_CreateCommentDelegate = new BeginOperationDelegate(this.OnBeginTestSet_CreateComment);
            }
            if ((this.onEndTestSet_CreateCommentDelegate == null)) {
                this.onEndTestSet_CreateCommentDelegate = new EndOperationDelegate(this.OnEndTestSet_CreateComment);
            }
            if ((this.onTestSet_CreateCommentCompletedDelegate == null)) {
                this.onTestSet_CreateCommentCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTestSet_CreateCommentCompleted);
            }
            base.InvokeAsync(this.onBeginTestSet_CreateCommentDelegate, new object[] {
                        remoteComment}, this.onEndTestSet_CreateCommentDelegate, this.onTestSet_CreateCommentCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestSetParameter[] TestSet_RetrieveParameters(int testSetId) {
            return base.Channel.TestSet_RetrieveParameters(testSetId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTestSet_RetrieveParameters(int testSetId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTestSet_RetrieveParameters(testSetId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestSetParameter[] EndTestSet_RetrieveParameters(System.IAsyncResult result) {
            return base.Channel.EndTestSet_RetrieveParameters(result);
        }
        
        private System.IAsyncResult OnBeginTestSet_RetrieveParameters(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int testSetId = ((int)(inValues[0]));
            return this.BeginTestSet_RetrieveParameters(testSetId, callback, asyncState);
        }
        
        private object[] OnEndTestSet_RetrieveParameters(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestSetParameter[] retVal = this.EndTestSet_RetrieveParameters(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTestSet_RetrieveParametersCompleted(object state) {
            if ((this.TestSet_RetrieveParametersCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TestSet_RetrieveParametersCompleted(this, new TestSet_RetrieveParametersCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TestSet_RetrieveParametersAsync(int testSetId) {
            this.TestSet_RetrieveParametersAsync(testSetId, null);
        }
        
        public void TestSet_RetrieveParametersAsync(int testSetId, object userState) {
            if ((this.onBeginTestSet_RetrieveParametersDelegate == null)) {
                this.onBeginTestSet_RetrieveParametersDelegate = new BeginOperationDelegate(this.OnBeginTestSet_RetrieveParameters);
            }
            if ((this.onEndTestSet_RetrieveParametersDelegate == null)) {
                this.onEndTestSet_RetrieveParametersDelegate = new EndOperationDelegate(this.OnEndTestSet_RetrieveParameters);
            }
            if ((this.onTestSet_RetrieveParametersCompletedDelegate == null)) {
                this.onTestSet_RetrieveParametersCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTestSet_RetrieveParametersCompleted);
            }
            base.InvokeAsync(this.onBeginTestSet_RetrieveParametersDelegate, new object[] {
                        testSetId}, this.onEndTestSet_RetrieveParametersDelegate, this.onTestSet_RetrieveParametersCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestSetTestCaseParameter[] TestSet_RetrieveTestCaseParameters(int testSetId, int testSetTestCaseId) {
            return base.Channel.TestSet_RetrieveTestCaseParameters(testSetId, testSetTestCaseId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTestSet_RetrieveTestCaseParameters(int testSetId, int testSetTestCaseId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTestSet_RetrieveTestCaseParameters(testSetId, testSetTestCaseId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestSetTestCaseParameter[] EndTestSet_RetrieveTestCaseParameters(System.IAsyncResult result) {
            return base.Channel.EndTestSet_RetrieveTestCaseParameters(result);
        }
        
        private System.IAsyncResult OnBeginTestSet_RetrieveTestCaseParameters(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int testSetId = ((int)(inValues[0]));
            int testSetTestCaseId = ((int)(inValues[1]));
            return this.BeginTestSet_RetrieveTestCaseParameters(testSetId, testSetTestCaseId, callback, asyncState);
        }
        
        private object[] OnEndTestSet_RetrieveTestCaseParameters(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestSetTestCaseParameter[] retVal = this.EndTestSet_RetrieveTestCaseParameters(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTestSet_RetrieveTestCaseParametersCompleted(object state) {
            if ((this.TestSet_RetrieveTestCaseParametersCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TestSet_RetrieveTestCaseParametersCompleted(this, new TestSet_RetrieveTestCaseParametersCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TestSet_RetrieveTestCaseParametersAsync(int testSetId, int testSetTestCaseId) {
            this.TestSet_RetrieveTestCaseParametersAsync(testSetId, testSetTestCaseId, null);
        }
        
        public void TestSet_RetrieveTestCaseParametersAsync(int testSetId, int testSetTestCaseId, object userState) {
            if ((this.onBeginTestSet_RetrieveTestCaseParametersDelegate == null)) {
                this.onBeginTestSet_RetrieveTestCaseParametersDelegate = new BeginOperationDelegate(this.OnBeginTestSet_RetrieveTestCaseParameters);
            }
            if ((this.onEndTestSet_RetrieveTestCaseParametersDelegate == null)) {
                this.onEndTestSet_RetrieveTestCaseParametersDelegate = new EndOperationDelegate(this.OnEndTestSet_RetrieveTestCaseParameters);
            }
            if ((this.onTestSet_RetrieveTestCaseParametersCompletedDelegate == null)) {
                this.onTestSet_RetrieveTestCaseParametersCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTestSet_RetrieveTestCaseParametersCompleted);
            }
            base.InvokeAsync(this.onBeginTestSet_RetrieveTestCaseParametersDelegate, new object[] {
                        testSetId,
                        testSetTestCaseId}, this.onEndTestSet_RetrieveTestCaseParametersDelegate, this.onTestSet_RetrieveTestCaseParametersCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestConfigurationSet TestConfiguration_RetrieveForTestSet(int testSetId) {
            return base.Channel.TestConfiguration_RetrieveForTestSet(testSetId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTestConfiguration_RetrieveForTestSet(int testSetId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTestConfiguration_RetrieveForTestSet(testSetId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestConfigurationSet EndTestConfiguration_RetrieveForTestSet(System.IAsyncResult result) {
            return base.Channel.EndTestConfiguration_RetrieveForTestSet(result);
        }
        
        private System.IAsyncResult OnBeginTestConfiguration_RetrieveForTestSet(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int testSetId = ((int)(inValues[0]));
            return this.BeginTestConfiguration_RetrieveForTestSet(testSetId, callback, asyncState);
        }
        
        private object[] OnEndTestConfiguration_RetrieveForTestSet(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestConfigurationSet retVal = this.EndTestConfiguration_RetrieveForTestSet(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTestConfiguration_RetrieveForTestSetCompleted(object state) {
            if ((this.TestConfiguration_RetrieveForTestSetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TestConfiguration_RetrieveForTestSetCompleted(this, new TestConfiguration_RetrieveForTestSetCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TestConfiguration_RetrieveForTestSetAsync(int testSetId) {
            this.TestConfiguration_RetrieveForTestSetAsync(testSetId, null);
        }
        
        public void TestConfiguration_RetrieveForTestSetAsync(int testSetId, object userState) {
            if ((this.onBeginTestConfiguration_RetrieveForTestSetDelegate == null)) {
                this.onBeginTestConfiguration_RetrieveForTestSetDelegate = new BeginOperationDelegate(this.OnBeginTestConfiguration_RetrieveForTestSet);
            }
            if ((this.onEndTestConfiguration_RetrieveForTestSetDelegate == null)) {
                this.onEndTestConfiguration_RetrieveForTestSetDelegate = new EndOperationDelegate(this.OnEndTestConfiguration_RetrieveForTestSet);
            }
            if ((this.onTestConfiguration_RetrieveForTestSetCompletedDelegate == null)) {
                this.onTestConfiguration_RetrieveForTestSetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTestConfiguration_RetrieveForTestSetCompleted);
            }
            base.InvokeAsync(this.onBeginTestConfiguration_RetrieveForTestSetDelegate, new object[] {
                        testSetId}, this.onEndTestConfiguration_RetrieveForTestSetDelegate, this.onTestConfiguration_RetrieveForTestSetCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestConfigurationSet TestConfiguration_RetrieveSetById(int testConfigurationSetId) {
            return base.Channel.TestConfiguration_RetrieveSetById(testConfigurationSetId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTestConfiguration_RetrieveSetById(int testConfigurationSetId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTestConfiguration_RetrieveSetById(testConfigurationSetId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestConfigurationSet EndTestConfiguration_RetrieveSetById(System.IAsyncResult result) {
            return base.Channel.EndTestConfiguration_RetrieveSetById(result);
        }
        
        private System.IAsyncResult OnBeginTestConfiguration_RetrieveSetById(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int testConfigurationSetId = ((int)(inValues[0]));
            return this.BeginTestConfiguration_RetrieveSetById(testConfigurationSetId, callback, asyncState);
        }
        
        private object[] OnEndTestConfiguration_RetrieveSetById(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestConfigurationSet retVal = this.EndTestConfiguration_RetrieveSetById(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTestConfiguration_RetrieveSetByIdCompleted(object state) {
            if ((this.TestConfiguration_RetrieveSetByIdCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TestConfiguration_RetrieveSetByIdCompleted(this, new TestConfiguration_RetrieveSetByIdCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TestConfiguration_RetrieveSetByIdAsync(int testConfigurationSetId) {
            this.TestConfiguration_RetrieveSetByIdAsync(testConfigurationSetId, null);
        }
        
        public void TestConfiguration_RetrieveSetByIdAsync(int testConfigurationSetId, object userState) {
            if ((this.onBeginTestConfiguration_RetrieveSetByIdDelegate == null)) {
                this.onBeginTestConfiguration_RetrieveSetByIdDelegate = new BeginOperationDelegate(this.OnBeginTestConfiguration_RetrieveSetById);
            }
            if ((this.onEndTestConfiguration_RetrieveSetByIdDelegate == null)) {
                this.onEndTestConfiguration_RetrieveSetByIdDelegate = new EndOperationDelegate(this.OnEndTestConfiguration_RetrieveSetById);
            }
            if ((this.onTestConfiguration_RetrieveSetByIdCompletedDelegate == null)) {
                this.onTestConfiguration_RetrieveSetByIdCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTestConfiguration_RetrieveSetByIdCompleted);
            }
            base.InvokeAsync(this.onBeginTestConfiguration_RetrieveSetByIdDelegate, new object[] {
                        testConfigurationSetId}, this.onEndTestConfiguration_RetrieveSetByIdDelegate, this.onTestConfiguration_RetrieveSetByIdCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestConfigurationSet[] TestConfiguration_RetrieveSets() {
            return base.Channel.TestConfiguration_RetrieveSets();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTestConfiguration_RetrieveSets(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTestConfiguration_RetrieveSets(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestConfigurationSet[] EndTestConfiguration_RetrieveSets(System.IAsyncResult result) {
            return base.Channel.EndTestConfiguration_RetrieveSets(result);
        }
        
        private System.IAsyncResult OnBeginTestConfiguration_RetrieveSets(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginTestConfiguration_RetrieveSets(callback, asyncState);
        }
        
        private object[] OnEndTestConfiguration_RetrieveSets(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteTestConfigurationSet[] retVal = this.EndTestConfiguration_RetrieveSets(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTestConfiguration_RetrieveSetsCompleted(object state) {
            if ((this.TestConfiguration_RetrieveSetsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TestConfiguration_RetrieveSetsCompleted(this, new TestConfiguration_RetrieveSetsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TestConfiguration_RetrieveSetsAsync() {
            this.TestConfiguration_RetrieveSetsAsync(null);
        }
        
        public void TestConfiguration_RetrieveSetsAsync(object userState) {
            if ((this.onBeginTestConfiguration_RetrieveSetsDelegate == null)) {
                this.onBeginTestConfiguration_RetrieveSetsDelegate = new BeginOperationDelegate(this.OnBeginTestConfiguration_RetrieveSets);
            }
            if ((this.onEndTestConfiguration_RetrieveSetsDelegate == null)) {
                this.onEndTestConfiguration_RetrieveSetsDelegate = new EndOperationDelegate(this.OnEndTestConfiguration_RetrieveSets);
            }
            if ((this.onTestConfiguration_RetrieveSetsCompletedDelegate == null)) {
                this.onTestConfiguration_RetrieveSetsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTestConfiguration_RetrieveSetsCompleted);
            }
            base.InvokeAsync(this.onBeginTestConfiguration_RetrieveSetsDelegate, null, this.onEndTestConfiguration_RetrieveSetsDelegate, this.onTestConfiguration_RetrieveSetsCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteUser User_Create(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteUser remoteUser, string password, string passwordQuestion, string passwordAnswer, System.Nullable<int> projectRoleId) {
            return base.Channel.User_Create(remoteUser, password, passwordQuestion, passwordAnswer, projectRoleId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUser_Create(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteUser remoteUser, string password, string passwordQuestion, string passwordAnswer, System.Nullable<int> projectRoleId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUser_Create(remoteUser, password, passwordQuestion, passwordAnswer, projectRoleId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteUser EndUser_Create(System.IAsyncResult result) {
            return base.Channel.EndUser_Create(result);
        }
        
        private System.IAsyncResult OnBeginUser_Create(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteUser remoteUser = ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteUser)(inValues[0]));
            string password = ((string)(inValues[1]));
            string passwordQuestion = ((string)(inValues[2]));
            string passwordAnswer = ((string)(inValues[3]));
            System.Nullable<int> projectRoleId = ((System.Nullable<int>)(inValues[4]));
            return this.BeginUser_Create(remoteUser, password, passwordQuestion, passwordAnswer, projectRoleId, callback, asyncState);
        }
        
        private object[] OnEndUser_Create(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteUser retVal = this.EndUser_Create(result);
            return new object[] {
                    retVal};
        }
        
        private void OnUser_CreateCompleted(object state) {
            if ((this.User_CreateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.User_CreateCompleted(this, new User_CreateCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void User_CreateAsync(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteUser remoteUser, string password, string passwordQuestion, string passwordAnswer, System.Nullable<int> projectRoleId) {
            this.User_CreateAsync(remoteUser, password, passwordQuestion, passwordAnswer, projectRoleId, null);
        }
        
        public void User_CreateAsync(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteUser remoteUser, string password, string passwordQuestion, string passwordAnswer, System.Nullable<int> projectRoleId, object userState) {
            if ((this.onBeginUser_CreateDelegate == null)) {
                this.onBeginUser_CreateDelegate = new BeginOperationDelegate(this.OnBeginUser_Create);
            }
            if ((this.onEndUser_CreateDelegate == null)) {
                this.onEndUser_CreateDelegate = new EndOperationDelegate(this.OnEndUser_Create);
            }
            if ((this.onUser_CreateCompletedDelegate == null)) {
                this.onUser_CreateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUser_CreateCompleted);
            }
            base.InvokeAsync(this.onBeginUser_CreateDelegate, new object[] {
                        remoteUser,
                        password,
                        passwordQuestion,
                        passwordAnswer,
                        projectRoleId}, this.onEndUser_CreateDelegate, this.onUser_CreateCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteUser User_RetrieveById(int userId) {
            return base.Channel.User_RetrieveById(userId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUser_RetrieveById(int userId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUser_RetrieveById(userId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteUser EndUser_RetrieveById(System.IAsyncResult result) {
            return base.Channel.EndUser_RetrieveById(result);
        }
        
        private System.IAsyncResult OnBeginUser_RetrieveById(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int userId = ((int)(inValues[0]));
            return this.BeginUser_RetrieveById(userId, callback, asyncState);
        }
        
        private object[] OnEndUser_RetrieveById(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteUser retVal = this.EndUser_RetrieveById(result);
            return new object[] {
                    retVal};
        }
        
        private void OnUser_RetrieveByIdCompleted(object state) {
            if ((this.User_RetrieveByIdCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.User_RetrieveByIdCompleted(this, new User_RetrieveByIdCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void User_RetrieveByIdAsync(int userId) {
            this.User_RetrieveByIdAsync(userId, null);
        }
        
        public void User_RetrieveByIdAsync(int userId, object userState) {
            if ((this.onBeginUser_RetrieveByIdDelegate == null)) {
                this.onBeginUser_RetrieveByIdDelegate = new BeginOperationDelegate(this.OnBeginUser_RetrieveById);
            }
            if ((this.onEndUser_RetrieveByIdDelegate == null)) {
                this.onEndUser_RetrieveByIdDelegate = new EndOperationDelegate(this.OnEndUser_RetrieveById);
            }
            if ((this.onUser_RetrieveByIdCompletedDelegate == null)) {
                this.onUser_RetrieveByIdCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUser_RetrieveByIdCompleted);
            }
            base.InvokeAsync(this.onBeginUser_RetrieveByIdDelegate, new object[] {
                        userId}, this.onEndUser_RetrieveByIdDelegate, this.onUser_RetrieveByIdCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteUser User_RetrieveByUserName(string userName, bool includeInactive) {
            return base.Channel.User_RetrieveByUserName(userName, includeInactive);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUser_RetrieveByUserName(string userName, bool includeInactive, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUser_RetrieveByUserName(userName, includeInactive, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteUser EndUser_RetrieveByUserName(System.IAsyncResult result) {
            return base.Channel.EndUser_RetrieveByUserName(result);
        }
        
        private System.IAsyncResult OnBeginUser_RetrieveByUserName(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string userName = ((string)(inValues[0]));
            bool includeInactive = ((bool)(inValues[1]));
            return this.BeginUser_RetrieveByUserName(userName, includeInactive, callback, asyncState);
        }
        
        private object[] OnEndUser_RetrieveByUserName(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteUser retVal = this.EndUser_RetrieveByUserName(result);
            return new object[] {
                    retVal};
        }
        
        private void OnUser_RetrieveByUserNameCompleted(object state) {
            if ((this.User_RetrieveByUserNameCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.User_RetrieveByUserNameCompleted(this, new User_RetrieveByUserNameCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void User_RetrieveByUserNameAsync(string userName, bool includeInactive) {
            this.User_RetrieveByUserNameAsync(userName, includeInactive, null);
        }
        
        public void User_RetrieveByUserNameAsync(string userName, bool includeInactive, object userState) {
            if ((this.onBeginUser_RetrieveByUserNameDelegate == null)) {
                this.onBeginUser_RetrieveByUserNameDelegate = new BeginOperationDelegate(this.OnBeginUser_RetrieveByUserName);
            }
            if ((this.onEndUser_RetrieveByUserNameDelegate == null)) {
                this.onEndUser_RetrieveByUserNameDelegate = new EndOperationDelegate(this.OnEndUser_RetrieveByUserName);
            }
            if ((this.onUser_RetrieveByUserNameCompletedDelegate == null)) {
                this.onUser_RetrieveByUserNameCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUser_RetrieveByUserNameCompleted);
            }
            base.InvokeAsync(this.onBeginUser_RetrieveByUserNameDelegate, new object[] {
                        userName,
                        includeInactive}, this.onEndUser_RetrieveByUserNameDelegate, this.onUser_RetrieveByUserNameCompletedDelegate, userState);
        }
        
        public void User_Delete(int userId) {
            base.Channel.User_Delete(userId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUser_Delete(int userId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUser_Delete(userId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndUser_Delete(System.IAsyncResult result) {
            base.Channel.EndUser_Delete(result);
        }
        
        private System.IAsyncResult OnBeginUser_Delete(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int userId = ((int)(inValues[0]));
            return this.BeginUser_Delete(userId, callback, asyncState);
        }
        
        private object[] OnEndUser_Delete(System.IAsyncResult result) {
            this.EndUser_Delete(result);
            return null;
        }
        
        private void OnUser_DeleteCompleted(object state) {
            if ((this.User_DeleteCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.User_DeleteCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void User_DeleteAsync(int userId) {
            this.User_DeleteAsync(userId, null);
        }
        
        public void User_DeleteAsync(int userId, object userState) {
            if ((this.onBeginUser_DeleteDelegate == null)) {
                this.onBeginUser_DeleteDelegate = new BeginOperationDelegate(this.OnBeginUser_Delete);
            }
            if ((this.onEndUser_DeleteDelegate == null)) {
                this.onEndUser_DeleteDelegate = new EndOperationDelegate(this.OnEndUser_Delete);
            }
            if ((this.onUser_DeleteCompletedDelegate == null)) {
                this.onUser_DeleteCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUser_DeleteCompleted);
            }
            base.InvokeAsync(this.onBeginUser_DeleteDelegate, new object[] {
                        userId}, this.onEndUser_DeleteDelegate, this.onUser_DeleteCompletedDelegate, userState);
        }
        
        public void User_Update(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteUser remoteUser) {
            base.Channel.User_Update(remoteUser);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUser_Update(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteUser remoteUser, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUser_Update(remoteUser, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndUser_Update(System.IAsyncResult result) {
            base.Channel.EndUser_Update(result);
        }
        
        private System.IAsyncResult OnBeginUser_Update(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteUser remoteUser = ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteUser)(inValues[0]));
            return this.BeginUser_Update(remoteUser, callback, asyncState);
        }
        
        private object[] OnEndUser_Update(System.IAsyncResult result) {
            this.EndUser_Update(result);
            return null;
        }
        
        private void OnUser_UpdateCompleted(object state) {
            if ((this.User_UpdateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.User_UpdateCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void User_UpdateAsync(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteUser remoteUser) {
            this.User_UpdateAsync(remoteUser, null);
        }
        
        public void User_UpdateAsync(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteUser remoteUser, object userState) {
            if ((this.onBeginUser_UpdateDelegate == null)) {
                this.onBeginUser_UpdateDelegate = new BeginOperationDelegate(this.OnBeginUser_Update);
            }
            if ((this.onEndUser_UpdateDelegate == null)) {
                this.onEndUser_UpdateDelegate = new EndOperationDelegate(this.OnEndUser_Update);
            }
            if ((this.onUser_UpdateCompletedDelegate == null)) {
                this.onUser_UpdateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUser_UpdateCompleted);
            }
            base.InvokeAsync(this.onBeginUser_UpdateDelegate, new object[] {
                        remoteUser}, this.onEndUser_UpdateDelegate, this.onUser_UpdateCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteUser[] User_Retrieve() {
            return base.Channel.User_Retrieve();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUser_Retrieve(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUser_Retrieve(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteUser[] EndUser_Retrieve(System.IAsyncResult result) {
            return base.Channel.EndUser_Retrieve(result);
        }
        
        private System.IAsyncResult OnBeginUser_Retrieve(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginUser_Retrieve(callback, asyncState);
        }
        
        private object[] OnEndUser_Retrieve(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteUser[] retVal = this.EndUser_Retrieve(result);
            return new object[] {
                    retVal};
        }
        
        private void OnUser_RetrieveCompleted(object state) {
            if ((this.User_RetrieveCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.User_RetrieveCompleted(this, new User_RetrieveCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void User_RetrieveAsync() {
            this.User_RetrieveAsync(null);
        }
        
        public void User_RetrieveAsync(object userState) {
            if ((this.onBeginUser_RetrieveDelegate == null)) {
                this.onBeginUser_RetrieveDelegate = new BeginOperationDelegate(this.OnBeginUser_Retrieve);
            }
            if ((this.onEndUser_RetrieveDelegate == null)) {
                this.onEndUser_RetrieveDelegate = new EndOperationDelegate(this.OnEndUser_Retrieve);
            }
            if ((this.onUser_RetrieveCompletedDelegate == null)) {
                this.onUser_RetrieveCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUser_RetrieveCompleted);
            }
            base.InvokeAsync(this.onBeginUser_RetrieveDelegate, null, this.onEndUser_RetrieveDelegate, this.onUser_RetrieveCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteUser[] User_RetrieveContacts() {
            return base.Channel.User_RetrieveContacts();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUser_RetrieveContacts(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUser_RetrieveContacts(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteUser[] EndUser_RetrieveContacts(System.IAsyncResult result) {
            return base.Channel.EndUser_RetrieveContacts(result);
        }
        
        private System.IAsyncResult OnBeginUser_RetrieveContacts(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginUser_RetrieveContacts(callback, asyncState);
        }
        
        private object[] OnEndUser_RetrieveContacts(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteUser[] retVal = this.EndUser_RetrieveContacts(result);
            return new object[] {
                    retVal};
        }
        
        private void OnUser_RetrieveContactsCompleted(object state) {
            if ((this.User_RetrieveContactsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.User_RetrieveContactsCompleted(this, new User_RetrieveContactsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void User_RetrieveContactsAsync() {
            this.User_RetrieveContactsAsync(null);
        }
        
        public void User_RetrieveContactsAsync(object userState) {
            if ((this.onBeginUser_RetrieveContactsDelegate == null)) {
                this.onBeginUser_RetrieveContactsDelegate = new BeginOperationDelegate(this.OnBeginUser_RetrieveContacts);
            }
            if ((this.onEndUser_RetrieveContactsDelegate == null)) {
                this.onEndUser_RetrieveContactsDelegate = new EndOperationDelegate(this.OnEndUser_RetrieveContacts);
            }
            if ((this.onUser_RetrieveContactsCompletedDelegate == null)) {
                this.onUser_RetrieveContactsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUser_RetrieveContactsCompleted);
            }
            base.InvokeAsync(this.onBeginUser_RetrieveContactsDelegate, null, this.onEndUser_RetrieveContactsDelegate, this.onUser_RetrieveContactsCompletedDelegate, userState);
        }
        
        public void User_AddContact(int userId) {
            base.Channel.User_AddContact(userId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUser_AddContact(int userId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUser_AddContact(userId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndUser_AddContact(System.IAsyncResult result) {
            base.Channel.EndUser_AddContact(result);
        }
        
        private System.IAsyncResult OnBeginUser_AddContact(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int userId = ((int)(inValues[0]));
            return this.BeginUser_AddContact(userId, callback, asyncState);
        }
        
        private object[] OnEndUser_AddContact(System.IAsyncResult result) {
            this.EndUser_AddContact(result);
            return null;
        }
        
        private void OnUser_AddContactCompleted(object state) {
            if ((this.User_AddContactCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.User_AddContactCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void User_AddContactAsync(int userId) {
            this.User_AddContactAsync(userId, null);
        }
        
        public void User_AddContactAsync(int userId, object userState) {
            if ((this.onBeginUser_AddContactDelegate == null)) {
                this.onBeginUser_AddContactDelegate = new BeginOperationDelegate(this.OnBeginUser_AddContact);
            }
            if ((this.onEndUser_AddContactDelegate == null)) {
                this.onEndUser_AddContactDelegate = new EndOperationDelegate(this.OnEndUser_AddContact);
            }
            if ((this.onUser_AddContactCompletedDelegate == null)) {
                this.onUser_AddContactCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUser_AddContactCompleted);
            }
            base.InvokeAsync(this.onBeginUser_AddContactDelegate, new object[] {
                        userId}, this.onEndUser_AddContactDelegate, this.onUser_AddContactCompletedDelegate, userState);
        }
        
        public void User_RemoveContact(int userId) {
            base.Channel.User_RemoveContact(userId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUser_RemoveContact(int userId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUser_RemoveContact(userId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndUser_RemoveContact(System.IAsyncResult result) {
            base.Channel.EndUser_RemoveContact(result);
        }
        
        private System.IAsyncResult OnBeginUser_RemoveContact(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int userId = ((int)(inValues[0]));
            return this.BeginUser_RemoveContact(userId, callback, asyncState);
        }
        
        private object[] OnEndUser_RemoveContact(System.IAsyncResult result) {
            this.EndUser_RemoveContact(result);
            return null;
        }
        
        private void OnUser_RemoveContactCompleted(object state) {
            if ((this.User_RemoveContactCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.User_RemoveContactCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void User_RemoveContactAsync(int userId) {
            this.User_RemoveContactAsync(userId, null);
        }
        
        public void User_RemoveContactAsync(int userId, object userState) {
            if ((this.onBeginUser_RemoveContactDelegate == null)) {
                this.onBeginUser_RemoveContactDelegate = new BeginOperationDelegate(this.OnBeginUser_RemoveContact);
            }
            if ((this.onEndUser_RemoveContactDelegate == null)) {
                this.onEndUser_RemoveContactDelegate = new EndOperationDelegate(this.OnEndUser_RemoveContact);
            }
            if ((this.onUser_RemoveContactCompletedDelegate == null)) {
                this.onUser_RemoveContactCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUser_RemoveContactCompleted);
            }
            base.InvokeAsync(this.onBeginUser_RemoveContactDelegate, new object[] {
                        userId}, this.onEndUser_RemoveContactDelegate, this.onUser_RemoveContactCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAutomationHost[] AutomationHost_Retrieve(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSort remoteSort, int startingRow, int numberOfRows) {
            return base.Channel.AutomationHost_Retrieve(remoteFilters, remoteSort, startingRow, numberOfRows);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginAutomationHost_Retrieve(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSort remoteSort, int startingRow, int numberOfRows, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAutomationHost_Retrieve(remoteFilters, remoteSort, startingRow, numberOfRows, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAutomationHost[] EndAutomationHost_Retrieve(System.IAsyncResult result) {
            return base.Channel.EndAutomationHost_Retrieve(result);
        }
        
        private System.IAsyncResult OnBeginAutomationHost_Retrieve(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters = ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[])(inValues[0]));
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSort remoteSort = ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSort)(inValues[1]));
            int startingRow = ((int)(inValues[2]));
            int numberOfRows = ((int)(inValues[3]));
            return this.BeginAutomationHost_Retrieve(remoteFilters, remoteSort, startingRow, numberOfRows, callback, asyncState);
        }
        
        private object[] OnEndAutomationHost_Retrieve(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAutomationHost[] retVal = this.EndAutomationHost_Retrieve(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAutomationHost_RetrieveCompleted(object state) {
            if ((this.AutomationHost_RetrieveCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AutomationHost_RetrieveCompleted(this, new AutomationHost_RetrieveCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AutomationHost_RetrieveAsync(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSort remoteSort, int startingRow, int numberOfRows) {
            this.AutomationHost_RetrieveAsync(remoteFilters, remoteSort, startingRow, numberOfRows, null);
        }
        
        public void AutomationHost_RetrieveAsync(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSort remoteSort, int startingRow, int numberOfRows, object userState) {
            if ((this.onBeginAutomationHost_RetrieveDelegate == null)) {
                this.onBeginAutomationHost_RetrieveDelegate = new BeginOperationDelegate(this.OnBeginAutomationHost_Retrieve);
            }
            if ((this.onEndAutomationHost_RetrieveDelegate == null)) {
                this.onEndAutomationHost_RetrieveDelegate = new EndOperationDelegate(this.OnEndAutomationHost_Retrieve);
            }
            if ((this.onAutomationHost_RetrieveCompletedDelegate == null)) {
                this.onAutomationHost_RetrieveCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAutomationHost_RetrieveCompleted);
            }
            base.InvokeAsync(this.onBeginAutomationHost_RetrieveDelegate, new object[] {
                        remoteFilters,
                        remoteSort,
                        startingRow,
                        numberOfRows}, this.onEndAutomationHost_RetrieveDelegate, this.onAutomationHost_RetrieveCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAutomationHost AutomationHost_RetrieveById(int automationHostId) {
            return base.Channel.AutomationHost_RetrieveById(automationHostId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginAutomationHost_RetrieveById(int automationHostId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAutomationHost_RetrieveById(automationHostId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAutomationHost EndAutomationHost_RetrieveById(System.IAsyncResult result) {
            return base.Channel.EndAutomationHost_RetrieveById(result);
        }
        
        private System.IAsyncResult OnBeginAutomationHost_RetrieveById(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int automationHostId = ((int)(inValues[0]));
            return this.BeginAutomationHost_RetrieveById(automationHostId, callback, asyncState);
        }
        
        private object[] OnEndAutomationHost_RetrieveById(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAutomationHost retVal = this.EndAutomationHost_RetrieveById(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAutomationHost_RetrieveByIdCompleted(object state) {
            if ((this.AutomationHost_RetrieveByIdCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AutomationHost_RetrieveByIdCompleted(this, new AutomationHost_RetrieveByIdCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AutomationHost_RetrieveByIdAsync(int automationHostId) {
            this.AutomationHost_RetrieveByIdAsync(automationHostId, null);
        }
        
        public void AutomationHost_RetrieveByIdAsync(int automationHostId, object userState) {
            if ((this.onBeginAutomationHost_RetrieveByIdDelegate == null)) {
                this.onBeginAutomationHost_RetrieveByIdDelegate = new BeginOperationDelegate(this.OnBeginAutomationHost_RetrieveById);
            }
            if ((this.onEndAutomationHost_RetrieveByIdDelegate == null)) {
                this.onEndAutomationHost_RetrieveByIdDelegate = new EndOperationDelegate(this.OnEndAutomationHost_RetrieveById);
            }
            if ((this.onAutomationHost_RetrieveByIdCompletedDelegate == null)) {
                this.onAutomationHost_RetrieveByIdCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAutomationHost_RetrieveByIdCompleted);
            }
            base.InvokeAsync(this.onBeginAutomationHost_RetrieveByIdDelegate, new object[] {
                        automationHostId}, this.onEndAutomationHost_RetrieveByIdDelegate, this.onAutomationHost_RetrieveByIdCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAutomationHost AutomationHost_RetrieveByToken(string token) {
            return base.Channel.AutomationHost_RetrieveByToken(token);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginAutomationHost_RetrieveByToken(string token, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAutomationHost_RetrieveByToken(token, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAutomationHost EndAutomationHost_RetrieveByToken(System.IAsyncResult result) {
            return base.Channel.EndAutomationHost_RetrieveByToken(result);
        }
        
        private System.IAsyncResult OnBeginAutomationHost_RetrieveByToken(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string token = ((string)(inValues[0]));
            return this.BeginAutomationHost_RetrieveByToken(token, callback, asyncState);
        }
        
        private object[] OnEndAutomationHost_RetrieveByToken(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAutomationHost retVal = this.EndAutomationHost_RetrieveByToken(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAutomationHost_RetrieveByTokenCompleted(object state) {
            if ((this.AutomationHost_RetrieveByTokenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AutomationHost_RetrieveByTokenCompleted(this, new AutomationHost_RetrieveByTokenCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AutomationHost_RetrieveByTokenAsync(string token) {
            this.AutomationHost_RetrieveByTokenAsync(token, null);
        }
        
        public void AutomationHost_RetrieveByTokenAsync(string token, object userState) {
            if ((this.onBeginAutomationHost_RetrieveByTokenDelegate == null)) {
                this.onBeginAutomationHost_RetrieveByTokenDelegate = new BeginOperationDelegate(this.OnBeginAutomationHost_RetrieveByToken);
            }
            if ((this.onEndAutomationHost_RetrieveByTokenDelegate == null)) {
                this.onEndAutomationHost_RetrieveByTokenDelegate = new EndOperationDelegate(this.OnEndAutomationHost_RetrieveByToken);
            }
            if ((this.onAutomationHost_RetrieveByTokenCompletedDelegate == null)) {
                this.onAutomationHost_RetrieveByTokenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAutomationHost_RetrieveByTokenCompleted);
            }
            base.InvokeAsync(this.onBeginAutomationHost_RetrieveByTokenDelegate, new object[] {
                        token}, this.onEndAutomationHost_RetrieveByTokenDelegate, this.onAutomationHost_RetrieveByTokenCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAutomationHost AutomationHost_Create(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAutomationHost remoteAutomationHost) {
            return base.Channel.AutomationHost_Create(remoteAutomationHost);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginAutomationHost_Create(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAutomationHost remoteAutomationHost, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAutomationHost_Create(remoteAutomationHost, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAutomationHost EndAutomationHost_Create(System.IAsyncResult result) {
            return base.Channel.EndAutomationHost_Create(result);
        }
        
        private System.IAsyncResult OnBeginAutomationHost_Create(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAutomationHost remoteAutomationHost = ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAutomationHost)(inValues[0]));
            return this.BeginAutomationHost_Create(remoteAutomationHost, callback, asyncState);
        }
        
        private object[] OnEndAutomationHost_Create(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAutomationHost retVal = this.EndAutomationHost_Create(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAutomationHost_CreateCompleted(object state) {
            if ((this.AutomationHost_CreateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AutomationHost_CreateCompleted(this, new AutomationHost_CreateCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AutomationHost_CreateAsync(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAutomationHost remoteAutomationHost) {
            this.AutomationHost_CreateAsync(remoteAutomationHost, null);
        }
        
        public void AutomationHost_CreateAsync(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAutomationHost remoteAutomationHost, object userState) {
            if ((this.onBeginAutomationHost_CreateDelegate == null)) {
                this.onBeginAutomationHost_CreateDelegate = new BeginOperationDelegate(this.OnBeginAutomationHost_Create);
            }
            if ((this.onEndAutomationHost_CreateDelegate == null)) {
                this.onEndAutomationHost_CreateDelegate = new EndOperationDelegate(this.OnEndAutomationHost_Create);
            }
            if ((this.onAutomationHost_CreateCompletedDelegate == null)) {
                this.onAutomationHost_CreateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAutomationHost_CreateCompleted);
            }
            base.InvokeAsync(this.onBeginAutomationHost_CreateDelegate, new object[] {
                        remoteAutomationHost}, this.onEndAutomationHost_CreateDelegate, this.onAutomationHost_CreateCompletedDelegate, userState);
        }
        
        public void AutomationHost_Update(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAutomationHost remoteAutomationHost) {
            base.Channel.AutomationHost_Update(remoteAutomationHost);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginAutomationHost_Update(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAutomationHost remoteAutomationHost, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAutomationHost_Update(remoteAutomationHost, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndAutomationHost_Update(System.IAsyncResult result) {
            base.Channel.EndAutomationHost_Update(result);
        }
        
        private System.IAsyncResult OnBeginAutomationHost_Update(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAutomationHost remoteAutomationHost = ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAutomationHost)(inValues[0]));
            return this.BeginAutomationHost_Update(remoteAutomationHost, callback, asyncState);
        }
        
        private object[] OnEndAutomationHost_Update(System.IAsyncResult result) {
            this.EndAutomationHost_Update(result);
            return null;
        }
        
        private void OnAutomationHost_UpdateCompleted(object state) {
            if ((this.AutomationHost_UpdateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AutomationHost_UpdateCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AutomationHost_UpdateAsync(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAutomationHost remoteAutomationHost) {
            this.AutomationHost_UpdateAsync(remoteAutomationHost, null);
        }
        
        public void AutomationHost_UpdateAsync(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAutomationHost remoteAutomationHost, object userState) {
            if ((this.onBeginAutomationHost_UpdateDelegate == null)) {
                this.onBeginAutomationHost_UpdateDelegate = new BeginOperationDelegate(this.OnBeginAutomationHost_Update);
            }
            if ((this.onEndAutomationHost_UpdateDelegate == null)) {
                this.onEndAutomationHost_UpdateDelegate = new EndOperationDelegate(this.OnEndAutomationHost_Update);
            }
            if ((this.onAutomationHost_UpdateCompletedDelegate == null)) {
                this.onAutomationHost_UpdateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAutomationHost_UpdateCompleted);
            }
            base.InvokeAsync(this.onBeginAutomationHost_UpdateDelegate, new object[] {
                        remoteAutomationHost}, this.onEndAutomationHost_UpdateDelegate, this.onAutomationHost_UpdateCompletedDelegate, userState);
        }
        
        public void AutomationHost_Delete(int automationHostId) {
            base.Channel.AutomationHost_Delete(automationHostId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginAutomationHost_Delete(int automationHostId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAutomationHost_Delete(automationHostId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndAutomationHost_Delete(System.IAsyncResult result) {
            base.Channel.EndAutomationHost_Delete(result);
        }
        
        private System.IAsyncResult OnBeginAutomationHost_Delete(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int automationHostId = ((int)(inValues[0]));
            return this.BeginAutomationHost_Delete(automationHostId, callback, asyncState);
        }
        
        private object[] OnEndAutomationHost_Delete(System.IAsyncResult result) {
            this.EndAutomationHost_Delete(result);
            return null;
        }
        
        private void OnAutomationHost_DeleteCompleted(object state) {
            if ((this.AutomationHost_DeleteCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AutomationHost_DeleteCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AutomationHost_DeleteAsync(int automationHostId) {
            this.AutomationHost_DeleteAsync(automationHostId, null);
        }
        
        public void AutomationHost_DeleteAsync(int automationHostId, object userState) {
            if ((this.onBeginAutomationHost_DeleteDelegate == null)) {
                this.onBeginAutomationHost_DeleteDelegate = new BeginOperationDelegate(this.OnBeginAutomationHost_Delete);
            }
            if ((this.onEndAutomationHost_DeleteDelegate == null)) {
                this.onEndAutomationHost_DeleteDelegate = new EndOperationDelegate(this.OnEndAutomationHost_Delete);
            }
            if ((this.onAutomationHost_DeleteCompletedDelegate == null)) {
                this.onAutomationHost_DeleteCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAutomationHost_DeleteCompleted);
            }
            base.InvokeAsync(this.onBeginAutomationHost_DeleteDelegate, new object[] {
                        automationHostId}, this.onEndAutomationHost_DeleteDelegate, this.onAutomationHost_DeleteCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAutomationEngine AutomationEngine_RetrieveByToken(string token) {
            return base.Channel.AutomationEngine_RetrieveByToken(token);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginAutomationEngine_RetrieveByToken(string token, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAutomationEngine_RetrieveByToken(token, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAutomationEngine EndAutomationEngine_RetrieveByToken(System.IAsyncResult result) {
            return base.Channel.EndAutomationEngine_RetrieveByToken(result);
        }
        
        private System.IAsyncResult OnBeginAutomationEngine_RetrieveByToken(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string token = ((string)(inValues[0]));
            return this.BeginAutomationEngine_RetrieveByToken(token, callback, asyncState);
        }
        
        private object[] OnEndAutomationEngine_RetrieveByToken(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAutomationEngine retVal = this.EndAutomationEngine_RetrieveByToken(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAutomationEngine_RetrieveByTokenCompleted(object state) {
            if ((this.AutomationEngine_RetrieveByTokenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AutomationEngine_RetrieveByTokenCompleted(this, new AutomationEngine_RetrieveByTokenCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AutomationEngine_RetrieveByTokenAsync(string token) {
            this.AutomationEngine_RetrieveByTokenAsync(token, null);
        }
        
        public void AutomationEngine_RetrieveByTokenAsync(string token, object userState) {
            if ((this.onBeginAutomationEngine_RetrieveByTokenDelegate == null)) {
                this.onBeginAutomationEngine_RetrieveByTokenDelegate = new BeginOperationDelegate(this.OnBeginAutomationEngine_RetrieveByToken);
            }
            if ((this.onEndAutomationEngine_RetrieveByTokenDelegate == null)) {
                this.onEndAutomationEngine_RetrieveByTokenDelegate = new EndOperationDelegate(this.OnEndAutomationEngine_RetrieveByToken);
            }
            if ((this.onAutomationEngine_RetrieveByTokenCompletedDelegate == null)) {
                this.onAutomationEngine_RetrieveByTokenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAutomationEngine_RetrieveByTokenCompleted);
            }
            base.InvokeAsync(this.onBeginAutomationEngine_RetrieveByTokenDelegate, new object[] {
                        token}, this.onEndAutomationEngine_RetrieveByTokenDelegate, this.onAutomationEngine_RetrieveByTokenCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAutomationEngine[] AutomationEngine_Retrieve(bool activeOnly) {
            return base.Channel.AutomationEngine_Retrieve(activeOnly);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginAutomationEngine_Retrieve(bool activeOnly, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAutomationEngine_Retrieve(activeOnly, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAutomationEngine[] EndAutomationEngine_Retrieve(System.IAsyncResult result) {
            return base.Channel.EndAutomationEngine_Retrieve(result);
        }
        
        private System.IAsyncResult OnBeginAutomationEngine_Retrieve(object[] inValues, System.AsyncCallback callback, object asyncState) {
            bool activeOnly = ((bool)(inValues[0]));
            return this.BeginAutomationEngine_Retrieve(activeOnly, callback, asyncState);
        }
        
        private object[] OnEndAutomationEngine_Retrieve(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAutomationEngine[] retVal = this.EndAutomationEngine_Retrieve(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAutomationEngine_RetrieveCompleted(object state) {
            if ((this.AutomationEngine_RetrieveCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AutomationEngine_RetrieveCompleted(this, new AutomationEngine_RetrieveCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AutomationEngine_RetrieveAsync(bool activeOnly) {
            this.AutomationEngine_RetrieveAsync(activeOnly, null);
        }
        
        public void AutomationEngine_RetrieveAsync(bool activeOnly, object userState) {
            if ((this.onBeginAutomationEngine_RetrieveDelegate == null)) {
                this.onBeginAutomationEngine_RetrieveDelegate = new BeginOperationDelegate(this.OnBeginAutomationEngine_Retrieve);
            }
            if ((this.onEndAutomationEngine_RetrieveDelegate == null)) {
                this.onEndAutomationEngine_RetrieveDelegate = new EndOperationDelegate(this.OnEndAutomationEngine_Retrieve);
            }
            if ((this.onAutomationEngine_RetrieveCompletedDelegate == null)) {
                this.onAutomationEngine_RetrieveCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAutomationEngine_RetrieveCompleted);
            }
            base.InvokeAsync(this.onBeginAutomationEngine_RetrieveDelegate, new object[] {
                        activeOnly}, this.onEndAutomationEngine_RetrieveDelegate, this.onAutomationEngine_RetrieveCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAutomationEngine AutomationEngine_Create(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAutomationEngine remoteEngine) {
            return base.Channel.AutomationEngine_Create(remoteEngine);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginAutomationEngine_Create(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAutomationEngine remoteEngine, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAutomationEngine_Create(remoteEngine, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAutomationEngine EndAutomationEngine_Create(System.IAsyncResult result) {
            return base.Channel.EndAutomationEngine_Create(result);
        }
        
        private System.IAsyncResult OnBeginAutomationEngine_Create(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAutomationEngine remoteEngine = ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAutomationEngine)(inValues[0]));
            return this.BeginAutomationEngine_Create(remoteEngine, callback, asyncState);
        }
        
        private object[] OnEndAutomationEngine_Create(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAutomationEngine retVal = this.EndAutomationEngine_Create(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAutomationEngine_CreateCompleted(object state) {
            if ((this.AutomationEngine_CreateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AutomationEngine_CreateCompleted(this, new AutomationEngine_CreateCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AutomationEngine_CreateAsync(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAutomationEngine remoteEngine) {
            this.AutomationEngine_CreateAsync(remoteEngine, null);
        }
        
        public void AutomationEngine_CreateAsync(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAutomationEngine remoteEngine, object userState) {
            if ((this.onBeginAutomationEngine_CreateDelegate == null)) {
                this.onBeginAutomationEngine_CreateDelegate = new BeginOperationDelegate(this.OnBeginAutomationEngine_Create);
            }
            if ((this.onEndAutomationEngine_CreateDelegate == null)) {
                this.onEndAutomationEngine_CreateDelegate = new EndOperationDelegate(this.OnEndAutomationEngine_Create);
            }
            if ((this.onAutomationEngine_CreateCompletedDelegate == null)) {
                this.onAutomationEngine_CreateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAutomationEngine_CreateCompleted);
            }
            base.InvokeAsync(this.onBeginAutomationEngine_CreateDelegate, new object[] {
                        remoteEngine}, this.onEndAutomationEngine_CreateDelegate, this.onAutomationEngine_CreateCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAutomationEngine AutomationEngine_RetrieveById(int automationEngineId) {
            return base.Channel.AutomationEngine_RetrieveById(automationEngineId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginAutomationEngine_RetrieveById(int automationEngineId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAutomationEngine_RetrieveById(automationEngineId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAutomationEngine EndAutomationEngine_RetrieveById(System.IAsyncResult result) {
            return base.Channel.EndAutomationEngine_RetrieveById(result);
        }
        
        private System.IAsyncResult OnBeginAutomationEngine_RetrieveById(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int automationEngineId = ((int)(inValues[0]));
            return this.BeginAutomationEngine_RetrieveById(automationEngineId, callback, asyncState);
        }
        
        private object[] OnEndAutomationEngine_RetrieveById(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAutomationEngine retVal = this.EndAutomationEngine_RetrieveById(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAutomationEngine_RetrieveByIdCompleted(object state) {
            if ((this.AutomationEngine_RetrieveByIdCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AutomationEngine_RetrieveByIdCompleted(this, new AutomationEngine_RetrieveByIdCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AutomationEngine_RetrieveByIdAsync(int automationEngineId) {
            this.AutomationEngine_RetrieveByIdAsync(automationEngineId, null);
        }
        
        public void AutomationEngine_RetrieveByIdAsync(int automationEngineId, object userState) {
            if ((this.onBeginAutomationEngine_RetrieveByIdDelegate == null)) {
                this.onBeginAutomationEngine_RetrieveByIdDelegate = new BeginOperationDelegate(this.OnBeginAutomationEngine_RetrieveById);
            }
            if ((this.onEndAutomationEngine_RetrieveByIdDelegate == null)) {
                this.onEndAutomationEngine_RetrieveByIdDelegate = new EndOperationDelegate(this.OnEndAutomationEngine_RetrieveById);
            }
            if ((this.onAutomationEngine_RetrieveByIdCompletedDelegate == null)) {
                this.onAutomationEngine_RetrieveByIdCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAutomationEngine_RetrieveByIdCompleted);
            }
            base.InvokeAsync(this.onBeginAutomationEngine_RetrieveByIdDelegate, new object[] {
                        automationEngineId}, this.onEndAutomationEngine_RetrieveByIdDelegate, this.onAutomationEngine_RetrieveByIdCompletedDelegate, userState);
        }
        
        public void AutomationEngine_Update(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAutomationEngine remoteEngine) {
            base.Channel.AutomationEngine_Update(remoteEngine);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginAutomationEngine_Update(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAutomationEngine remoteEngine, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAutomationEngine_Update(remoteEngine, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndAutomationEngine_Update(System.IAsyncResult result) {
            base.Channel.EndAutomationEngine_Update(result);
        }
        
        private System.IAsyncResult OnBeginAutomationEngine_Update(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAutomationEngine remoteEngine = ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAutomationEngine)(inValues[0]));
            return this.BeginAutomationEngine_Update(remoteEngine, callback, asyncState);
        }
        
        private object[] OnEndAutomationEngine_Update(System.IAsyncResult result) {
            this.EndAutomationEngine_Update(result);
            return null;
        }
        
        private void OnAutomationEngine_UpdateCompleted(object state) {
            if ((this.AutomationEngine_UpdateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AutomationEngine_UpdateCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AutomationEngine_UpdateAsync(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAutomationEngine remoteEngine) {
            this.AutomationEngine_UpdateAsync(remoteEngine, null);
        }
        
        public void AutomationEngine_UpdateAsync(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAutomationEngine remoteEngine, object userState) {
            if ((this.onBeginAutomationEngine_UpdateDelegate == null)) {
                this.onBeginAutomationEngine_UpdateDelegate = new BeginOperationDelegate(this.OnBeginAutomationEngine_Update);
            }
            if ((this.onEndAutomationEngine_UpdateDelegate == null)) {
                this.onEndAutomationEngine_UpdateDelegate = new EndOperationDelegate(this.OnEndAutomationEngine_Update);
            }
            if ((this.onAutomationEngine_UpdateCompletedDelegate == null)) {
                this.onAutomationEngine_UpdateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAutomationEngine_UpdateCompleted);
            }
            base.InvokeAsync(this.onBeginAutomationEngine_UpdateDelegate, new object[] {
                        remoteEngine}, this.onEndAutomationEngine_UpdateDelegate, this.onAutomationEngine_UpdateCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComponent[] Component_Retrieve(bool activeOnly, bool includeDeleted) {
            return base.Channel.Component_Retrieve(activeOnly, includeDeleted);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginComponent_Retrieve(bool activeOnly, bool includeDeleted, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginComponent_Retrieve(activeOnly, includeDeleted, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComponent[] EndComponent_Retrieve(System.IAsyncResult result) {
            return base.Channel.EndComponent_Retrieve(result);
        }
        
        private System.IAsyncResult OnBeginComponent_Retrieve(object[] inValues, System.AsyncCallback callback, object asyncState) {
            bool activeOnly = ((bool)(inValues[0]));
            bool includeDeleted = ((bool)(inValues[1]));
            return this.BeginComponent_Retrieve(activeOnly, includeDeleted, callback, asyncState);
        }
        
        private object[] OnEndComponent_Retrieve(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComponent[] retVal = this.EndComponent_Retrieve(result);
            return new object[] {
                    retVal};
        }
        
        private void OnComponent_RetrieveCompleted(object state) {
            if ((this.Component_RetrieveCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Component_RetrieveCompleted(this, new Component_RetrieveCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Component_RetrieveAsync(bool activeOnly, bool includeDeleted) {
            this.Component_RetrieveAsync(activeOnly, includeDeleted, null);
        }
        
        public void Component_RetrieveAsync(bool activeOnly, bool includeDeleted, object userState) {
            if ((this.onBeginComponent_RetrieveDelegate == null)) {
                this.onBeginComponent_RetrieveDelegate = new BeginOperationDelegate(this.OnBeginComponent_Retrieve);
            }
            if ((this.onEndComponent_RetrieveDelegate == null)) {
                this.onEndComponent_RetrieveDelegate = new EndOperationDelegate(this.OnEndComponent_Retrieve);
            }
            if ((this.onComponent_RetrieveCompletedDelegate == null)) {
                this.onComponent_RetrieveCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnComponent_RetrieveCompleted);
            }
            base.InvokeAsync(this.onBeginComponent_RetrieveDelegate, new object[] {
                        activeOnly,
                        includeDeleted}, this.onEndComponent_RetrieveDelegate, this.onComponent_RetrieveCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDataSyncSystem[] DataSyncSystem_Retrieve() {
            return base.Channel.DataSyncSystem_Retrieve();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDataSyncSystem_Retrieve(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDataSyncSystem_Retrieve(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDataSyncSystem[] EndDataSyncSystem_Retrieve(System.IAsyncResult result) {
            return base.Channel.EndDataSyncSystem_Retrieve(result);
        }
        
        private System.IAsyncResult OnBeginDataSyncSystem_Retrieve(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginDataSyncSystem_Retrieve(callback, asyncState);
        }
        
        private object[] OnEndDataSyncSystem_Retrieve(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDataSyncSystem[] retVal = this.EndDataSyncSystem_Retrieve(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDataSyncSystem_RetrieveCompleted(object state) {
            if ((this.DataSyncSystem_RetrieveCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DataSyncSystem_RetrieveCompleted(this, new DataSyncSystem_RetrieveCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DataSyncSystem_RetrieveAsync() {
            this.DataSyncSystem_RetrieveAsync(null);
        }
        
        public void DataSyncSystem_RetrieveAsync(object userState) {
            if ((this.onBeginDataSyncSystem_RetrieveDelegate == null)) {
                this.onBeginDataSyncSystem_RetrieveDelegate = new BeginOperationDelegate(this.OnBeginDataSyncSystem_Retrieve);
            }
            if ((this.onEndDataSyncSystem_RetrieveDelegate == null)) {
                this.onEndDataSyncSystem_RetrieveDelegate = new EndOperationDelegate(this.OnEndDataSyncSystem_Retrieve);
            }
            if ((this.onDataSyncSystem_RetrieveCompletedDelegate == null)) {
                this.onDataSyncSystem_RetrieveCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDataSyncSystem_RetrieveCompleted);
            }
            base.InvokeAsync(this.onBeginDataSyncSystem_RetrieveDelegate, null, this.onEndDataSyncSystem_RetrieveDelegate, this.onDataSyncSystem_RetrieveCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDataSyncSystem DataSyncSystem_RetrieveById(int dataSyncSystemId) {
            return base.Channel.DataSyncSystem_RetrieveById(dataSyncSystemId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDataSyncSystem_RetrieveById(int dataSyncSystemId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDataSyncSystem_RetrieveById(dataSyncSystemId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDataSyncSystem EndDataSyncSystem_RetrieveById(System.IAsyncResult result) {
            return base.Channel.EndDataSyncSystem_RetrieveById(result);
        }
        
        private System.IAsyncResult OnBeginDataSyncSystem_RetrieveById(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int dataSyncSystemId = ((int)(inValues[0]));
            return this.BeginDataSyncSystem_RetrieveById(dataSyncSystemId, callback, asyncState);
        }
        
        private object[] OnEndDataSyncSystem_RetrieveById(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDataSyncSystem retVal = this.EndDataSyncSystem_RetrieveById(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDataSyncSystem_RetrieveByIdCompleted(object state) {
            if ((this.DataSyncSystem_RetrieveByIdCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DataSyncSystem_RetrieveByIdCompleted(this, new DataSyncSystem_RetrieveByIdCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DataSyncSystem_RetrieveByIdAsync(int dataSyncSystemId) {
            this.DataSyncSystem_RetrieveByIdAsync(dataSyncSystemId, null);
        }
        
        public void DataSyncSystem_RetrieveByIdAsync(int dataSyncSystemId, object userState) {
            if ((this.onBeginDataSyncSystem_RetrieveByIdDelegate == null)) {
                this.onBeginDataSyncSystem_RetrieveByIdDelegate = new BeginOperationDelegate(this.OnBeginDataSyncSystem_RetrieveById);
            }
            if ((this.onEndDataSyncSystem_RetrieveByIdDelegate == null)) {
                this.onEndDataSyncSystem_RetrieveByIdDelegate = new EndOperationDelegate(this.OnEndDataSyncSystem_RetrieveById);
            }
            if ((this.onDataSyncSystem_RetrieveByIdCompletedDelegate == null)) {
                this.onDataSyncSystem_RetrieveByIdCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDataSyncSystem_RetrieveByIdCompleted);
            }
            base.InvokeAsync(this.onBeginDataSyncSystem_RetrieveByIdDelegate, new object[] {
                        dataSyncSystemId}, this.onEndDataSyncSystem_RetrieveByIdDelegate, this.onDataSyncSystem_RetrieveByIdCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDataSyncSystem DataSyncSystem_Create(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDataSyncSystem remoteDataSyncSystem) {
            return base.Channel.DataSyncSystem_Create(remoteDataSyncSystem);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDataSyncSystem_Create(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDataSyncSystem remoteDataSyncSystem, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDataSyncSystem_Create(remoteDataSyncSystem, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDataSyncSystem EndDataSyncSystem_Create(System.IAsyncResult result) {
            return base.Channel.EndDataSyncSystem_Create(result);
        }
        
        private System.IAsyncResult OnBeginDataSyncSystem_Create(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDataSyncSystem remoteDataSyncSystem = ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDataSyncSystem)(inValues[0]));
            return this.BeginDataSyncSystem_Create(remoteDataSyncSystem, callback, asyncState);
        }
        
        private object[] OnEndDataSyncSystem_Create(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDataSyncSystem retVal = this.EndDataSyncSystem_Create(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDataSyncSystem_CreateCompleted(object state) {
            if ((this.DataSyncSystem_CreateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DataSyncSystem_CreateCompleted(this, new DataSyncSystem_CreateCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DataSyncSystem_CreateAsync(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDataSyncSystem remoteDataSyncSystem) {
            this.DataSyncSystem_CreateAsync(remoteDataSyncSystem, null);
        }
        
        public void DataSyncSystem_CreateAsync(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDataSyncSystem remoteDataSyncSystem, object userState) {
            if ((this.onBeginDataSyncSystem_CreateDelegate == null)) {
                this.onBeginDataSyncSystem_CreateDelegate = new BeginOperationDelegate(this.OnBeginDataSyncSystem_Create);
            }
            if ((this.onEndDataSyncSystem_CreateDelegate == null)) {
                this.onEndDataSyncSystem_CreateDelegate = new EndOperationDelegate(this.OnEndDataSyncSystem_Create);
            }
            if ((this.onDataSyncSystem_CreateCompletedDelegate == null)) {
                this.onDataSyncSystem_CreateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDataSyncSystem_CreateCompleted);
            }
            base.InvokeAsync(this.onBeginDataSyncSystem_CreateDelegate, new object[] {
                        remoteDataSyncSystem}, this.onEndDataSyncSystem_CreateDelegate, this.onDataSyncSystem_CreateCompletedDelegate, userState);
        }
        
        public void DataSyncSystem_Update(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDataSyncSystem remoteDataSyncSystem) {
            base.Channel.DataSyncSystem_Update(remoteDataSyncSystem);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDataSyncSystem_Update(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDataSyncSystem remoteDataSyncSystem, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDataSyncSystem_Update(remoteDataSyncSystem, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndDataSyncSystem_Update(System.IAsyncResult result) {
            base.Channel.EndDataSyncSystem_Update(result);
        }
        
        private System.IAsyncResult OnBeginDataSyncSystem_Update(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDataSyncSystem remoteDataSyncSystem = ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDataSyncSystem)(inValues[0]));
            return this.BeginDataSyncSystem_Update(remoteDataSyncSystem, callback, asyncState);
        }
        
        private object[] OnEndDataSyncSystem_Update(System.IAsyncResult result) {
            this.EndDataSyncSystem_Update(result);
            return null;
        }
        
        private void OnDataSyncSystem_UpdateCompleted(object state) {
            if ((this.DataSyncSystem_UpdateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DataSyncSystem_UpdateCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DataSyncSystem_UpdateAsync(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDataSyncSystem remoteDataSyncSystem) {
            this.DataSyncSystem_UpdateAsync(remoteDataSyncSystem, null);
        }
        
        public void DataSyncSystem_UpdateAsync(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDataSyncSystem remoteDataSyncSystem, object userState) {
            if ((this.onBeginDataSyncSystem_UpdateDelegate == null)) {
                this.onBeginDataSyncSystem_UpdateDelegate = new BeginOperationDelegate(this.OnBeginDataSyncSystem_Update);
            }
            if ((this.onEndDataSyncSystem_UpdateDelegate == null)) {
                this.onEndDataSyncSystem_UpdateDelegate = new EndOperationDelegate(this.OnEndDataSyncSystem_Update);
            }
            if ((this.onDataSyncSystem_UpdateCompletedDelegate == null)) {
                this.onDataSyncSystem_UpdateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDataSyncSystem_UpdateCompleted);
            }
            base.InvokeAsync(this.onBeginDataSyncSystem_UpdateDelegate, new object[] {
                        remoteDataSyncSystem}, this.onEndDataSyncSystem_UpdateDelegate, this.onDataSyncSystem_UpdateCompletedDelegate, userState);
        }
        
        public void DataSyncSystem_SaveRunFailure(int dataSyncSystemId) {
            base.Channel.DataSyncSystem_SaveRunFailure(dataSyncSystemId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDataSyncSystem_SaveRunFailure(int dataSyncSystemId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDataSyncSystem_SaveRunFailure(dataSyncSystemId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndDataSyncSystem_SaveRunFailure(System.IAsyncResult result) {
            base.Channel.EndDataSyncSystem_SaveRunFailure(result);
        }
        
        private System.IAsyncResult OnBeginDataSyncSystem_SaveRunFailure(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int dataSyncSystemId = ((int)(inValues[0]));
            return this.BeginDataSyncSystem_SaveRunFailure(dataSyncSystemId, callback, asyncState);
        }
        
        private object[] OnEndDataSyncSystem_SaveRunFailure(System.IAsyncResult result) {
            this.EndDataSyncSystem_SaveRunFailure(result);
            return null;
        }
        
        private void OnDataSyncSystem_SaveRunFailureCompleted(object state) {
            if ((this.DataSyncSystem_SaveRunFailureCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DataSyncSystem_SaveRunFailureCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DataSyncSystem_SaveRunFailureAsync(int dataSyncSystemId) {
            this.DataSyncSystem_SaveRunFailureAsync(dataSyncSystemId, null);
        }
        
        public void DataSyncSystem_SaveRunFailureAsync(int dataSyncSystemId, object userState) {
            if ((this.onBeginDataSyncSystem_SaveRunFailureDelegate == null)) {
                this.onBeginDataSyncSystem_SaveRunFailureDelegate = new BeginOperationDelegate(this.OnBeginDataSyncSystem_SaveRunFailure);
            }
            if ((this.onEndDataSyncSystem_SaveRunFailureDelegate == null)) {
                this.onEndDataSyncSystem_SaveRunFailureDelegate = new EndOperationDelegate(this.OnEndDataSyncSystem_SaveRunFailure);
            }
            if ((this.onDataSyncSystem_SaveRunFailureCompletedDelegate == null)) {
                this.onDataSyncSystem_SaveRunFailureCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDataSyncSystem_SaveRunFailureCompleted);
            }
            base.InvokeAsync(this.onBeginDataSyncSystem_SaveRunFailureDelegate, new object[] {
                        dataSyncSystemId}, this.onEndDataSyncSystem_SaveRunFailureDelegate, this.onDataSyncSystem_SaveRunFailureCompletedDelegate, userState);
        }
        
        public void DataSyncSystem_SaveRunSuccess(int dataSyncSystemId, System.DateTime lastRunDate) {
            base.Channel.DataSyncSystem_SaveRunSuccess(dataSyncSystemId, lastRunDate);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDataSyncSystem_SaveRunSuccess(int dataSyncSystemId, System.DateTime lastRunDate, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDataSyncSystem_SaveRunSuccess(dataSyncSystemId, lastRunDate, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndDataSyncSystem_SaveRunSuccess(System.IAsyncResult result) {
            base.Channel.EndDataSyncSystem_SaveRunSuccess(result);
        }
        
        private System.IAsyncResult OnBeginDataSyncSystem_SaveRunSuccess(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int dataSyncSystemId = ((int)(inValues[0]));
            System.DateTime lastRunDate = ((System.DateTime)(inValues[1]));
            return this.BeginDataSyncSystem_SaveRunSuccess(dataSyncSystemId, lastRunDate, callback, asyncState);
        }
        
        private object[] OnEndDataSyncSystem_SaveRunSuccess(System.IAsyncResult result) {
            this.EndDataSyncSystem_SaveRunSuccess(result);
            return null;
        }
        
        private void OnDataSyncSystem_SaveRunSuccessCompleted(object state) {
            if ((this.DataSyncSystem_SaveRunSuccessCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DataSyncSystem_SaveRunSuccessCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DataSyncSystem_SaveRunSuccessAsync(int dataSyncSystemId, System.DateTime lastRunDate) {
            this.DataSyncSystem_SaveRunSuccessAsync(dataSyncSystemId, lastRunDate, null);
        }
        
        public void DataSyncSystem_SaveRunSuccessAsync(int dataSyncSystemId, System.DateTime lastRunDate, object userState) {
            if ((this.onBeginDataSyncSystem_SaveRunSuccessDelegate == null)) {
                this.onBeginDataSyncSystem_SaveRunSuccessDelegate = new BeginOperationDelegate(this.OnBeginDataSyncSystem_SaveRunSuccess);
            }
            if ((this.onEndDataSyncSystem_SaveRunSuccessDelegate == null)) {
                this.onEndDataSyncSystem_SaveRunSuccessDelegate = new EndOperationDelegate(this.OnEndDataSyncSystem_SaveRunSuccess);
            }
            if ((this.onDataSyncSystem_SaveRunSuccessCompletedDelegate == null)) {
                this.onDataSyncSystem_SaveRunSuccessCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDataSyncSystem_SaveRunSuccessCompleted);
            }
            base.InvokeAsync(this.onBeginDataSyncSystem_SaveRunSuccessDelegate, new object[] {
                        dataSyncSystemId,
                        lastRunDate}, this.onEndDataSyncSystem_SaveRunSuccessDelegate, this.onDataSyncSystem_SaveRunSuccessCompletedDelegate, userState);
        }
        
        public void DataSyncSystem_SaveRunWarning(int dataSyncSystemId, System.DateTime lastRunDate) {
            base.Channel.DataSyncSystem_SaveRunWarning(dataSyncSystemId, lastRunDate);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDataSyncSystem_SaveRunWarning(int dataSyncSystemId, System.DateTime lastRunDate, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDataSyncSystem_SaveRunWarning(dataSyncSystemId, lastRunDate, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndDataSyncSystem_SaveRunWarning(System.IAsyncResult result) {
            base.Channel.EndDataSyncSystem_SaveRunWarning(result);
        }
        
        private System.IAsyncResult OnBeginDataSyncSystem_SaveRunWarning(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int dataSyncSystemId = ((int)(inValues[0]));
            System.DateTime lastRunDate = ((System.DateTime)(inValues[1]));
            return this.BeginDataSyncSystem_SaveRunWarning(dataSyncSystemId, lastRunDate, callback, asyncState);
        }
        
        private object[] OnEndDataSyncSystem_SaveRunWarning(System.IAsyncResult result) {
            this.EndDataSyncSystem_SaveRunWarning(result);
            return null;
        }
        
        private void OnDataSyncSystem_SaveRunWarningCompleted(object state) {
            if ((this.DataSyncSystem_SaveRunWarningCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DataSyncSystem_SaveRunWarningCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DataSyncSystem_SaveRunWarningAsync(int dataSyncSystemId, System.DateTime lastRunDate) {
            this.DataSyncSystem_SaveRunWarningAsync(dataSyncSystemId, lastRunDate, null);
        }
        
        public void DataSyncSystem_SaveRunWarningAsync(int dataSyncSystemId, System.DateTime lastRunDate, object userState) {
            if ((this.onBeginDataSyncSystem_SaveRunWarningDelegate == null)) {
                this.onBeginDataSyncSystem_SaveRunWarningDelegate = new BeginOperationDelegate(this.OnBeginDataSyncSystem_SaveRunWarning);
            }
            if ((this.onEndDataSyncSystem_SaveRunWarningDelegate == null)) {
                this.onEndDataSyncSystem_SaveRunWarningDelegate = new EndOperationDelegate(this.OnEndDataSyncSystem_SaveRunWarning);
            }
            if ((this.onDataSyncSystem_SaveRunWarningCompletedDelegate == null)) {
                this.onDataSyncSystem_SaveRunWarningCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDataSyncSystem_SaveRunWarningCompleted);
            }
            base.InvokeAsync(this.onBeginDataSyncSystem_SaveRunWarningDelegate, new object[] {
                        dataSyncSystemId,
                        lastRunDate}, this.onEndDataSyncSystem_SaveRunWarningDelegate, this.onDataSyncSystem_SaveRunWarningCompletedDelegate, userState);
        }
        
        public void DataSyncSystem_WriteEvent(string message, string details, int eventLogEntryType) {
            base.Channel.DataSyncSystem_WriteEvent(message, details, eventLogEntryType);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDataSyncSystem_WriteEvent(string message, string details, int eventLogEntryType, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDataSyncSystem_WriteEvent(message, details, eventLogEntryType, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndDataSyncSystem_WriteEvent(System.IAsyncResult result) {
            base.Channel.EndDataSyncSystem_WriteEvent(result);
        }
        
        private System.IAsyncResult OnBeginDataSyncSystem_WriteEvent(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string message = ((string)(inValues[0]));
            string details = ((string)(inValues[1]));
            int eventLogEntryType = ((int)(inValues[2]));
            return this.BeginDataSyncSystem_WriteEvent(message, details, eventLogEntryType, callback, asyncState);
        }
        
        private object[] OnEndDataSyncSystem_WriteEvent(System.IAsyncResult result) {
            this.EndDataSyncSystem_WriteEvent(result);
            return null;
        }
        
        private void OnDataSyncSystem_WriteEventCompleted(object state) {
            if ((this.DataSyncSystem_WriteEventCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DataSyncSystem_WriteEventCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DataSyncSystem_WriteEventAsync(string message, string details, int eventLogEntryType) {
            this.DataSyncSystem_WriteEventAsync(message, details, eventLogEntryType, null);
        }
        
        public void DataSyncSystem_WriteEventAsync(string message, string details, int eventLogEntryType, object userState) {
            if ((this.onBeginDataSyncSystem_WriteEventDelegate == null)) {
                this.onBeginDataSyncSystem_WriteEventDelegate = new BeginOperationDelegate(this.OnBeginDataSyncSystem_WriteEvent);
            }
            if ((this.onEndDataSyncSystem_WriteEventDelegate == null)) {
                this.onEndDataSyncSystem_WriteEventDelegate = new EndOperationDelegate(this.OnEndDataSyncSystem_WriteEvent);
            }
            if ((this.onDataSyncSystem_WriteEventCompletedDelegate == null)) {
                this.onDataSyncSystem_WriteEventCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDataSyncSystem_WriteEventCompleted);
            }
            base.InvokeAsync(this.onBeginDataSyncSystem_WriteEventDelegate, new object[] {
                        message,
                        details,
                        eventLogEntryType}, this.onEndDataSyncSystem_WriteEventDelegate, this.onDataSyncSystem_WriteEventCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteCustomProperty[] CustomProperty_RetrieveForArtifactType(int artifactTypeId, bool includeDeleted) {
            return base.Channel.CustomProperty_RetrieveForArtifactType(artifactTypeId, includeDeleted);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginCustomProperty_RetrieveForArtifactType(int artifactTypeId, bool includeDeleted, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCustomProperty_RetrieveForArtifactType(artifactTypeId, includeDeleted, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteCustomProperty[] EndCustomProperty_RetrieveForArtifactType(System.IAsyncResult result) {
            return base.Channel.EndCustomProperty_RetrieveForArtifactType(result);
        }
        
        private System.IAsyncResult OnBeginCustomProperty_RetrieveForArtifactType(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int artifactTypeId = ((int)(inValues[0]));
            bool includeDeleted = ((bool)(inValues[1]));
            return this.BeginCustomProperty_RetrieveForArtifactType(artifactTypeId, includeDeleted, callback, asyncState);
        }
        
        private object[] OnEndCustomProperty_RetrieveForArtifactType(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteCustomProperty[] retVal = this.EndCustomProperty_RetrieveForArtifactType(result);
            return new object[] {
                    retVal};
        }
        
        private void OnCustomProperty_RetrieveForArtifactTypeCompleted(object state) {
            if ((this.CustomProperty_RetrieveForArtifactTypeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CustomProperty_RetrieveForArtifactTypeCompleted(this, new CustomProperty_RetrieveForArtifactTypeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CustomProperty_RetrieveForArtifactTypeAsync(int artifactTypeId, bool includeDeleted) {
            this.CustomProperty_RetrieveForArtifactTypeAsync(artifactTypeId, includeDeleted, null);
        }
        
        public void CustomProperty_RetrieveForArtifactTypeAsync(int artifactTypeId, bool includeDeleted, object userState) {
            if ((this.onBeginCustomProperty_RetrieveForArtifactTypeDelegate == null)) {
                this.onBeginCustomProperty_RetrieveForArtifactTypeDelegate = new BeginOperationDelegate(this.OnBeginCustomProperty_RetrieveForArtifactType);
            }
            if ((this.onEndCustomProperty_RetrieveForArtifactTypeDelegate == null)) {
                this.onEndCustomProperty_RetrieveForArtifactTypeDelegate = new EndOperationDelegate(this.OnEndCustomProperty_RetrieveForArtifactType);
            }
            if ((this.onCustomProperty_RetrieveForArtifactTypeCompletedDelegate == null)) {
                this.onCustomProperty_RetrieveForArtifactTypeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCustomProperty_RetrieveForArtifactTypeCompleted);
            }
            base.InvokeAsync(this.onBeginCustomProperty_RetrieveForArtifactTypeDelegate, new object[] {
                        artifactTypeId,
                        includeDeleted}, this.onEndCustomProperty_RetrieveForArtifactTypeDelegate, this.onCustomProperty_RetrieveForArtifactTypeCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteCustomList CustomProperty_AddCustomList(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteCustomList remoteCustomList) {
            return base.Channel.CustomProperty_AddCustomList(remoteCustomList);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginCustomProperty_AddCustomList(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteCustomList remoteCustomList, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCustomProperty_AddCustomList(remoteCustomList, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteCustomList EndCustomProperty_AddCustomList(System.IAsyncResult result) {
            return base.Channel.EndCustomProperty_AddCustomList(result);
        }
        
        private System.IAsyncResult OnBeginCustomProperty_AddCustomList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteCustomList remoteCustomList = ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteCustomList)(inValues[0]));
            return this.BeginCustomProperty_AddCustomList(remoteCustomList, callback, asyncState);
        }
        
        private object[] OnEndCustomProperty_AddCustomList(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteCustomList retVal = this.EndCustomProperty_AddCustomList(result);
            return new object[] {
                    retVal};
        }
        
        private void OnCustomProperty_AddCustomListCompleted(object state) {
            if ((this.CustomProperty_AddCustomListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CustomProperty_AddCustomListCompleted(this, new CustomProperty_AddCustomListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CustomProperty_AddCustomListAsync(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteCustomList remoteCustomList) {
            this.CustomProperty_AddCustomListAsync(remoteCustomList, null);
        }
        
        public void CustomProperty_AddCustomListAsync(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteCustomList remoteCustomList, object userState) {
            if ((this.onBeginCustomProperty_AddCustomListDelegate == null)) {
                this.onBeginCustomProperty_AddCustomListDelegate = new BeginOperationDelegate(this.OnBeginCustomProperty_AddCustomList);
            }
            if ((this.onEndCustomProperty_AddCustomListDelegate == null)) {
                this.onEndCustomProperty_AddCustomListDelegate = new EndOperationDelegate(this.OnEndCustomProperty_AddCustomList);
            }
            if ((this.onCustomProperty_AddCustomListCompletedDelegate == null)) {
                this.onCustomProperty_AddCustomListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCustomProperty_AddCustomListCompleted);
            }
            base.InvokeAsync(this.onBeginCustomProperty_AddCustomListDelegate, new object[] {
                        remoteCustomList}, this.onEndCustomProperty_AddCustomListDelegate, this.onCustomProperty_AddCustomListCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteCustomListValue CustomProperty_AddCustomListValue(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteCustomListValue remoteCustomListValue) {
            return base.Channel.CustomProperty_AddCustomListValue(remoteCustomListValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginCustomProperty_AddCustomListValue(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteCustomListValue remoteCustomListValue, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCustomProperty_AddCustomListValue(remoteCustomListValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteCustomListValue EndCustomProperty_AddCustomListValue(System.IAsyncResult result) {
            return base.Channel.EndCustomProperty_AddCustomListValue(result);
        }
        
        private System.IAsyncResult OnBeginCustomProperty_AddCustomListValue(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteCustomListValue remoteCustomListValue = ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteCustomListValue)(inValues[0]));
            return this.BeginCustomProperty_AddCustomListValue(remoteCustomListValue, callback, asyncState);
        }
        
        private object[] OnEndCustomProperty_AddCustomListValue(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteCustomListValue retVal = this.EndCustomProperty_AddCustomListValue(result);
            return new object[] {
                    retVal};
        }
        
        private void OnCustomProperty_AddCustomListValueCompleted(object state) {
            if ((this.CustomProperty_AddCustomListValueCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CustomProperty_AddCustomListValueCompleted(this, new CustomProperty_AddCustomListValueCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CustomProperty_AddCustomListValueAsync(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteCustomListValue remoteCustomListValue) {
            this.CustomProperty_AddCustomListValueAsync(remoteCustomListValue, null);
        }
        
        public void CustomProperty_AddCustomListValueAsync(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteCustomListValue remoteCustomListValue, object userState) {
            if ((this.onBeginCustomProperty_AddCustomListValueDelegate == null)) {
                this.onBeginCustomProperty_AddCustomListValueDelegate = new BeginOperationDelegate(this.OnBeginCustomProperty_AddCustomListValue);
            }
            if ((this.onEndCustomProperty_AddCustomListValueDelegate == null)) {
                this.onEndCustomProperty_AddCustomListValueDelegate = new EndOperationDelegate(this.OnEndCustomProperty_AddCustomListValue);
            }
            if ((this.onCustomProperty_AddCustomListValueCompletedDelegate == null)) {
                this.onCustomProperty_AddCustomListValueCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCustomProperty_AddCustomListValueCompleted);
            }
            base.InvokeAsync(this.onBeginCustomProperty_AddCustomListValueDelegate, new object[] {
                        remoteCustomListValue}, this.onEndCustomProperty_AddCustomListValueDelegate, this.onCustomProperty_AddCustomListValueCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteCustomProperty CustomProperty_AddDefinition(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteCustomProperty remoteCustomProperty, System.Nullable<int> customListId) {
            return base.Channel.CustomProperty_AddDefinition(remoteCustomProperty, customListId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginCustomProperty_AddDefinition(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteCustomProperty remoteCustomProperty, System.Nullable<int> customListId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCustomProperty_AddDefinition(remoteCustomProperty, customListId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteCustomProperty EndCustomProperty_AddDefinition(System.IAsyncResult result) {
            return base.Channel.EndCustomProperty_AddDefinition(result);
        }
        
        private System.IAsyncResult OnBeginCustomProperty_AddDefinition(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteCustomProperty remoteCustomProperty = ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteCustomProperty)(inValues[0]));
            System.Nullable<int> customListId = ((System.Nullable<int>)(inValues[1]));
            return this.BeginCustomProperty_AddDefinition(remoteCustomProperty, customListId, callback, asyncState);
        }
        
        private object[] OnEndCustomProperty_AddDefinition(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteCustomProperty retVal = this.EndCustomProperty_AddDefinition(result);
            return new object[] {
                    retVal};
        }
        
        private void OnCustomProperty_AddDefinitionCompleted(object state) {
            if ((this.CustomProperty_AddDefinitionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CustomProperty_AddDefinitionCompleted(this, new CustomProperty_AddDefinitionCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CustomProperty_AddDefinitionAsync(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteCustomProperty remoteCustomProperty, System.Nullable<int> customListId) {
            this.CustomProperty_AddDefinitionAsync(remoteCustomProperty, customListId, null);
        }
        
        public void CustomProperty_AddDefinitionAsync(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteCustomProperty remoteCustomProperty, System.Nullable<int> customListId, object userState) {
            if ((this.onBeginCustomProperty_AddDefinitionDelegate == null)) {
                this.onBeginCustomProperty_AddDefinitionDelegate = new BeginOperationDelegate(this.OnBeginCustomProperty_AddDefinition);
            }
            if ((this.onEndCustomProperty_AddDefinitionDelegate == null)) {
                this.onEndCustomProperty_AddDefinitionDelegate = new EndOperationDelegate(this.OnEndCustomProperty_AddDefinition);
            }
            if ((this.onCustomProperty_AddDefinitionCompletedDelegate == null)) {
                this.onCustomProperty_AddDefinitionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCustomProperty_AddDefinitionCompleted);
            }
            base.InvokeAsync(this.onBeginCustomProperty_AddDefinitionDelegate, new object[] {
                        remoteCustomProperty,
                        customListId}, this.onEndCustomProperty_AddDefinitionDelegate, this.onCustomProperty_AddDefinitionCompletedDelegate, userState);
        }
        
        public void CustomProperty_UpdateDefinition(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteCustomProperty remoteCustomProperty) {
            base.Channel.CustomProperty_UpdateDefinition(remoteCustomProperty);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginCustomProperty_UpdateDefinition(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteCustomProperty remoteCustomProperty, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCustomProperty_UpdateDefinition(remoteCustomProperty, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndCustomProperty_UpdateDefinition(System.IAsyncResult result) {
            base.Channel.EndCustomProperty_UpdateDefinition(result);
        }
        
        private System.IAsyncResult OnBeginCustomProperty_UpdateDefinition(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteCustomProperty remoteCustomProperty = ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteCustomProperty)(inValues[0]));
            return this.BeginCustomProperty_UpdateDefinition(remoteCustomProperty, callback, asyncState);
        }
        
        private object[] OnEndCustomProperty_UpdateDefinition(System.IAsyncResult result) {
            this.EndCustomProperty_UpdateDefinition(result);
            return null;
        }
        
        private void OnCustomProperty_UpdateDefinitionCompleted(object state) {
            if ((this.CustomProperty_UpdateDefinitionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CustomProperty_UpdateDefinitionCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CustomProperty_UpdateDefinitionAsync(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteCustomProperty remoteCustomProperty) {
            this.CustomProperty_UpdateDefinitionAsync(remoteCustomProperty, null);
        }
        
        public void CustomProperty_UpdateDefinitionAsync(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteCustomProperty remoteCustomProperty, object userState) {
            if ((this.onBeginCustomProperty_UpdateDefinitionDelegate == null)) {
                this.onBeginCustomProperty_UpdateDefinitionDelegate = new BeginOperationDelegate(this.OnBeginCustomProperty_UpdateDefinition);
            }
            if ((this.onEndCustomProperty_UpdateDefinitionDelegate == null)) {
                this.onEndCustomProperty_UpdateDefinitionDelegate = new EndOperationDelegate(this.OnEndCustomProperty_UpdateDefinition);
            }
            if ((this.onCustomProperty_UpdateDefinitionCompletedDelegate == null)) {
                this.onCustomProperty_UpdateDefinitionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCustomProperty_UpdateDefinitionCompleted);
            }
            base.InvokeAsync(this.onBeginCustomProperty_UpdateDefinitionDelegate, new object[] {
                        remoteCustomProperty}, this.onEndCustomProperty_UpdateDefinitionDelegate, this.onCustomProperty_UpdateDefinitionCompletedDelegate, userState);
        }
        
        public void CustomProperty_DeleteDefinition(int customPropertyId) {
            base.Channel.CustomProperty_DeleteDefinition(customPropertyId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginCustomProperty_DeleteDefinition(int customPropertyId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCustomProperty_DeleteDefinition(customPropertyId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndCustomProperty_DeleteDefinition(System.IAsyncResult result) {
            base.Channel.EndCustomProperty_DeleteDefinition(result);
        }
        
        private System.IAsyncResult OnBeginCustomProperty_DeleteDefinition(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int customPropertyId = ((int)(inValues[0]));
            return this.BeginCustomProperty_DeleteDefinition(customPropertyId, callback, asyncState);
        }
        
        private object[] OnEndCustomProperty_DeleteDefinition(System.IAsyncResult result) {
            this.EndCustomProperty_DeleteDefinition(result);
            return null;
        }
        
        private void OnCustomProperty_DeleteDefinitionCompleted(object state) {
            if ((this.CustomProperty_DeleteDefinitionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CustomProperty_DeleteDefinitionCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CustomProperty_DeleteDefinitionAsync(int customPropertyId) {
            this.CustomProperty_DeleteDefinitionAsync(customPropertyId, null);
        }
        
        public void CustomProperty_DeleteDefinitionAsync(int customPropertyId, object userState) {
            if ((this.onBeginCustomProperty_DeleteDefinitionDelegate == null)) {
                this.onBeginCustomProperty_DeleteDefinitionDelegate = new BeginOperationDelegate(this.OnBeginCustomProperty_DeleteDefinition);
            }
            if ((this.onEndCustomProperty_DeleteDefinitionDelegate == null)) {
                this.onEndCustomProperty_DeleteDefinitionDelegate = new EndOperationDelegate(this.OnEndCustomProperty_DeleteDefinition);
            }
            if ((this.onCustomProperty_DeleteDefinitionCompletedDelegate == null)) {
                this.onCustomProperty_DeleteDefinitionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCustomProperty_DeleteDefinitionCompleted);
            }
            base.InvokeAsync(this.onBeginCustomProperty_DeleteDefinitionDelegate, new object[] {
                        customPropertyId}, this.onEndCustomProperty_DeleteDefinitionDelegate, this.onCustomProperty_DeleteDefinitionCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteCustomList CustomProperty_RetrieveCustomListById(int customListId) {
            return base.Channel.CustomProperty_RetrieveCustomListById(customListId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginCustomProperty_RetrieveCustomListById(int customListId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCustomProperty_RetrieveCustomListById(customListId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteCustomList EndCustomProperty_RetrieveCustomListById(System.IAsyncResult result) {
            return base.Channel.EndCustomProperty_RetrieveCustomListById(result);
        }
        
        private System.IAsyncResult OnBeginCustomProperty_RetrieveCustomListById(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int customListId = ((int)(inValues[0]));
            return this.BeginCustomProperty_RetrieveCustomListById(customListId, callback, asyncState);
        }
        
        private object[] OnEndCustomProperty_RetrieveCustomListById(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteCustomList retVal = this.EndCustomProperty_RetrieveCustomListById(result);
            return new object[] {
                    retVal};
        }
        
        private void OnCustomProperty_RetrieveCustomListByIdCompleted(object state) {
            if ((this.CustomProperty_RetrieveCustomListByIdCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CustomProperty_RetrieveCustomListByIdCompleted(this, new CustomProperty_RetrieveCustomListByIdCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CustomProperty_RetrieveCustomListByIdAsync(int customListId) {
            this.CustomProperty_RetrieveCustomListByIdAsync(customListId, null);
        }
        
        public void CustomProperty_RetrieveCustomListByIdAsync(int customListId, object userState) {
            if ((this.onBeginCustomProperty_RetrieveCustomListByIdDelegate == null)) {
                this.onBeginCustomProperty_RetrieveCustomListByIdDelegate = new BeginOperationDelegate(this.OnBeginCustomProperty_RetrieveCustomListById);
            }
            if ((this.onEndCustomProperty_RetrieveCustomListByIdDelegate == null)) {
                this.onEndCustomProperty_RetrieveCustomListByIdDelegate = new EndOperationDelegate(this.OnEndCustomProperty_RetrieveCustomListById);
            }
            if ((this.onCustomProperty_RetrieveCustomListByIdCompletedDelegate == null)) {
                this.onCustomProperty_RetrieveCustomListByIdCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCustomProperty_RetrieveCustomListByIdCompleted);
            }
            base.InvokeAsync(this.onBeginCustomProperty_RetrieveCustomListByIdDelegate, new object[] {
                        customListId}, this.onEndCustomProperty_RetrieveCustomListByIdDelegate, this.onCustomProperty_RetrieveCustomListByIdCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteCustomList[] CustomProperty_RetrieveCustomLists() {
            return base.Channel.CustomProperty_RetrieveCustomLists();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginCustomProperty_RetrieveCustomLists(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCustomProperty_RetrieveCustomLists(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteCustomList[] EndCustomProperty_RetrieveCustomLists(System.IAsyncResult result) {
            return base.Channel.EndCustomProperty_RetrieveCustomLists(result);
        }
        
        private System.IAsyncResult OnBeginCustomProperty_RetrieveCustomLists(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginCustomProperty_RetrieveCustomLists(callback, asyncState);
        }
        
        private object[] OnEndCustomProperty_RetrieveCustomLists(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteCustomList[] retVal = this.EndCustomProperty_RetrieveCustomLists(result);
            return new object[] {
                    retVal};
        }
        
        private void OnCustomProperty_RetrieveCustomListsCompleted(object state) {
            if ((this.CustomProperty_RetrieveCustomListsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CustomProperty_RetrieveCustomListsCompleted(this, new CustomProperty_RetrieveCustomListsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CustomProperty_RetrieveCustomListsAsync() {
            this.CustomProperty_RetrieveCustomListsAsync(null);
        }
        
        public void CustomProperty_RetrieveCustomListsAsync(object userState) {
            if ((this.onBeginCustomProperty_RetrieveCustomListsDelegate == null)) {
                this.onBeginCustomProperty_RetrieveCustomListsDelegate = new BeginOperationDelegate(this.OnBeginCustomProperty_RetrieveCustomLists);
            }
            if ((this.onEndCustomProperty_RetrieveCustomListsDelegate == null)) {
                this.onEndCustomProperty_RetrieveCustomListsDelegate = new EndOperationDelegate(this.OnEndCustomProperty_RetrieveCustomLists);
            }
            if ((this.onCustomProperty_RetrieveCustomListsCompletedDelegate == null)) {
                this.onCustomProperty_RetrieveCustomListsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCustomProperty_RetrieveCustomListsCompleted);
            }
            base.InvokeAsync(this.onBeginCustomProperty_RetrieveCustomListsDelegate, null, this.onEndCustomProperty_RetrieveCustomListsDelegate, this.onCustomProperty_RetrieveCustomListsCompletedDelegate, userState);
        }
        
        public void CustomProperty_UpdateCustomList(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteCustomList remoteCustomList) {
            base.Channel.CustomProperty_UpdateCustomList(remoteCustomList);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginCustomProperty_UpdateCustomList(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteCustomList remoteCustomList, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCustomProperty_UpdateCustomList(remoteCustomList, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndCustomProperty_UpdateCustomList(System.IAsyncResult result) {
            base.Channel.EndCustomProperty_UpdateCustomList(result);
        }
        
        private System.IAsyncResult OnBeginCustomProperty_UpdateCustomList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteCustomList remoteCustomList = ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteCustomList)(inValues[0]));
            return this.BeginCustomProperty_UpdateCustomList(remoteCustomList, callback, asyncState);
        }
        
        private object[] OnEndCustomProperty_UpdateCustomList(System.IAsyncResult result) {
            this.EndCustomProperty_UpdateCustomList(result);
            return null;
        }
        
        private void OnCustomProperty_UpdateCustomListCompleted(object state) {
            if ((this.CustomProperty_UpdateCustomListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CustomProperty_UpdateCustomListCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CustomProperty_UpdateCustomListAsync(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteCustomList remoteCustomList) {
            this.CustomProperty_UpdateCustomListAsync(remoteCustomList, null);
        }
        
        public void CustomProperty_UpdateCustomListAsync(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteCustomList remoteCustomList, object userState) {
            if ((this.onBeginCustomProperty_UpdateCustomListDelegate == null)) {
                this.onBeginCustomProperty_UpdateCustomListDelegate = new BeginOperationDelegate(this.OnBeginCustomProperty_UpdateCustomList);
            }
            if ((this.onEndCustomProperty_UpdateCustomListDelegate == null)) {
                this.onEndCustomProperty_UpdateCustomListDelegate = new EndOperationDelegate(this.OnEndCustomProperty_UpdateCustomList);
            }
            if ((this.onCustomProperty_UpdateCustomListCompletedDelegate == null)) {
                this.onCustomProperty_UpdateCustomListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCustomProperty_UpdateCustomListCompleted);
            }
            base.InvokeAsync(this.onBeginCustomProperty_UpdateCustomListDelegate, new object[] {
                        remoteCustomList}, this.onEndCustomProperty_UpdateCustomListDelegate, this.onCustomProperty_UpdateCustomListCompletedDelegate, userState);
        }
        
        public void DataMapping_AddArtifactMappings(int dataSyncSystemId, int artifactTypeId, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDataMapping[] remoteDataMappings) {
            base.Channel.DataMapping_AddArtifactMappings(dataSyncSystemId, artifactTypeId, remoteDataMappings);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDataMapping_AddArtifactMappings(int dataSyncSystemId, int artifactTypeId, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDataMapping[] remoteDataMappings, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDataMapping_AddArtifactMappings(dataSyncSystemId, artifactTypeId, remoteDataMappings, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndDataMapping_AddArtifactMappings(System.IAsyncResult result) {
            base.Channel.EndDataMapping_AddArtifactMappings(result);
        }
        
        private System.IAsyncResult OnBeginDataMapping_AddArtifactMappings(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int dataSyncSystemId = ((int)(inValues[0]));
            int artifactTypeId = ((int)(inValues[1]));
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDataMapping[] remoteDataMappings = ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDataMapping[])(inValues[2]));
            return this.BeginDataMapping_AddArtifactMappings(dataSyncSystemId, artifactTypeId, remoteDataMappings, callback, asyncState);
        }
        
        private object[] OnEndDataMapping_AddArtifactMappings(System.IAsyncResult result) {
            this.EndDataMapping_AddArtifactMappings(result);
            return null;
        }
        
        private void OnDataMapping_AddArtifactMappingsCompleted(object state) {
            if ((this.DataMapping_AddArtifactMappingsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DataMapping_AddArtifactMappingsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DataMapping_AddArtifactMappingsAsync(int dataSyncSystemId, int artifactTypeId, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDataMapping[] remoteDataMappings) {
            this.DataMapping_AddArtifactMappingsAsync(dataSyncSystemId, artifactTypeId, remoteDataMappings, null);
        }
        
        public void DataMapping_AddArtifactMappingsAsync(int dataSyncSystemId, int artifactTypeId, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDataMapping[] remoteDataMappings, object userState) {
            if ((this.onBeginDataMapping_AddArtifactMappingsDelegate == null)) {
                this.onBeginDataMapping_AddArtifactMappingsDelegate = new BeginOperationDelegate(this.OnBeginDataMapping_AddArtifactMappings);
            }
            if ((this.onEndDataMapping_AddArtifactMappingsDelegate == null)) {
                this.onEndDataMapping_AddArtifactMappingsDelegate = new EndOperationDelegate(this.OnEndDataMapping_AddArtifactMappings);
            }
            if ((this.onDataMapping_AddArtifactMappingsCompletedDelegate == null)) {
                this.onDataMapping_AddArtifactMappingsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDataMapping_AddArtifactMappingsCompleted);
            }
            base.InvokeAsync(this.onBeginDataMapping_AddArtifactMappingsDelegate, new object[] {
                        dataSyncSystemId,
                        artifactTypeId,
                        remoteDataMappings}, this.onEndDataMapping_AddArtifactMappingsDelegate, this.onDataMapping_AddArtifactMappingsCompletedDelegate, userState);
        }
        
        public void DataMapping_AddUserMappings(int dataSyncSystemId, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDataMapping[] remoteDataMappings) {
            base.Channel.DataMapping_AddUserMappings(dataSyncSystemId, remoteDataMappings);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDataMapping_AddUserMappings(int dataSyncSystemId, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDataMapping[] remoteDataMappings, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDataMapping_AddUserMappings(dataSyncSystemId, remoteDataMappings, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndDataMapping_AddUserMappings(System.IAsyncResult result) {
            base.Channel.EndDataMapping_AddUserMappings(result);
        }
        
        private System.IAsyncResult OnBeginDataMapping_AddUserMappings(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int dataSyncSystemId = ((int)(inValues[0]));
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDataMapping[] remoteDataMappings = ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDataMapping[])(inValues[1]));
            return this.BeginDataMapping_AddUserMappings(dataSyncSystemId, remoteDataMappings, callback, asyncState);
        }
        
        private object[] OnEndDataMapping_AddUserMappings(System.IAsyncResult result) {
            this.EndDataMapping_AddUserMappings(result);
            return null;
        }
        
        private void OnDataMapping_AddUserMappingsCompleted(object state) {
            if ((this.DataMapping_AddUserMappingsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DataMapping_AddUserMappingsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DataMapping_AddUserMappingsAsync(int dataSyncSystemId, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDataMapping[] remoteDataMappings) {
            this.DataMapping_AddUserMappingsAsync(dataSyncSystemId, remoteDataMappings, null);
        }
        
        public void DataMapping_AddUserMappingsAsync(int dataSyncSystemId, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDataMapping[] remoteDataMappings, object userState) {
            if ((this.onBeginDataMapping_AddUserMappingsDelegate == null)) {
                this.onBeginDataMapping_AddUserMappingsDelegate = new BeginOperationDelegate(this.OnBeginDataMapping_AddUserMappings);
            }
            if ((this.onEndDataMapping_AddUserMappingsDelegate == null)) {
                this.onEndDataMapping_AddUserMappingsDelegate = new EndOperationDelegate(this.OnEndDataMapping_AddUserMappings);
            }
            if ((this.onDataMapping_AddUserMappingsCompletedDelegate == null)) {
                this.onDataMapping_AddUserMappingsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDataMapping_AddUserMappingsCompleted);
            }
            base.InvokeAsync(this.onBeginDataMapping_AddUserMappingsDelegate, new object[] {
                        dataSyncSystemId,
                        remoteDataMappings}, this.onEndDataMapping_AddUserMappingsDelegate, this.onDataMapping_AddUserMappingsCompletedDelegate, userState);
        }
        
        public void DataMapping_RemoveArtifactMappings(int dataSyncSystemId, int artifactTypeId, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDataMapping[] remoteDataMappings) {
            base.Channel.DataMapping_RemoveArtifactMappings(dataSyncSystemId, artifactTypeId, remoteDataMappings);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDataMapping_RemoveArtifactMappings(int dataSyncSystemId, int artifactTypeId, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDataMapping[] remoteDataMappings, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDataMapping_RemoveArtifactMappings(dataSyncSystemId, artifactTypeId, remoteDataMappings, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndDataMapping_RemoveArtifactMappings(System.IAsyncResult result) {
            base.Channel.EndDataMapping_RemoveArtifactMappings(result);
        }
        
        private System.IAsyncResult OnBeginDataMapping_RemoveArtifactMappings(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int dataSyncSystemId = ((int)(inValues[0]));
            int artifactTypeId = ((int)(inValues[1]));
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDataMapping[] remoteDataMappings = ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDataMapping[])(inValues[2]));
            return this.BeginDataMapping_RemoveArtifactMappings(dataSyncSystemId, artifactTypeId, remoteDataMappings, callback, asyncState);
        }
        
        private object[] OnEndDataMapping_RemoveArtifactMappings(System.IAsyncResult result) {
            this.EndDataMapping_RemoveArtifactMappings(result);
            return null;
        }
        
        private void OnDataMapping_RemoveArtifactMappingsCompleted(object state) {
            if ((this.DataMapping_RemoveArtifactMappingsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DataMapping_RemoveArtifactMappingsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DataMapping_RemoveArtifactMappingsAsync(int dataSyncSystemId, int artifactTypeId, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDataMapping[] remoteDataMappings) {
            this.DataMapping_RemoveArtifactMappingsAsync(dataSyncSystemId, artifactTypeId, remoteDataMappings, null);
        }
        
        public void DataMapping_RemoveArtifactMappingsAsync(int dataSyncSystemId, int artifactTypeId, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDataMapping[] remoteDataMappings, object userState) {
            if ((this.onBeginDataMapping_RemoveArtifactMappingsDelegate == null)) {
                this.onBeginDataMapping_RemoveArtifactMappingsDelegate = new BeginOperationDelegate(this.OnBeginDataMapping_RemoveArtifactMappings);
            }
            if ((this.onEndDataMapping_RemoveArtifactMappingsDelegate == null)) {
                this.onEndDataMapping_RemoveArtifactMappingsDelegate = new EndOperationDelegate(this.OnEndDataMapping_RemoveArtifactMappings);
            }
            if ((this.onDataMapping_RemoveArtifactMappingsCompletedDelegate == null)) {
                this.onDataMapping_RemoveArtifactMappingsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDataMapping_RemoveArtifactMappingsCompleted);
            }
            base.InvokeAsync(this.onBeginDataMapping_RemoveArtifactMappingsDelegate, new object[] {
                        dataSyncSystemId,
                        artifactTypeId,
                        remoteDataMappings}, this.onEndDataMapping_RemoveArtifactMappingsDelegate, this.onDataMapping_RemoveArtifactMappingsCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDataMapping[] DataMapping_RetrieveArtifactMappings(int dataSyncSystemId, int artifactTypeId) {
            return base.Channel.DataMapping_RetrieveArtifactMappings(dataSyncSystemId, artifactTypeId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDataMapping_RetrieveArtifactMappings(int dataSyncSystemId, int artifactTypeId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDataMapping_RetrieveArtifactMappings(dataSyncSystemId, artifactTypeId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDataMapping[] EndDataMapping_RetrieveArtifactMappings(System.IAsyncResult result) {
            return base.Channel.EndDataMapping_RetrieveArtifactMappings(result);
        }
        
        private System.IAsyncResult OnBeginDataMapping_RetrieveArtifactMappings(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int dataSyncSystemId = ((int)(inValues[0]));
            int artifactTypeId = ((int)(inValues[1]));
            return this.BeginDataMapping_RetrieveArtifactMappings(dataSyncSystemId, artifactTypeId, callback, asyncState);
        }
        
        private object[] OnEndDataMapping_RetrieveArtifactMappings(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDataMapping[] retVal = this.EndDataMapping_RetrieveArtifactMappings(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDataMapping_RetrieveArtifactMappingsCompleted(object state) {
            if ((this.DataMapping_RetrieveArtifactMappingsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DataMapping_RetrieveArtifactMappingsCompleted(this, new DataMapping_RetrieveArtifactMappingsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DataMapping_RetrieveArtifactMappingsAsync(int dataSyncSystemId, int artifactTypeId) {
            this.DataMapping_RetrieveArtifactMappingsAsync(dataSyncSystemId, artifactTypeId, null);
        }
        
        public void DataMapping_RetrieveArtifactMappingsAsync(int dataSyncSystemId, int artifactTypeId, object userState) {
            if ((this.onBeginDataMapping_RetrieveArtifactMappingsDelegate == null)) {
                this.onBeginDataMapping_RetrieveArtifactMappingsDelegate = new BeginOperationDelegate(this.OnBeginDataMapping_RetrieveArtifactMappings);
            }
            if ((this.onEndDataMapping_RetrieveArtifactMappingsDelegate == null)) {
                this.onEndDataMapping_RetrieveArtifactMappingsDelegate = new EndOperationDelegate(this.OnEndDataMapping_RetrieveArtifactMappings);
            }
            if ((this.onDataMapping_RetrieveArtifactMappingsCompletedDelegate == null)) {
                this.onDataMapping_RetrieveArtifactMappingsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDataMapping_RetrieveArtifactMappingsCompleted);
            }
            base.InvokeAsync(this.onBeginDataMapping_RetrieveArtifactMappingsDelegate, new object[] {
                        dataSyncSystemId,
                        artifactTypeId}, this.onEndDataMapping_RetrieveArtifactMappingsDelegate, this.onDataMapping_RetrieveArtifactMappingsCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDataMapping DataMapping_RetrieveCustomPropertyMapping(int dataSyncSystemId, int artifactTypeId, int customPropertyId) {
            return base.Channel.DataMapping_RetrieveCustomPropertyMapping(dataSyncSystemId, artifactTypeId, customPropertyId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDataMapping_RetrieveCustomPropertyMapping(int dataSyncSystemId, int artifactTypeId, int customPropertyId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDataMapping_RetrieveCustomPropertyMapping(dataSyncSystemId, artifactTypeId, customPropertyId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDataMapping EndDataMapping_RetrieveCustomPropertyMapping(System.IAsyncResult result) {
            return base.Channel.EndDataMapping_RetrieveCustomPropertyMapping(result);
        }
        
        private System.IAsyncResult OnBeginDataMapping_RetrieveCustomPropertyMapping(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int dataSyncSystemId = ((int)(inValues[0]));
            int artifactTypeId = ((int)(inValues[1]));
            int customPropertyId = ((int)(inValues[2]));
            return this.BeginDataMapping_RetrieveCustomPropertyMapping(dataSyncSystemId, artifactTypeId, customPropertyId, callback, asyncState);
        }
        
        private object[] OnEndDataMapping_RetrieveCustomPropertyMapping(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDataMapping retVal = this.EndDataMapping_RetrieveCustomPropertyMapping(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDataMapping_RetrieveCustomPropertyMappingCompleted(object state) {
            if ((this.DataMapping_RetrieveCustomPropertyMappingCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DataMapping_RetrieveCustomPropertyMappingCompleted(this, new DataMapping_RetrieveCustomPropertyMappingCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DataMapping_RetrieveCustomPropertyMappingAsync(int dataSyncSystemId, int artifactTypeId, int customPropertyId) {
            this.DataMapping_RetrieveCustomPropertyMappingAsync(dataSyncSystemId, artifactTypeId, customPropertyId, null);
        }
        
        public void DataMapping_RetrieveCustomPropertyMappingAsync(int dataSyncSystemId, int artifactTypeId, int customPropertyId, object userState) {
            if ((this.onBeginDataMapping_RetrieveCustomPropertyMappingDelegate == null)) {
                this.onBeginDataMapping_RetrieveCustomPropertyMappingDelegate = new BeginOperationDelegate(this.OnBeginDataMapping_RetrieveCustomPropertyMapping);
            }
            if ((this.onEndDataMapping_RetrieveCustomPropertyMappingDelegate == null)) {
                this.onEndDataMapping_RetrieveCustomPropertyMappingDelegate = new EndOperationDelegate(this.OnEndDataMapping_RetrieveCustomPropertyMapping);
            }
            if ((this.onDataMapping_RetrieveCustomPropertyMappingCompletedDelegate == null)) {
                this.onDataMapping_RetrieveCustomPropertyMappingCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDataMapping_RetrieveCustomPropertyMappingCompleted);
            }
            base.InvokeAsync(this.onBeginDataMapping_RetrieveCustomPropertyMappingDelegate, new object[] {
                        dataSyncSystemId,
                        artifactTypeId,
                        customPropertyId}, this.onEndDataMapping_RetrieveCustomPropertyMappingDelegate, this.onDataMapping_RetrieveCustomPropertyMappingCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDataMapping[] DataMapping_RetrieveCustomPropertyValueMappings(int dataSyncSystemId, int artifactTypeId, int customPropertyId) {
            return base.Channel.DataMapping_RetrieveCustomPropertyValueMappings(dataSyncSystemId, artifactTypeId, customPropertyId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDataMapping_RetrieveCustomPropertyValueMappings(int dataSyncSystemId, int artifactTypeId, int customPropertyId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDataMapping_RetrieveCustomPropertyValueMappings(dataSyncSystemId, artifactTypeId, customPropertyId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDataMapping[] EndDataMapping_RetrieveCustomPropertyValueMappings(System.IAsyncResult result) {
            return base.Channel.EndDataMapping_RetrieveCustomPropertyValueMappings(result);
        }
        
        private System.IAsyncResult OnBeginDataMapping_RetrieveCustomPropertyValueMappings(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int dataSyncSystemId = ((int)(inValues[0]));
            int artifactTypeId = ((int)(inValues[1]));
            int customPropertyId = ((int)(inValues[2]));
            return this.BeginDataMapping_RetrieveCustomPropertyValueMappings(dataSyncSystemId, artifactTypeId, customPropertyId, callback, asyncState);
        }
        
        private object[] OnEndDataMapping_RetrieveCustomPropertyValueMappings(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDataMapping[] retVal = this.EndDataMapping_RetrieveCustomPropertyValueMappings(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDataMapping_RetrieveCustomPropertyValueMappingsCompleted(object state) {
            if ((this.DataMapping_RetrieveCustomPropertyValueMappingsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DataMapping_RetrieveCustomPropertyValueMappingsCompleted(this, new DataMapping_RetrieveCustomPropertyValueMappingsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DataMapping_RetrieveCustomPropertyValueMappingsAsync(int dataSyncSystemId, int artifactTypeId, int customPropertyId) {
            this.DataMapping_RetrieveCustomPropertyValueMappingsAsync(dataSyncSystemId, artifactTypeId, customPropertyId, null);
        }
        
        public void DataMapping_RetrieveCustomPropertyValueMappingsAsync(int dataSyncSystemId, int artifactTypeId, int customPropertyId, object userState) {
            if ((this.onBeginDataMapping_RetrieveCustomPropertyValueMappingsDelegate == null)) {
                this.onBeginDataMapping_RetrieveCustomPropertyValueMappingsDelegate = new BeginOperationDelegate(this.OnBeginDataMapping_RetrieveCustomPropertyValueMappings);
            }
            if ((this.onEndDataMapping_RetrieveCustomPropertyValueMappingsDelegate == null)) {
                this.onEndDataMapping_RetrieveCustomPropertyValueMappingsDelegate = new EndOperationDelegate(this.OnEndDataMapping_RetrieveCustomPropertyValueMappings);
            }
            if ((this.onDataMapping_RetrieveCustomPropertyValueMappingsCompletedDelegate == null)) {
                this.onDataMapping_RetrieveCustomPropertyValueMappingsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDataMapping_RetrieveCustomPropertyValueMappingsCompleted);
            }
            base.InvokeAsync(this.onBeginDataMapping_RetrieveCustomPropertyValueMappingsDelegate, new object[] {
                        dataSyncSystemId,
                        artifactTypeId,
                        customPropertyId}, this.onEndDataMapping_RetrieveCustomPropertyValueMappingsDelegate, this.onDataMapping_RetrieveCustomPropertyValueMappingsCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDataMapping[] DataMapping_RetrieveFieldValueMappings(int dataSyncSystemId, int artifactFieldId) {
            return base.Channel.DataMapping_RetrieveFieldValueMappings(dataSyncSystemId, artifactFieldId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDataMapping_RetrieveFieldValueMappings(int dataSyncSystemId, int artifactFieldId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDataMapping_RetrieveFieldValueMappings(dataSyncSystemId, artifactFieldId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDataMapping[] EndDataMapping_RetrieveFieldValueMappings(System.IAsyncResult result) {
            return base.Channel.EndDataMapping_RetrieveFieldValueMappings(result);
        }
        
        private System.IAsyncResult OnBeginDataMapping_RetrieveFieldValueMappings(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int dataSyncSystemId = ((int)(inValues[0]));
            int artifactFieldId = ((int)(inValues[1]));
            return this.BeginDataMapping_RetrieveFieldValueMappings(dataSyncSystemId, artifactFieldId, callback, asyncState);
        }
        
        private object[] OnEndDataMapping_RetrieveFieldValueMappings(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDataMapping[] retVal = this.EndDataMapping_RetrieveFieldValueMappings(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDataMapping_RetrieveFieldValueMappingsCompleted(object state) {
            if ((this.DataMapping_RetrieveFieldValueMappingsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DataMapping_RetrieveFieldValueMappingsCompleted(this, new DataMapping_RetrieveFieldValueMappingsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DataMapping_RetrieveFieldValueMappingsAsync(int dataSyncSystemId, int artifactFieldId) {
            this.DataMapping_RetrieveFieldValueMappingsAsync(dataSyncSystemId, artifactFieldId, null);
        }
        
        public void DataMapping_RetrieveFieldValueMappingsAsync(int dataSyncSystemId, int artifactFieldId, object userState) {
            if ((this.onBeginDataMapping_RetrieveFieldValueMappingsDelegate == null)) {
                this.onBeginDataMapping_RetrieveFieldValueMappingsDelegate = new BeginOperationDelegate(this.OnBeginDataMapping_RetrieveFieldValueMappings);
            }
            if ((this.onEndDataMapping_RetrieveFieldValueMappingsDelegate == null)) {
                this.onEndDataMapping_RetrieveFieldValueMappingsDelegate = new EndOperationDelegate(this.OnEndDataMapping_RetrieveFieldValueMappings);
            }
            if ((this.onDataMapping_RetrieveFieldValueMappingsCompletedDelegate == null)) {
                this.onDataMapping_RetrieveFieldValueMappingsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDataMapping_RetrieveFieldValueMappingsCompleted);
            }
            base.InvokeAsync(this.onBeginDataMapping_RetrieveFieldValueMappingsDelegate, new object[] {
                        dataSyncSystemId,
                        artifactFieldId}, this.onEndDataMapping_RetrieveFieldValueMappingsDelegate, this.onDataMapping_RetrieveFieldValueMappingsCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDataMapping[] DataMapping_RetrieveProjectMappings(int dataSyncSystemId) {
            return base.Channel.DataMapping_RetrieveProjectMappings(dataSyncSystemId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDataMapping_RetrieveProjectMappings(int dataSyncSystemId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDataMapping_RetrieveProjectMappings(dataSyncSystemId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDataMapping[] EndDataMapping_RetrieveProjectMappings(System.IAsyncResult result) {
            return base.Channel.EndDataMapping_RetrieveProjectMappings(result);
        }
        
        private System.IAsyncResult OnBeginDataMapping_RetrieveProjectMappings(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int dataSyncSystemId = ((int)(inValues[0]));
            return this.BeginDataMapping_RetrieveProjectMappings(dataSyncSystemId, callback, asyncState);
        }
        
        private object[] OnEndDataMapping_RetrieveProjectMappings(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDataMapping[] retVal = this.EndDataMapping_RetrieveProjectMappings(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDataMapping_RetrieveProjectMappingsCompleted(object state) {
            if ((this.DataMapping_RetrieveProjectMappingsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DataMapping_RetrieveProjectMappingsCompleted(this, new DataMapping_RetrieveProjectMappingsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DataMapping_RetrieveProjectMappingsAsync(int dataSyncSystemId) {
            this.DataMapping_RetrieveProjectMappingsAsync(dataSyncSystemId, null);
        }
        
        public void DataMapping_RetrieveProjectMappingsAsync(int dataSyncSystemId, object userState) {
            if ((this.onBeginDataMapping_RetrieveProjectMappingsDelegate == null)) {
                this.onBeginDataMapping_RetrieveProjectMappingsDelegate = new BeginOperationDelegate(this.OnBeginDataMapping_RetrieveProjectMappings);
            }
            if ((this.onEndDataMapping_RetrieveProjectMappingsDelegate == null)) {
                this.onEndDataMapping_RetrieveProjectMappingsDelegate = new EndOperationDelegate(this.OnEndDataMapping_RetrieveProjectMappings);
            }
            if ((this.onDataMapping_RetrieveProjectMappingsCompletedDelegate == null)) {
                this.onDataMapping_RetrieveProjectMappingsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDataMapping_RetrieveProjectMappingsCompleted);
            }
            base.InvokeAsync(this.onBeginDataMapping_RetrieveProjectMappingsDelegate, new object[] {
                        dataSyncSystemId}, this.onEndDataMapping_RetrieveProjectMappingsDelegate, this.onDataMapping_RetrieveProjectMappingsCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDataMapping[] DataMapping_RetrieveUserMappings(int dataSyncSystemId) {
            return base.Channel.DataMapping_RetrieveUserMappings(dataSyncSystemId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDataMapping_RetrieveUserMappings(int dataSyncSystemId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDataMapping_RetrieveUserMappings(dataSyncSystemId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDataMapping[] EndDataMapping_RetrieveUserMappings(System.IAsyncResult result) {
            return base.Channel.EndDataMapping_RetrieveUserMappings(result);
        }
        
        private System.IAsyncResult OnBeginDataMapping_RetrieveUserMappings(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int dataSyncSystemId = ((int)(inValues[0]));
            return this.BeginDataMapping_RetrieveUserMappings(dataSyncSystemId, callback, asyncState);
        }
        
        private object[] OnEndDataMapping_RetrieveUserMappings(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDataMapping[] retVal = this.EndDataMapping_RetrieveUserMappings(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDataMapping_RetrieveUserMappingsCompleted(object state) {
            if ((this.DataMapping_RetrieveUserMappingsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DataMapping_RetrieveUserMappingsCompleted(this, new DataMapping_RetrieveUserMappingsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DataMapping_RetrieveUserMappingsAsync(int dataSyncSystemId) {
            this.DataMapping_RetrieveUserMappingsAsync(dataSyncSystemId, null);
        }
        
        public void DataMapping_RetrieveUserMappingsAsync(int dataSyncSystemId, object userState) {
            if ((this.onBeginDataMapping_RetrieveUserMappingsDelegate == null)) {
                this.onBeginDataMapping_RetrieveUserMappingsDelegate = new BeginOperationDelegate(this.OnBeginDataMapping_RetrieveUserMappings);
            }
            if ((this.onEndDataMapping_RetrieveUserMappingsDelegate == null)) {
                this.onEndDataMapping_RetrieveUserMappingsDelegate = new EndOperationDelegate(this.OnEndDataMapping_RetrieveUserMappings);
            }
            if ((this.onDataMapping_RetrieveUserMappingsCompletedDelegate == null)) {
                this.onDataMapping_RetrieveUserMappingsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDataMapping_RetrieveUserMappingsCompleted);
            }
            base.InvokeAsync(this.onBeginDataMapping_RetrieveUserMappingsDelegate, new object[] {
                        dataSyncSystemId}, this.onEndDataMapping_RetrieveUserMappingsDelegate, this.onDataMapping_RetrieveUserMappingsCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteProjectArtifact[] DataMapping_SearchArtifactMappings(int dataSyncSystemId, int artifactTypeId, string externalKey) {
            return base.Channel.DataMapping_SearchArtifactMappings(dataSyncSystemId, artifactTypeId, externalKey);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDataMapping_SearchArtifactMappings(int dataSyncSystemId, int artifactTypeId, string externalKey, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDataMapping_SearchArtifactMappings(dataSyncSystemId, artifactTypeId, externalKey, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteProjectArtifact[] EndDataMapping_SearchArtifactMappings(System.IAsyncResult result) {
            return base.Channel.EndDataMapping_SearchArtifactMappings(result);
        }
        
        private System.IAsyncResult OnBeginDataMapping_SearchArtifactMappings(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int dataSyncSystemId = ((int)(inValues[0]));
            int artifactTypeId = ((int)(inValues[1]));
            string externalKey = ((string)(inValues[2]));
            return this.BeginDataMapping_SearchArtifactMappings(dataSyncSystemId, artifactTypeId, externalKey, callback, asyncState);
        }
        
        private object[] OnEndDataMapping_SearchArtifactMappings(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteProjectArtifact[] retVal = this.EndDataMapping_SearchArtifactMappings(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDataMapping_SearchArtifactMappingsCompleted(object state) {
            if ((this.DataMapping_SearchArtifactMappingsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DataMapping_SearchArtifactMappingsCompleted(this, new DataMapping_SearchArtifactMappingsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DataMapping_SearchArtifactMappingsAsync(int dataSyncSystemId, int artifactTypeId, string externalKey) {
            this.DataMapping_SearchArtifactMappingsAsync(dataSyncSystemId, artifactTypeId, externalKey, null);
        }
        
        public void DataMapping_SearchArtifactMappingsAsync(int dataSyncSystemId, int artifactTypeId, string externalKey, object userState) {
            if ((this.onBeginDataMapping_SearchArtifactMappingsDelegate == null)) {
                this.onBeginDataMapping_SearchArtifactMappingsDelegate = new BeginOperationDelegate(this.OnBeginDataMapping_SearchArtifactMappings);
            }
            if ((this.onEndDataMapping_SearchArtifactMappingsDelegate == null)) {
                this.onEndDataMapping_SearchArtifactMappingsDelegate = new EndOperationDelegate(this.OnEndDataMapping_SearchArtifactMappings);
            }
            if ((this.onDataMapping_SearchArtifactMappingsCompletedDelegate == null)) {
                this.onDataMapping_SearchArtifactMappingsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDataMapping_SearchArtifactMappingsCompleted);
            }
            base.InvokeAsync(this.onBeginDataMapping_SearchArtifactMappingsDelegate, new object[] {
                        dataSyncSystemId,
                        artifactTypeId,
                        externalKey}, this.onEndDataMapping_SearchArtifactMappingsDelegate, this.onDataMapping_SearchArtifactMappingsCompletedDelegate, userState);
        }
        
        public byte[] Document_OpenFile(int attachmentId) {
            return base.Channel.Document_OpenFile(attachmentId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDocument_OpenFile(int attachmentId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDocument_OpenFile(attachmentId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public byte[] EndDocument_OpenFile(System.IAsyncResult result) {
            return base.Channel.EndDocument_OpenFile(result);
        }
        
        private System.IAsyncResult OnBeginDocument_OpenFile(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int attachmentId = ((int)(inValues[0]));
            return this.BeginDocument_OpenFile(attachmentId, callback, asyncState);
        }
        
        private object[] OnEndDocument_OpenFile(System.IAsyncResult result) {
            byte[] retVal = this.EndDocument_OpenFile(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDocument_OpenFileCompleted(object state) {
            if ((this.Document_OpenFileCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Document_OpenFileCompleted(this, new Document_OpenFileCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Document_OpenFileAsync(int attachmentId) {
            this.Document_OpenFileAsync(attachmentId, null);
        }
        
        public void Document_OpenFileAsync(int attachmentId, object userState) {
            if ((this.onBeginDocument_OpenFileDelegate == null)) {
                this.onBeginDocument_OpenFileDelegate = new BeginOperationDelegate(this.OnBeginDocument_OpenFile);
            }
            if ((this.onEndDocument_OpenFileDelegate == null)) {
                this.onEndDocument_OpenFileDelegate = new EndOperationDelegate(this.OnEndDocument_OpenFile);
            }
            if ((this.onDocument_OpenFileCompletedDelegate == null)) {
                this.onDocument_OpenFileCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDocument_OpenFileCompleted);
            }
            base.InvokeAsync(this.onBeginDocument_OpenFileDelegate, new object[] {
                        attachmentId}, this.onEndDocument_OpenFileDelegate, this.onDocument_OpenFileCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDocument Document_AddFile(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDocument remoteDocument, byte[] binaryData) {
            return base.Channel.Document_AddFile(remoteDocument, binaryData);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDocument_AddFile(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDocument remoteDocument, byte[] binaryData, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDocument_AddFile(remoteDocument, binaryData, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDocument EndDocument_AddFile(System.IAsyncResult result) {
            return base.Channel.EndDocument_AddFile(result);
        }
        
        private System.IAsyncResult OnBeginDocument_AddFile(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDocument remoteDocument = ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDocument)(inValues[0]));
            byte[] binaryData = ((byte[])(inValues[1]));
            return this.BeginDocument_AddFile(remoteDocument, binaryData, callback, asyncState);
        }
        
        private object[] OnEndDocument_AddFile(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDocument retVal = this.EndDocument_AddFile(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDocument_AddFileCompleted(object state) {
            if ((this.Document_AddFileCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Document_AddFileCompleted(this, new Document_AddFileCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Document_AddFileAsync(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDocument remoteDocument, byte[] binaryData) {
            this.Document_AddFileAsync(remoteDocument, binaryData, null);
        }
        
        public void Document_AddFileAsync(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDocument remoteDocument, byte[] binaryData, object userState) {
            if ((this.onBeginDocument_AddFileDelegate == null)) {
                this.onBeginDocument_AddFileDelegate = new BeginOperationDelegate(this.OnBeginDocument_AddFile);
            }
            if ((this.onEndDocument_AddFileDelegate == null)) {
                this.onEndDocument_AddFileDelegate = new EndOperationDelegate(this.OnEndDocument_AddFile);
            }
            if ((this.onDocument_AddFileCompletedDelegate == null)) {
                this.onDocument_AddFileCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDocument_AddFileCompleted);
            }
            base.InvokeAsync(this.onBeginDocument_AddFileDelegate, new object[] {
                        remoteDocument,
                        binaryData}, this.onEndDocument_AddFileDelegate, this.onDocument_AddFileCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDocument Document_AddUrl(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDocument remoteDocument) {
            return base.Channel.Document_AddUrl(remoteDocument);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDocument_AddUrl(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDocument remoteDocument, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDocument_AddUrl(remoteDocument, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDocument EndDocument_AddUrl(System.IAsyncResult result) {
            return base.Channel.EndDocument_AddUrl(result);
        }
        
        private System.IAsyncResult OnBeginDocument_AddUrl(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDocument remoteDocument = ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDocument)(inValues[0]));
            return this.BeginDocument_AddUrl(remoteDocument, callback, asyncState);
        }
        
        private object[] OnEndDocument_AddUrl(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDocument retVal = this.EndDocument_AddUrl(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDocument_AddUrlCompleted(object state) {
            if ((this.Document_AddUrlCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Document_AddUrlCompleted(this, new Document_AddUrlCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Document_AddUrlAsync(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDocument remoteDocument) {
            this.Document_AddUrlAsync(remoteDocument, null);
        }
        
        public void Document_AddUrlAsync(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDocument remoteDocument, object userState) {
            if ((this.onBeginDocument_AddUrlDelegate == null)) {
                this.onBeginDocument_AddUrlDelegate = new BeginOperationDelegate(this.OnBeginDocument_AddUrl);
            }
            if ((this.onEndDocument_AddUrlDelegate == null)) {
                this.onEndDocument_AddUrlDelegate = new EndOperationDelegate(this.OnEndDocument_AddUrl);
            }
            if ((this.onDocument_AddUrlCompletedDelegate == null)) {
                this.onDocument_AddUrlCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDocument_AddUrlCompleted);
            }
            base.InvokeAsync(this.onBeginDocument_AddUrlDelegate, new object[] {
                        remoteDocument}, this.onEndDocument_AddUrlDelegate, this.onDocument_AddUrlCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDocumentVersion Document_AddFileVersion(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDocumentVersion remoteDocumentVersion, byte[] binaryData, bool makeCurrent) {
            return base.Channel.Document_AddFileVersion(remoteDocumentVersion, binaryData, makeCurrent);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDocument_AddFileVersion(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDocumentVersion remoteDocumentVersion, byte[] binaryData, bool makeCurrent, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDocument_AddFileVersion(remoteDocumentVersion, binaryData, makeCurrent, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDocumentVersion EndDocument_AddFileVersion(System.IAsyncResult result) {
            return base.Channel.EndDocument_AddFileVersion(result);
        }
        
        private System.IAsyncResult OnBeginDocument_AddFileVersion(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDocumentVersion remoteDocumentVersion = ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDocumentVersion)(inValues[0]));
            byte[] binaryData = ((byte[])(inValues[1]));
            bool makeCurrent = ((bool)(inValues[2]));
            return this.BeginDocument_AddFileVersion(remoteDocumentVersion, binaryData, makeCurrent, callback, asyncState);
        }
        
        private object[] OnEndDocument_AddFileVersion(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDocumentVersion retVal = this.EndDocument_AddFileVersion(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDocument_AddFileVersionCompleted(object state) {
            if ((this.Document_AddFileVersionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Document_AddFileVersionCompleted(this, new Document_AddFileVersionCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Document_AddFileVersionAsync(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDocumentVersion remoteDocumentVersion, byte[] binaryData, bool makeCurrent) {
            this.Document_AddFileVersionAsync(remoteDocumentVersion, binaryData, makeCurrent, null);
        }
        
        public void Document_AddFileVersionAsync(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDocumentVersion remoteDocumentVersion, byte[] binaryData, bool makeCurrent, object userState) {
            if ((this.onBeginDocument_AddFileVersionDelegate == null)) {
                this.onBeginDocument_AddFileVersionDelegate = new BeginOperationDelegate(this.OnBeginDocument_AddFileVersion);
            }
            if ((this.onEndDocument_AddFileVersionDelegate == null)) {
                this.onEndDocument_AddFileVersionDelegate = new EndOperationDelegate(this.OnEndDocument_AddFileVersion);
            }
            if ((this.onDocument_AddFileVersionCompletedDelegate == null)) {
                this.onDocument_AddFileVersionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDocument_AddFileVersionCompleted);
            }
            base.InvokeAsync(this.onBeginDocument_AddFileVersionDelegate, new object[] {
                        remoteDocumentVersion,
                        binaryData,
                        makeCurrent}, this.onEndDocument_AddFileVersionDelegate, this.onDocument_AddFileVersionCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDocumentVersion Document_AddUrlVersion(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDocumentVersion remoteDocumentVersion, bool makeCurrent) {
            return base.Channel.Document_AddUrlVersion(remoteDocumentVersion, makeCurrent);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDocument_AddUrlVersion(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDocumentVersion remoteDocumentVersion, bool makeCurrent, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDocument_AddUrlVersion(remoteDocumentVersion, makeCurrent, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDocumentVersion EndDocument_AddUrlVersion(System.IAsyncResult result) {
            return base.Channel.EndDocument_AddUrlVersion(result);
        }
        
        private System.IAsyncResult OnBeginDocument_AddUrlVersion(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDocumentVersion remoteDocumentVersion = ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDocumentVersion)(inValues[0]));
            bool makeCurrent = ((bool)(inValues[1]));
            return this.BeginDocument_AddUrlVersion(remoteDocumentVersion, makeCurrent, callback, asyncState);
        }
        
        private object[] OnEndDocument_AddUrlVersion(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDocumentVersion retVal = this.EndDocument_AddUrlVersion(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDocument_AddUrlVersionCompleted(object state) {
            if ((this.Document_AddUrlVersionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Document_AddUrlVersionCompleted(this, new Document_AddUrlVersionCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Document_AddUrlVersionAsync(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDocumentVersion remoteDocumentVersion, bool makeCurrent) {
            this.Document_AddUrlVersionAsync(remoteDocumentVersion, makeCurrent, null);
        }
        
        public void Document_AddUrlVersionAsync(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDocumentVersion remoteDocumentVersion, bool makeCurrent, object userState) {
            if ((this.onBeginDocument_AddUrlVersionDelegate == null)) {
                this.onBeginDocument_AddUrlVersionDelegate = new BeginOperationDelegate(this.OnBeginDocument_AddUrlVersion);
            }
            if ((this.onEndDocument_AddUrlVersionDelegate == null)) {
                this.onEndDocument_AddUrlVersionDelegate = new EndOperationDelegate(this.OnEndDocument_AddUrlVersion);
            }
            if ((this.onDocument_AddUrlVersionCompletedDelegate == null)) {
                this.onDocument_AddUrlVersionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDocument_AddUrlVersionCompleted);
            }
            base.InvokeAsync(this.onBeginDocument_AddUrlVersionDelegate, new object[] {
                        remoteDocumentVersion,
                        makeCurrent}, this.onEndDocument_AddUrlVersionDelegate, this.onDocument_AddUrlVersionCompletedDelegate, userState);
        }
        
        public void Document_DeleteFromArtifact(int attachmentId, int artifactTypeId, int artifactId) {
            base.Channel.Document_DeleteFromArtifact(attachmentId, artifactTypeId, artifactId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDocument_DeleteFromArtifact(int attachmentId, int artifactTypeId, int artifactId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDocument_DeleteFromArtifact(attachmentId, artifactTypeId, artifactId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndDocument_DeleteFromArtifact(System.IAsyncResult result) {
            base.Channel.EndDocument_DeleteFromArtifact(result);
        }
        
        private System.IAsyncResult OnBeginDocument_DeleteFromArtifact(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int attachmentId = ((int)(inValues[0]));
            int artifactTypeId = ((int)(inValues[1]));
            int artifactId = ((int)(inValues[2]));
            return this.BeginDocument_DeleteFromArtifact(attachmentId, artifactTypeId, artifactId, callback, asyncState);
        }
        
        private object[] OnEndDocument_DeleteFromArtifact(System.IAsyncResult result) {
            this.EndDocument_DeleteFromArtifact(result);
            return null;
        }
        
        private void OnDocument_DeleteFromArtifactCompleted(object state) {
            if ((this.Document_DeleteFromArtifactCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Document_DeleteFromArtifactCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Document_DeleteFromArtifactAsync(int attachmentId, int artifactTypeId, int artifactId) {
            this.Document_DeleteFromArtifactAsync(attachmentId, artifactTypeId, artifactId, null);
        }
        
        public void Document_DeleteFromArtifactAsync(int attachmentId, int artifactTypeId, int artifactId, object userState) {
            if ((this.onBeginDocument_DeleteFromArtifactDelegate == null)) {
                this.onBeginDocument_DeleteFromArtifactDelegate = new BeginOperationDelegate(this.OnBeginDocument_DeleteFromArtifact);
            }
            if ((this.onEndDocument_DeleteFromArtifactDelegate == null)) {
                this.onEndDocument_DeleteFromArtifactDelegate = new EndOperationDelegate(this.OnEndDocument_DeleteFromArtifact);
            }
            if ((this.onDocument_DeleteFromArtifactCompletedDelegate == null)) {
                this.onDocument_DeleteFromArtifactCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDocument_DeleteFromArtifactCompleted);
            }
            base.InvokeAsync(this.onBeginDocument_DeleteFromArtifactDelegate, new object[] {
                        attachmentId,
                        artifactTypeId,
                        artifactId}, this.onEndDocument_DeleteFromArtifactDelegate, this.onDocument_DeleteFromArtifactCompletedDelegate, userState);
        }
        
        public void Document_Delete(int attachmentId) {
            base.Channel.Document_Delete(attachmentId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDocument_Delete(int attachmentId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDocument_Delete(attachmentId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndDocument_Delete(System.IAsyncResult result) {
            base.Channel.EndDocument_Delete(result);
        }
        
        private System.IAsyncResult OnBeginDocument_Delete(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int attachmentId = ((int)(inValues[0]));
            return this.BeginDocument_Delete(attachmentId, callback, asyncState);
        }
        
        private object[] OnEndDocument_Delete(System.IAsyncResult result) {
            this.EndDocument_Delete(result);
            return null;
        }
        
        private void OnDocument_DeleteCompleted(object state) {
            if ((this.Document_DeleteCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Document_DeleteCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Document_DeleteAsync(int attachmentId) {
            this.Document_DeleteAsync(attachmentId, null);
        }
        
        public void Document_DeleteAsync(int attachmentId, object userState) {
            if ((this.onBeginDocument_DeleteDelegate == null)) {
                this.onBeginDocument_DeleteDelegate = new BeginOperationDelegate(this.OnBeginDocument_Delete);
            }
            if ((this.onEndDocument_DeleteDelegate == null)) {
                this.onEndDocument_DeleteDelegate = new EndOperationDelegate(this.OnEndDocument_Delete);
            }
            if ((this.onDocument_DeleteCompletedDelegate == null)) {
                this.onDocument_DeleteCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDocument_DeleteCompleted);
            }
            base.InvokeAsync(this.onBeginDocument_DeleteDelegate, new object[] {
                        attachmentId}, this.onEndDocument_DeleteDelegate, this.onDocument_DeleteCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDocument[] Document_Retrieve(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSort remoteSort, int startingRow, int numberRows) {
            return base.Channel.Document_Retrieve(remoteFilters, remoteSort, startingRow, numberRows);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDocument_Retrieve(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSort remoteSort, int startingRow, int numberRows, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDocument_Retrieve(remoteFilters, remoteSort, startingRow, numberRows, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDocument[] EndDocument_Retrieve(System.IAsyncResult result) {
            return base.Channel.EndDocument_Retrieve(result);
        }
        
        private System.IAsyncResult OnBeginDocument_Retrieve(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters = ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[])(inValues[0]));
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSort remoteSort = ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSort)(inValues[1]));
            int startingRow = ((int)(inValues[2]));
            int numberRows = ((int)(inValues[3]));
            return this.BeginDocument_Retrieve(remoteFilters, remoteSort, startingRow, numberRows, callback, asyncState);
        }
        
        private object[] OnEndDocument_Retrieve(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDocument[] retVal = this.EndDocument_Retrieve(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDocument_RetrieveCompleted(object state) {
            if ((this.Document_RetrieveCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Document_RetrieveCompleted(this, new Document_RetrieveCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Document_RetrieveAsync(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSort remoteSort, int startingRow, int numberRows) {
            this.Document_RetrieveAsync(remoteFilters, remoteSort, startingRow, numberRows, null);
        }
        
        public void Document_RetrieveAsync(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSort remoteSort, int startingRow, int numberRows, object userState) {
            if ((this.onBeginDocument_RetrieveDelegate == null)) {
                this.onBeginDocument_RetrieveDelegate = new BeginOperationDelegate(this.OnBeginDocument_Retrieve);
            }
            if ((this.onEndDocument_RetrieveDelegate == null)) {
                this.onEndDocument_RetrieveDelegate = new EndOperationDelegate(this.OnEndDocument_Retrieve);
            }
            if ((this.onDocument_RetrieveCompletedDelegate == null)) {
                this.onDocument_RetrieveCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDocument_RetrieveCompleted);
            }
            base.InvokeAsync(this.onBeginDocument_RetrieveDelegate, new object[] {
                        remoteFilters,
                        remoteSort,
                        startingRow,
                        numberRows}, this.onEndDocument_RetrieveDelegate, this.onDocument_RetrieveCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDocument[] Document_RetrieveForFolder(int folderId, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSort remoteSort, int startingRow, int numberRows) {
            return base.Channel.Document_RetrieveForFolder(folderId, remoteFilters, remoteSort, startingRow, numberRows);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDocument_RetrieveForFolder(int folderId, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSort remoteSort, int startingRow, int numberRows, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDocument_RetrieveForFolder(folderId, remoteFilters, remoteSort, startingRow, numberRows, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDocument[] EndDocument_RetrieveForFolder(System.IAsyncResult result) {
            return base.Channel.EndDocument_RetrieveForFolder(result);
        }
        
        private System.IAsyncResult OnBeginDocument_RetrieveForFolder(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int folderId = ((int)(inValues[0]));
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters = ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[])(inValues[1]));
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSort remoteSort = ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSort)(inValues[2]));
            int startingRow = ((int)(inValues[3]));
            int numberRows = ((int)(inValues[4]));
            return this.BeginDocument_RetrieveForFolder(folderId, remoteFilters, remoteSort, startingRow, numberRows, callback, asyncState);
        }
        
        private object[] OnEndDocument_RetrieveForFolder(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDocument[] retVal = this.EndDocument_RetrieveForFolder(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDocument_RetrieveForFolderCompleted(object state) {
            if ((this.Document_RetrieveForFolderCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Document_RetrieveForFolderCompleted(this, new Document_RetrieveForFolderCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Document_RetrieveForFolderAsync(int folderId, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSort remoteSort, int startingRow, int numberRows) {
            this.Document_RetrieveForFolderAsync(folderId, remoteFilters, remoteSort, startingRow, numberRows, null);
        }
        
        public void Document_RetrieveForFolderAsync(int folderId, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSort remoteSort, int startingRow, int numberRows, object userState) {
            if ((this.onBeginDocument_RetrieveForFolderDelegate == null)) {
                this.onBeginDocument_RetrieveForFolderDelegate = new BeginOperationDelegate(this.OnBeginDocument_RetrieveForFolder);
            }
            if ((this.onEndDocument_RetrieveForFolderDelegate == null)) {
                this.onEndDocument_RetrieveForFolderDelegate = new EndOperationDelegate(this.OnEndDocument_RetrieveForFolder);
            }
            if ((this.onDocument_RetrieveForFolderCompletedDelegate == null)) {
                this.onDocument_RetrieveForFolderCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDocument_RetrieveForFolderCompleted);
            }
            base.InvokeAsync(this.onBeginDocument_RetrieveForFolderDelegate, new object[] {
                        folderId,
                        remoteFilters,
                        remoteSort,
                        startingRow,
                        numberRows}, this.onEndDocument_RetrieveForFolderDelegate, this.onDocument_RetrieveForFolderCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDocument[] Document_RetrieveForArtifact(int artifactTypeId, int artifactId, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSort remoteSort) {
            return base.Channel.Document_RetrieveForArtifact(artifactTypeId, artifactId, remoteFilters, remoteSort);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDocument_RetrieveForArtifact(int artifactTypeId, int artifactId, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSort remoteSort, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDocument_RetrieveForArtifact(artifactTypeId, artifactId, remoteFilters, remoteSort, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDocument[] EndDocument_RetrieveForArtifact(System.IAsyncResult result) {
            return base.Channel.EndDocument_RetrieveForArtifact(result);
        }
        
        private System.IAsyncResult OnBeginDocument_RetrieveForArtifact(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int artifactTypeId = ((int)(inValues[0]));
            int artifactId = ((int)(inValues[1]));
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters = ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[])(inValues[2]));
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSort remoteSort = ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSort)(inValues[3]));
            return this.BeginDocument_RetrieveForArtifact(artifactTypeId, artifactId, remoteFilters, remoteSort, callback, asyncState);
        }
        
        private object[] OnEndDocument_RetrieveForArtifact(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDocument[] retVal = this.EndDocument_RetrieveForArtifact(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDocument_RetrieveForArtifactCompleted(object state) {
            if ((this.Document_RetrieveForArtifactCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Document_RetrieveForArtifactCompleted(this, new Document_RetrieveForArtifactCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Document_RetrieveForArtifactAsync(int artifactTypeId, int artifactId, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSort remoteSort) {
            this.Document_RetrieveForArtifactAsync(artifactTypeId, artifactId, remoteFilters, remoteSort, null);
        }
        
        public void Document_RetrieveForArtifactAsync(int artifactTypeId, int artifactId, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSort remoteSort, object userState) {
            if ((this.onBeginDocument_RetrieveForArtifactDelegate == null)) {
                this.onBeginDocument_RetrieveForArtifactDelegate = new BeginOperationDelegate(this.OnBeginDocument_RetrieveForArtifact);
            }
            if ((this.onEndDocument_RetrieveForArtifactDelegate == null)) {
                this.onEndDocument_RetrieveForArtifactDelegate = new EndOperationDelegate(this.OnEndDocument_RetrieveForArtifact);
            }
            if ((this.onDocument_RetrieveForArtifactCompletedDelegate == null)) {
                this.onDocument_RetrieveForArtifactCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDocument_RetrieveForArtifactCompleted);
            }
            base.InvokeAsync(this.onBeginDocument_RetrieveForArtifactDelegate, new object[] {
                        artifactTypeId,
                        artifactId,
                        remoteFilters,
                        remoteSort}, this.onEndDocument_RetrieveForArtifactDelegate, this.onDocument_RetrieveForArtifactCompletedDelegate, userState);
        }
        
        public void Document_AddToArtifactId(int artifactTypeId, int artifactId, int attachmentId) {
            base.Channel.Document_AddToArtifactId(artifactTypeId, artifactId, attachmentId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDocument_AddToArtifactId(int artifactTypeId, int artifactId, int attachmentId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDocument_AddToArtifactId(artifactTypeId, artifactId, attachmentId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndDocument_AddToArtifactId(System.IAsyncResult result) {
            base.Channel.EndDocument_AddToArtifactId(result);
        }
        
        private System.IAsyncResult OnBeginDocument_AddToArtifactId(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int artifactTypeId = ((int)(inValues[0]));
            int artifactId = ((int)(inValues[1]));
            int attachmentId = ((int)(inValues[2]));
            return this.BeginDocument_AddToArtifactId(artifactTypeId, artifactId, attachmentId, callback, asyncState);
        }
        
        private object[] OnEndDocument_AddToArtifactId(System.IAsyncResult result) {
            this.EndDocument_AddToArtifactId(result);
            return null;
        }
        
        private void OnDocument_AddToArtifactIdCompleted(object state) {
            if ((this.Document_AddToArtifactIdCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Document_AddToArtifactIdCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Document_AddToArtifactIdAsync(int artifactTypeId, int artifactId, int attachmentId) {
            this.Document_AddToArtifactIdAsync(artifactTypeId, artifactId, attachmentId, null);
        }
        
        public void Document_AddToArtifactIdAsync(int artifactTypeId, int artifactId, int attachmentId, object userState) {
            if ((this.onBeginDocument_AddToArtifactIdDelegate == null)) {
                this.onBeginDocument_AddToArtifactIdDelegate = new BeginOperationDelegate(this.OnBeginDocument_AddToArtifactId);
            }
            if ((this.onEndDocument_AddToArtifactIdDelegate == null)) {
                this.onEndDocument_AddToArtifactIdDelegate = new EndOperationDelegate(this.OnEndDocument_AddToArtifactId);
            }
            if ((this.onDocument_AddToArtifactIdCompletedDelegate == null)) {
                this.onDocument_AddToArtifactIdCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDocument_AddToArtifactIdCompleted);
            }
            base.InvokeAsync(this.onBeginDocument_AddToArtifactIdDelegate, new object[] {
                        artifactTypeId,
                        artifactId,
                        attachmentId}, this.onEndDocument_AddToArtifactIdDelegate, this.onDocument_AddToArtifactIdCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDocument Document_RetrieveById(int attachmentId) {
            return base.Channel.Document_RetrieveById(attachmentId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDocument_RetrieveById(int attachmentId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDocument_RetrieveById(attachmentId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDocument EndDocument_RetrieveById(System.IAsyncResult result) {
            return base.Channel.EndDocument_RetrieveById(result);
        }
        
        private System.IAsyncResult OnBeginDocument_RetrieveById(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int attachmentId = ((int)(inValues[0]));
            return this.BeginDocument_RetrieveById(attachmentId, callback, asyncState);
        }
        
        private object[] OnEndDocument_RetrieveById(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDocument retVal = this.EndDocument_RetrieveById(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDocument_RetrieveByIdCompleted(object state) {
            if ((this.Document_RetrieveByIdCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Document_RetrieveByIdCompleted(this, new Document_RetrieveByIdCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Document_RetrieveByIdAsync(int attachmentId) {
            this.Document_RetrieveByIdAsync(attachmentId, null);
        }
        
        public void Document_RetrieveByIdAsync(int attachmentId, object userState) {
            if ((this.onBeginDocument_RetrieveByIdDelegate == null)) {
                this.onBeginDocument_RetrieveByIdDelegate = new BeginOperationDelegate(this.OnBeginDocument_RetrieveById);
            }
            if ((this.onEndDocument_RetrieveByIdDelegate == null)) {
                this.onEndDocument_RetrieveByIdDelegate = new EndOperationDelegate(this.OnEndDocument_RetrieveById);
            }
            if ((this.onDocument_RetrieveByIdCompletedDelegate == null)) {
                this.onDocument_RetrieveByIdCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDocument_RetrieveByIdCompleted);
            }
            base.InvokeAsync(this.onBeginDocument_RetrieveByIdDelegate, new object[] {
                        attachmentId}, this.onEndDocument_RetrieveByIdDelegate, this.onDocument_RetrieveByIdCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDocumentType[] Document_RetrieveTypes(bool activeOnly) {
            return base.Channel.Document_RetrieveTypes(activeOnly);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDocument_RetrieveTypes(bool activeOnly, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDocument_RetrieveTypes(activeOnly, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDocumentType[] EndDocument_RetrieveTypes(System.IAsyncResult result) {
            return base.Channel.EndDocument_RetrieveTypes(result);
        }
        
        private System.IAsyncResult OnBeginDocument_RetrieveTypes(object[] inValues, System.AsyncCallback callback, object asyncState) {
            bool activeOnly = ((bool)(inValues[0]));
            return this.BeginDocument_RetrieveTypes(activeOnly, callback, asyncState);
        }
        
        private object[] OnEndDocument_RetrieveTypes(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDocumentType[] retVal = this.EndDocument_RetrieveTypes(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDocument_RetrieveTypesCompleted(object state) {
            if ((this.Document_RetrieveTypesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Document_RetrieveTypesCompleted(this, new Document_RetrieveTypesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Document_RetrieveTypesAsync(bool activeOnly) {
            this.Document_RetrieveTypesAsync(activeOnly, null);
        }
        
        public void Document_RetrieveTypesAsync(bool activeOnly, object userState) {
            if ((this.onBeginDocument_RetrieveTypesDelegate == null)) {
                this.onBeginDocument_RetrieveTypesDelegate = new BeginOperationDelegate(this.OnBeginDocument_RetrieveTypes);
            }
            if ((this.onEndDocument_RetrieveTypesDelegate == null)) {
                this.onEndDocument_RetrieveTypesDelegate = new EndOperationDelegate(this.OnEndDocument_RetrieveTypes);
            }
            if ((this.onDocument_RetrieveTypesCompletedDelegate == null)) {
                this.onDocument_RetrieveTypesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDocument_RetrieveTypesCompleted);
            }
            base.InvokeAsync(this.onBeginDocument_RetrieveTypesDelegate, new object[] {
                        activeOnly}, this.onEndDocument_RetrieveTypesDelegate, this.onDocument_RetrieveTypesCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDocumentFolder[] Document_RetrieveFolders() {
            return base.Channel.Document_RetrieveFolders();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDocument_RetrieveFolders(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDocument_RetrieveFolders(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDocumentFolder[] EndDocument_RetrieveFolders(System.IAsyncResult result) {
            return base.Channel.EndDocument_RetrieveFolders(result);
        }
        
        private System.IAsyncResult OnBeginDocument_RetrieveFolders(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginDocument_RetrieveFolders(callback, asyncState);
        }
        
        private object[] OnEndDocument_RetrieveFolders(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDocumentFolder[] retVal = this.EndDocument_RetrieveFolders(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDocument_RetrieveFoldersCompleted(object state) {
            if ((this.Document_RetrieveFoldersCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Document_RetrieveFoldersCompleted(this, new Document_RetrieveFoldersCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Document_RetrieveFoldersAsync() {
            this.Document_RetrieveFoldersAsync(null);
        }
        
        public void Document_RetrieveFoldersAsync(object userState) {
            if ((this.onBeginDocument_RetrieveFoldersDelegate == null)) {
                this.onBeginDocument_RetrieveFoldersDelegate = new BeginOperationDelegate(this.OnBeginDocument_RetrieveFolders);
            }
            if ((this.onEndDocument_RetrieveFoldersDelegate == null)) {
                this.onEndDocument_RetrieveFoldersDelegate = new EndOperationDelegate(this.OnEndDocument_RetrieveFolders);
            }
            if ((this.onDocument_RetrieveFoldersCompletedDelegate == null)) {
                this.onDocument_RetrieveFoldersCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDocument_RetrieveFoldersCompleted);
            }
            base.InvokeAsync(this.onBeginDocument_RetrieveFoldersDelegate, null, this.onEndDocument_RetrieveFoldersDelegate, this.onDocument_RetrieveFoldersCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDocumentFolder Document_RetrieveFolderById(int folderId) {
            return base.Channel.Document_RetrieveFolderById(folderId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDocument_RetrieveFolderById(int folderId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDocument_RetrieveFolderById(folderId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDocumentFolder EndDocument_RetrieveFolderById(System.IAsyncResult result) {
            return base.Channel.EndDocument_RetrieveFolderById(result);
        }
        
        private System.IAsyncResult OnBeginDocument_RetrieveFolderById(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int folderId = ((int)(inValues[0]));
            return this.BeginDocument_RetrieveFolderById(folderId, callback, asyncState);
        }
        
        private object[] OnEndDocument_RetrieveFolderById(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDocumentFolder retVal = this.EndDocument_RetrieveFolderById(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDocument_RetrieveFolderByIdCompleted(object state) {
            if ((this.Document_RetrieveFolderByIdCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Document_RetrieveFolderByIdCompleted(this, new Document_RetrieveFolderByIdCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Document_RetrieveFolderByIdAsync(int folderId) {
            this.Document_RetrieveFolderByIdAsync(folderId, null);
        }
        
        public void Document_RetrieveFolderByIdAsync(int folderId, object userState) {
            if ((this.onBeginDocument_RetrieveFolderByIdDelegate == null)) {
                this.onBeginDocument_RetrieveFolderByIdDelegate = new BeginOperationDelegate(this.OnBeginDocument_RetrieveFolderById);
            }
            if ((this.onEndDocument_RetrieveFolderByIdDelegate == null)) {
                this.onEndDocument_RetrieveFolderByIdDelegate = new EndOperationDelegate(this.OnEndDocument_RetrieveFolderById);
            }
            if ((this.onDocument_RetrieveFolderByIdCompletedDelegate == null)) {
                this.onDocument_RetrieveFolderByIdCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDocument_RetrieveFolderByIdCompleted);
            }
            base.InvokeAsync(this.onBeginDocument_RetrieveFolderByIdDelegate, new object[] {
                        folderId}, this.onEndDocument_RetrieveFolderByIdDelegate, this.onDocument_RetrieveFolderByIdCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDocumentFolder Document_AddFolder(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDocumentFolder remoteDocumentFolder) {
            return base.Channel.Document_AddFolder(remoteDocumentFolder);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDocument_AddFolder(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDocumentFolder remoteDocumentFolder, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDocument_AddFolder(remoteDocumentFolder, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDocumentFolder EndDocument_AddFolder(System.IAsyncResult result) {
            return base.Channel.EndDocument_AddFolder(result);
        }
        
        private System.IAsyncResult OnBeginDocument_AddFolder(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDocumentFolder remoteDocumentFolder = ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDocumentFolder)(inValues[0]));
            return this.BeginDocument_AddFolder(remoteDocumentFolder, callback, asyncState);
        }
        
        private object[] OnEndDocument_AddFolder(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDocumentFolder retVal = this.EndDocument_AddFolder(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDocument_AddFolderCompleted(object state) {
            if ((this.Document_AddFolderCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Document_AddFolderCompleted(this, new Document_AddFolderCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Document_AddFolderAsync(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDocumentFolder remoteDocumentFolder) {
            this.Document_AddFolderAsync(remoteDocumentFolder, null);
        }
        
        public void Document_AddFolderAsync(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDocumentFolder remoteDocumentFolder, object userState) {
            if ((this.onBeginDocument_AddFolderDelegate == null)) {
                this.onBeginDocument_AddFolderDelegate = new BeginOperationDelegate(this.OnBeginDocument_AddFolder);
            }
            if ((this.onEndDocument_AddFolderDelegate == null)) {
                this.onEndDocument_AddFolderDelegate = new EndOperationDelegate(this.OnEndDocument_AddFolder);
            }
            if ((this.onDocument_AddFolderCompletedDelegate == null)) {
                this.onDocument_AddFolderCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDocument_AddFolderCompleted);
            }
            base.InvokeAsync(this.onBeginDocument_AddFolderDelegate, new object[] {
                        remoteDocumentFolder}, this.onEndDocument_AddFolderDelegate, this.onDocument_AddFolderCompletedDelegate, userState);
        }
        
        public void Document_DeleteFolder(int projectAttachmentFolderId) {
            base.Channel.Document_DeleteFolder(projectAttachmentFolderId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDocument_DeleteFolder(int projectAttachmentFolderId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDocument_DeleteFolder(projectAttachmentFolderId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndDocument_DeleteFolder(System.IAsyncResult result) {
            base.Channel.EndDocument_DeleteFolder(result);
        }
        
        private System.IAsyncResult OnBeginDocument_DeleteFolder(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int projectAttachmentFolderId = ((int)(inValues[0]));
            return this.BeginDocument_DeleteFolder(projectAttachmentFolderId, callback, asyncState);
        }
        
        private object[] OnEndDocument_DeleteFolder(System.IAsyncResult result) {
            this.EndDocument_DeleteFolder(result);
            return null;
        }
        
        private void OnDocument_DeleteFolderCompleted(object state) {
            if ((this.Document_DeleteFolderCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Document_DeleteFolderCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Document_DeleteFolderAsync(int projectAttachmentFolderId) {
            this.Document_DeleteFolderAsync(projectAttachmentFolderId, null);
        }
        
        public void Document_DeleteFolderAsync(int projectAttachmentFolderId, object userState) {
            if ((this.onBeginDocument_DeleteFolderDelegate == null)) {
                this.onBeginDocument_DeleteFolderDelegate = new BeginOperationDelegate(this.OnBeginDocument_DeleteFolder);
            }
            if ((this.onEndDocument_DeleteFolderDelegate == null)) {
                this.onEndDocument_DeleteFolderDelegate = new EndOperationDelegate(this.OnEndDocument_DeleteFolder);
            }
            if ((this.onDocument_DeleteFolderCompletedDelegate == null)) {
                this.onDocument_DeleteFolderCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDocument_DeleteFolderCompleted);
            }
            base.InvokeAsync(this.onBeginDocument_DeleteFolderDelegate, new object[] {
                        projectAttachmentFolderId}, this.onEndDocument_DeleteFolderDelegate, this.onDocument_DeleteFolderCompletedDelegate, userState);
        }
        
        public void Document_UpdateFolder(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDocumentFolder remoteDocumentFolder) {
            base.Channel.Document_UpdateFolder(remoteDocumentFolder);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDocument_UpdateFolder(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDocumentFolder remoteDocumentFolder, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDocument_UpdateFolder(remoteDocumentFolder, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndDocument_UpdateFolder(System.IAsyncResult result) {
            base.Channel.EndDocument_UpdateFolder(result);
        }
        
        private System.IAsyncResult OnBeginDocument_UpdateFolder(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDocumentFolder remoteDocumentFolder = ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDocumentFolder)(inValues[0]));
            return this.BeginDocument_UpdateFolder(remoteDocumentFolder, callback, asyncState);
        }
        
        private object[] OnEndDocument_UpdateFolder(System.IAsyncResult result) {
            this.EndDocument_UpdateFolder(result);
            return null;
        }
        
        private void OnDocument_UpdateFolderCompleted(object state) {
            if ((this.Document_UpdateFolderCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Document_UpdateFolderCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Document_UpdateFolderAsync(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDocumentFolder remoteDocumentFolder) {
            this.Document_UpdateFolderAsync(remoteDocumentFolder, null);
        }
        
        public void Document_UpdateFolderAsync(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteDocumentFolder remoteDocumentFolder, object userState) {
            if ((this.onBeginDocument_UpdateFolderDelegate == null)) {
                this.onBeginDocument_UpdateFolderDelegate = new BeginOperationDelegate(this.OnBeginDocument_UpdateFolder);
            }
            if ((this.onEndDocument_UpdateFolderDelegate == null)) {
                this.onEndDocument_UpdateFolderDelegate = new EndOperationDelegate(this.OnEndDocument_UpdateFolder);
            }
            if ((this.onDocument_UpdateFolderCompletedDelegate == null)) {
                this.onDocument_UpdateFolderCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDocument_UpdateFolderCompleted);
            }
            base.InvokeAsync(this.onBeginDocument_UpdateFolderDelegate, new object[] {
                        remoteDocumentFolder}, this.onEndDocument_UpdateFolderDelegate, this.onDocument_UpdateFolderCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAssociation Association_Create(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAssociation remoteAssociation) {
            return base.Channel.Association_Create(remoteAssociation);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginAssociation_Create(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAssociation remoteAssociation, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAssociation_Create(remoteAssociation, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAssociation EndAssociation_Create(System.IAsyncResult result) {
            return base.Channel.EndAssociation_Create(result);
        }
        
        private System.IAsyncResult OnBeginAssociation_Create(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAssociation remoteAssociation = ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAssociation)(inValues[0]));
            return this.BeginAssociation_Create(remoteAssociation, callback, asyncState);
        }
        
        private object[] OnEndAssociation_Create(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAssociation retVal = this.EndAssociation_Create(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAssociation_CreateCompleted(object state) {
            if ((this.Association_CreateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Association_CreateCompleted(this, new Association_CreateCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Association_CreateAsync(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAssociation remoteAssociation) {
            this.Association_CreateAsync(remoteAssociation, null);
        }
        
        public void Association_CreateAsync(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAssociation remoteAssociation, object userState) {
            if ((this.onBeginAssociation_CreateDelegate == null)) {
                this.onBeginAssociation_CreateDelegate = new BeginOperationDelegate(this.OnBeginAssociation_Create);
            }
            if ((this.onEndAssociation_CreateDelegate == null)) {
                this.onEndAssociation_CreateDelegate = new EndOperationDelegate(this.OnEndAssociation_Create);
            }
            if ((this.onAssociation_CreateCompletedDelegate == null)) {
                this.onAssociation_CreateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAssociation_CreateCompleted);
            }
            base.InvokeAsync(this.onBeginAssociation_CreateDelegate, new object[] {
                        remoteAssociation}, this.onEndAssociation_CreateDelegate, this.onAssociation_CreateCompletedDelegate, userState);
        }
        
        public void Association_Update(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAssociation remoteAssociation) {
            base.Channel.Association_Update(remoteAssociation);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginAssociation_Update(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAssociation remoteAssociation, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAssociation_Update(remoteAssociation, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndAssociation_Update(System.IAsyncResult result) {
            base.Channel.EndAssociation_Update(result);
        }
        
        private System.IAsyncResult OnBeginAssociation_Update(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAssociation remoteAssociation = ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAssociation)(inValues[0]));
            return this.BeginAssociation_Update(remoteAssociation, callback, asyncState);
        }
        
        private object[] OnEndAssociation_Update(System.IAsyncResult result) {
            this.EndAssociation_Update(result);
            return null;
        }
        
        private void OnAssociation_UpdateCompleted(object state) {
            if ((this.Association_UpdateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Association_UpdateCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Association_UpdateAsync(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAssociation remoteAssociation) {
            this.Association_UpdateAsync(remoteAssociation, null);
        }
        
        public void Association_UpdateAsync(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAssociation remoteAssociation, object userState) {
            if ((this.onBeginAssociation_UpdateDelegate == null)) {
                this.onBeginAssociation_UpdateDelegate = new BeginOperationDelegate(this.OnBeginAssociation_Update);
            }
            if ((this.onEndAssociation_UpdateDelegate == null)) {
                this.onEndAssociation_UpdateDelegate = new EndOperationDelegate(this.OnEndAssociation_Update);
            }
            if ((this.onAssociation_UpdateCompletedDelegate == null)) {
                this.onAssociation_UpdateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAssociation_UpdateCompleted);
            }
            base.InvokeAsync(this.onBeginAssociation_UpdateDelegate, new object[] {
                        remoteAssociation}, this.onEndAssociation_UpdateDelegate, this.onAssociation_UpdateCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAssociation[] Association_RetrieveForArtifact(int artifactTypeId, int artifactId, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSort remoteSort) {
            return base.Channel.Association_RetrieveForArtifact(artifactTypeId, artifactId, remoteFilters, remoteSort);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginAssociation_RetrieveForArtifact(int artifactTypeId, int artifactId, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSort remoteSort, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAssociation_RetrieveForArtifact(artifactTypeId, artifactId, remoteFilters, remoteSort, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAssociation[] EndAssociation_RetrieveForArtifact(System.IAsyncResult result) {
            return base.Channel.EndAssociation_RetrieveForArtifact(result);
        }
        
        private System.IAsyncResult OnBeginAssociation_RetrieveForArtifact(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int artifactTypeId = ((int)(inValues[0]));
            int artifactId = ((int)(inValues[1]));
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters = ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[])(inValues[2]));
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSort remoteSort = ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSort)(inValues[3]));
            return this.BeginAssociation_RetrieveForArtifact(artifactTypeId, artifactId, remoteFilters, remoteSort, callback, asyncState);
        }
        
        private object[] OnEndAssociation_RetrieveForArtifact(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteAssociation[] retVal = this.EndAssociation_RetrieveForArtifact(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAssociation_RetrieveForArtifactCompleted(object state) {
            if ((this.Association_RetrieveForArtifactCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Association_RetrieveForArtifactCompleted(this, new Association_RetrieveForArtifactCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Association_RetrieveForArtifactAsync(int artifactTypeId, int artifactId, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSort remoteSort) {
            this.Association_RetrieveForArtifactAsync(artifactTypeId, artifactId, remoteFilters, remoteSort, null);
        }
        
        public void Association_RetrieveForArtifactAsync(int artifactTypeId, int artifactId, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSort remoteSort, object userState) {
            if ((this.onBeginAssociation_RetrieveForArtifactDelegate == null)) {
                this.onBeginAssociation_RetrieveForArtifactDelegate = new BeginOperationDelegate(this.OnBeginAssociation_RetrieveForArtifact);
            }
            if ((this.onEndAssociation_RetrieveForArtifactDelegate == null)) {
                this.onEndAssociation_RetrieveForArtifactDelegate = new EndOperationDelegate(this.OnEndAssociation_RetrieveForArtifact);
            }
            if ((this.onAssociation_RetrieveForArtifactCompletedDelegate == null)) {
                this.onAssociation_RetrieveForArtifactCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAssociation_RetrieveForArtifactCompleted);
            }
            base.InvokeAsync(this.onBeginAssociation_RetrieveForArtifactDelegate, new object[] {
                        artifactTypeId,
                        artifactId,
                        remoteFilters,
                        remoteSort}, this.onEndAssociation_RetrieveForArtifactDelegate, this.onAssociation_RetrieveForArtifactCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncidentPriority Incident_AddPriority(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncidentPriority remoteIncidentPriority) {
            return base.Channel.Incident_AddPriority(remoteIncidentPriority);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginIncident_AddPriority(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncidentPriority remoteIncidentPriority, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginIncident_AddPriority(remoteIncidentPriority, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncidentPriority EndIncident_AddPriority(System.IAsyncResult result) {
            return base.Channel.EndIncident_AddPriority(result);
        }
        
        private System.IAsyncResult OnBeginIncident_AddPriority(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncidentPriority remoteIncidentPriority = ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncidentPriority)(inValues[0]));
            return this.BeginIncident_AddPriority(remoteIncidentPriority, callback, asyncState);
        }
        
        private object[] OnEndIncident_AddPriority(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncidentPriority retVal = this.EndIncident_AddPriority(result);
            return new object[] {
                    retVal};
        }
        
        private void OnIncident_AddPriorityCompleted(object state) {
            if ((this.Incident_AddPriorityCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Incident_AddPriorityCompleted(this, new Incident_AddPriorityCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Incident_AddPriorityAsync(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncidentPriority remoteIncidentPriority) {
            this.Incident_AddPriorityAsync(remoteIncidentPriority, null);
        }
        
        public void Incident_AddPriorityAsync(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncidentPriority remoteIncidentPriority, object userState) {
            if ((this.onBeginIncident_AddPriorityDelegate == null)) {
                this.onBeginIncident_AddPriorityDelegate = new BeginOperationDelegate(this.OnBeginIncident_AddPriority);
            }
            if ((this.onEndIncident_AddPriorityDelegate == null)) {
                this.onEndIncident_AddPriorityDelegate = new EndOperationDelegate(this.OnEndIncident_AddPriority);
            }
            if ((this.onIncident_AddPriorityCompletedDelegate == null)) {
                this.onIncident_AddPriorityCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnIncident_AddPriorityCompleted);
            }
            base.InvokeAsync(this.onBeginIncident_AddPriorityDelegate, new object[] {
                        remoteIncidentPriority}, this.onEndIncident_AddPriorityDelegate, this.onIncident_AddPriorityCompletedDelegate, userState);
        }
        
        public long Incident_Count(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters) {
            return base.Channel.Incident_Count(remoteFilters);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginIncident_Count(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginIncident_Count(remoteFilters, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public long EndIncident_Count(System.IAsyncResult result) {
            return base.Channel.EndIncident_Count(result);
        }
        
        private System.IAsyncResult OnBeginIncident_Count(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters = ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[])(inValues[0]));
            return this.BeginIncident_Count(remoteFilters, callback, asyncState);
        }
        
        private object[] OnEndIncident_Count(System.IAsyncResult result) {
            long retVal = this.EndIncident_Count(result);
            return new object[] {
                    retVal};
        }
        
        private void OnIncident_CountCompleted(object state) {
            if ((this.Incident_CountCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Incident_CountCompleted(this, new Incident_CountCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Incident_CountAsync(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters) {
            this.Incident_CountAsync(remoteFilters, null);
        }
        
        public void Incident_CountAsync(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters, object userState) {
            if ((this.onBeginIncident_CountDelegate == null)) {
                this.onBeginIncident_CountDelegate = new BeginOperationDelegate(this.OnBeginIncident_Count);
            }
            if ((this.onEndIncident_CountDelegate == null)) {
                this.onEndIncident_CountDelegate = new EndOperationDelegate(this.OnEndIncident_Count);
            }
            if ((this.onIncident_CountCompletedDelegate == null)) {
                this.onIncident_CountCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnIncident_CountCompleted);
            }
            base.InvokeAsync(this.onBeginIncident_CountDelegate, new object[] {
                        remoteFilters}, this.onEndIncident_CountDelegate, this.onIncident_CountCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComment[] Incident_AddComments(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComment[] remoteComments) {
            return base.Channel.Incident_AddComments(remoteComments);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginIncident_AddComments(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComment[] remoteComments, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginIncident_AddComments(remoteComments, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComment[] EndIncident_AddComments(System.IAsyncResult result) {
            return base.Channel.EndIncident_AddComments(result);
        }
        
        private System.IAsyncResult OnBeginIncident_AddComments(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComment[] remoteComments = ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComment[])(inValues[0]));
            return this.BeginIncident_AddComments(remoteComments, callback, asyncState);
        }
        
        private object[] OnEndIncident_AddComments(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComment[] retVal = this.EndIncident_AddComments(result);
            return new object[] {
                    retVal};
        }
        
        private void OnIncident_AddCommentsCompleted(object state) {
            if ((this.Incident_AddCommentsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Incident_AddCommentsCompleted(this, new Incident_AddCommentsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Incident_AddCommentsAsync(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComment[] remoteComments) {
            this.Incident_AddCommentsAsync(remoteComments, null);
        }
        
        public void Incident_AddCommentsAsync(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComment[] remoteComments, object userState) {
            if ((this.onBeginIncident_AddCommentsDelegate == null)) {
                this.onBeginIncident_AddCommentsDelegate = new BeginOperationDelegate(this.OnBeginIncident_AddComments);
            }
            if ((this.onEndIncident_AddCommentsDelegate == null)) {
                this.onEndIncident_AddCommentsDelegate = new EndOperationDelegate(this.OnEndIncident_AddComments);
            }
            if ((this.onIncident_AddCommentsCompletedDelegate == null)) {
                this.onIncident_AddCommentsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnIncident_AddCommentsCompleted);
            }
            base.InvokeAsync(this.onBeginIncident_AddCommentsDelegate, new object[] {
                        remoteComments}, this.onEndIncident_AddCommentsDelegate, this.onIncident_AddCommentsCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncidentSeverity Incident_AddSeverity(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncidentSeverity remoteIncidentSeverity) {
            return base.Channel.Incident_AddSeverity(remoteIncidentSeverity);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginIncident_AddSeverity(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncidentSeverity remoteIncidentSeverity, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginIncident_AddSeverity(remoteIncidentSeverity, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncidentSeverity EndIncident_AddSeverity(System.IAsyncResult result) {
            return base.Channel.EndIncident_AddSeverity(result);
        }
        
        private System.IAsyncResult OnBeginIncident_AddSeverity(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncidentSeverity remoteIncidentSeverity = ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncidentSeverity)(inValues[0]));
            return this.BeginIncident_AddSeverity(remoteIncidentSeverity, callback, asyncState);
        }
        
        private object[] OnEndIncident_AddSeverity(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncidentSeverity retVal = this.EndIncident_AddSeverity(result);
            return new object[] {
                    retVal};
        }
        
        private void OnIncident_AddSeverityCompleted(object state) {
            if ((this.Incident_AddSeverityCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Incident_AddSeverityCompleted(this, new Incident_AddSeverityCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Incident_AddSeverityAsync(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncidentSeverity remoteIncidentSeverity) {
            this.Incident_AddSeverityAsync(remoteIncidentSeverity, null);
        }
        
        public void Incident_AddSeverityAsync(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncidentSeverity remoteIncidentSeverity, object userState) {
            if ((this.onBeginIncident_AddSeverityDelegate == null)) {
                this.onBeginIncident_AddSeverityDelegate = new BeginOperationDelegate(this.OnBeginIncident_AddSeverity);
            }
            if ((this.onEndIncident_AddSeverityDelegate == null)) {
                this.onEndIncident_AddSeverityDelegate = new EndOperationDelegate(this.OnEndIncident_AddSeverity);
            }
            if ((this.onIncident_AddSeverityCompletedDelegate == null)) {
                this.onIncident_AddSeverityCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnIncident_AddSeverityCompleted);
            }
            base.InvokeAsync(this.onBeginIncident_AddSeverityDelegate, new object[] {
                        remoteIncidentSeverity}, this.onEndIncident_AddSeverityDelegate, this.onIncident_AddSeverityCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncidentStatus Incident_AddStatus(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncidentStatus remoteIncidentStatus) {
            return base.Channel.Incident_AddStatus(remoteIncidentStatus);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginIncident_AddStatus(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncidentStatus remoteIncidentStatus, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginIncident_AddStatus(remoteIncidentStatus, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncidentStatus EndIncident_AddStatus(System.IAsyncResult result) {
            return base.Channel.EndIncident_AddStatus(result);
        }
        
        private System.IAsyncResult OnBeginIncident_AddStatus(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncidentStatus remoteIncidentStatus = ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncidentStatus)(inValues[0]));
            return this.BeginIncident_AddStatus(remoteIncidentStatus, callback, asyncState);
        }
        
        private object[] OnEndIncident_AddStatus(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncidentStatus retVal = this.EndIncident_AddStatus(result);
            return new object[] {
                    retVal};
        }
        
        private void OnIncident_AddStatusCompleted(object state) {
            if ((this.Incident_AddStatusCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Incident_AddStatusCompleted(this, new Incident_AddStatusCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Incident_AddStatusAsync(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncidentStatus remoteIncidentStatus) {
            this.Incident_AddStatusAsync(remoteIncidentStatus, null);
        }
        
        public void Incident_AddStatusAsync(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncidentStatus remoteIncidentStatus, object userState) {
            if ((this.onBeginIncident_AddStatusDelegate == null)) {
                this.onBeginIncident_AddStatusDelegate = new BeginOperationDelegate(this.OnBeginIncident_AddStatus);
            }
            if ((this.onEndIncident_AddStatusDelegate == null)) {
                this.onEndIncident_AddStatusDelegate = new EndOperationDelegate(this.OnEndIncident_AddStatus);
            }
            if ((this.onIncident_AddStatusCompletedDelegate == null)) {
                this.onIncident_AddStatusCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnIncident_AddStatusCompleted);
            }
            base.InvokeAsync(this.onBeginIncident_AddStatusDelegate, new object[] {
                        remoteIncidentStatus}, this.onEndIncident_AddStatusDelegate, this.onIncident_AddStatusCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncidentType Incident_AddType(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncidentType remoteIncidentType) {
            return base.Channel.Incident_AddType(remoteIncidentType);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginIncident_AddType(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncidentType remoteIncidentType, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginIncident_AddType(remoteIncidentType, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncidentType EndIncident_AddType(System.IAsyncResult result) {
            return base.Channel.EndIncident_AddType(result);
        }
        
        private System.IAsyncResult OnBeginIncident_AddType(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncidentType remoteIncidentType = ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncidentType)(inValues[0]));
            return this.BeginIncident_AddType(remoteIncidentType, callback, asyncState);
        }
        
        private object[] OnEndIncident_AddType(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncidentType retVal = this.EndIncident_AddType(result);
            return new object[] {
                    retVal};
        }
        
        private void OnIncident_AddTypeCompleted(object state) {
            if ((this.Incident_AddTypeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Incident_AddTypeCompleted(this, new Incident_AddTypeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Incident_AddTypeAsync(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncidentType remoteIncidentType) {
            this.Incident_AddTypeAsync(remoteIncidentType, null);
        }
        
        public void Incident_AddTypeAsync(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncidentType remoteIncidentType, object userState) {
            if ((this.onBeginIncident_AddTypeDelegate == null)) {
                this.onBeginIncident_AddTypeDelegate = new BeginOperationDelegate(this.OnBeginIncident_AddType);
            }
            if ((this.onEndIncident_AddTypeDelegate == null)) {
                this.onEndIncident_AddTypeDelegate = new EndOperationDelegate(this.OnEndIncident_AddType);
            }
            if ((this.onIncident_AddTypeCompletedDelegate == null)) {
                this.onIncident_AddTypeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnIncident_AddTypeCompleted);
            }
            base.InvokeAsync(this.onBeginIncident_AddTypeDelegate, new object[] {
                        remoteIncidentType}, this.onEndIncident_AddTypeDelegate, this.onIncident_AddTypeCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncident Incident_Create(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncident remoteIncident) {
            return base.Channel.Incident_Create(remoteIncident);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginIncident_Create(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncident remoteIncident, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginIncident_Create(remoteIncident, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncident EndIncident_Create(System.IAsyncResult result) {
            return base.Channel.EndIncident_Create(result);
        }
        
        private System.IAsyncResult OnBeginIncident_Create(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncident remoteIncident = ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncident)(inValues[0]));
            return this.BeginIncident_Create(remoteIncident, callback, asyncState);
        }
        
        private object[] OnEndIncident_Create(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncident retVal = this.EndIncident_Create(result);
            return new object[] {
                    retVal};
        }
        
        private void OnIncident_CreateCompleted(object state) {
            if ((this.Incident_CreateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Incident_CreateCompleted(this, new Incident_CreateCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Incident_CreateAsync(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncident remoteIncident) {
            this.Incident_CreateAsync(remoteIncident, null);
        }
        
        public void Incident_CreateAsync(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncident remoteIncident, object userState) {
            if ((this.onBeginIncident_CreateDelegate == null)) {
                this.onBeginIncident_CreateDelegate = new BeginOperationDelegate(this.OnBeginIncident_Create);
            }
            if ((this.onEndIncident_CreateDelegate == null)) {
                this.onEndIncident_CreateDelegate = new EndOperationDelegate(this.OnEndIncident_Create);
            }
            if ((this.onIncident_CreateCompletedDelegate == null)) {
                this.onIncident_CreateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnIncident_CreateCompleted);
            }
            base.InvokeAsync(this.onBeginIncident_CreateDelegate, new object[] {
                        remoteIncident}, this.onEndIncident_CreateDelegate, this.onIncident_CreateCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncident[] Incident_Retrieve(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSort remoteSort, int startingRow, int numberOfRows) {
            return base.Channel.Incident_Retrieve(remoteFilters, remoteSort, startingRow, numberOfRows);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginIncident_Retrieve(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSort remoteSort, int startingRow, int numberOfRows, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginIncident_Retrieve(remoteFilters, remoteSort, startingRow, numberOfRows, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncident[] EndIncident_Retrieve(System.IAsyncResult result) {
            return base.Channel.EndIncident_Retrieve(result);
        }
        
        private System.IAsyncResult OnBeginIncident_Retrieve(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters = ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[])(inValues[0]));
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSort remoteSort = ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSort)(inValues[1]));
            int startingRow = ((int)(inValues[2]));
            int numberOfRows = ((int)(inValues[3]));
            return this.BeginIncident_Retrieve(remoteFilters, remoteSort, startingRow, numberOfRows, callback, asyncState);
        }
        
        private object[] OnEndIncident_Retrieve(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncident[] retVal = this.EndIncident_Retrieve(result);
            return new object[] {
                    retVal};
        }
        
        private void OnIncident_RetrieveCompleted(object state) {
            if ((this.Incident_RetrieveCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Incident_RetrieveCompleted(this, new Incident_RetrieveCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Incident_RetrieveAsync(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSort remoteSort, int startingRow, int numberOfRows) {
            this.Incident_RetrieveAsync(remoteFilters, remoteSort, startingRow, numberOfRows, null);
        }
        
        public void Incident_RetrieveAsync(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters, Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteSort remoteSort, int startingRow, int numberOfRows, object userState) {
            if ((this.onBeginIncident_RetrieveDelegate == null)) {
                this.onBeginIncident_RetrieveDelegate = new BeginOperationDelegate(this.OnBeginIncident_Retrieve);
            }
            if ((this.onEndIncident_RetrieveDelegate == null)) {
                this.onEndIncident_RetrieveDelegate = new EndOperationDelegate(this.OnEndIncident_Retrieve);
            }
            if ((this.onIncident_RetrieveCompletedDelegate == null)) {
                this.onIncident_RetrieveCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnIncident_RetrieveCompleted);
            }
            base.InvokeAsync(this.onBeginIncident_RetrieveDelegate, new object[] {
                        remoteFilters,
                        remoteSort,
                        startingRow,
                        numberOfRows}, this.onEndIncident_RetrieveDelegate, this.onIncident_RetrieveCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncident Incident_RetrieveById(int incidentId) {
            return base.Channel.Incident_RetrieveById(incidentId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginIncident_RetrieveById(int incidentId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginIncident_RetrieveById(incidentId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncident EndIncident_RetrieveById(System.IAsyncResult result) {
            return base.Channel.EndIncident_RetrieveById(result);
        }
        
        private System.IAsyncResult OnBeginIncident_RetrieveById(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int incidentId = ((int)(inValues[0]));
            return this.BeginIncident_RetrieveById(incidentId, callback, asyncState);
        }
        
        private object[] OnEndIncident_RetrieveById(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncident retVal = this.EndIncident_RetrieveById(result);
            return new object[] {
                    retVal};
        }
        
        private void OnIncident_RetrieveByIdCompleted(object state) {
            if ((this.Incident_RetrieveByIdCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Incident_RetrieveByIdCompleted(this, new Incident_RetrieveByIdCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Incident_RetrieveByIdAsync(int incidentId) {
            this.Incident_RetrieveByIdAsync(incidentId, null);
        }
        
        public void Incident_RetrieveByIdAsync(int incidentId, object userState) {
            if ((this.onBeginIncident_RetrieveByIdDelegate == null)) {
                this.onBeginIncident_RetrieveByIdDelegate = new BeginOperationDelegate(this.OnBeginIncident_RetrieveById);
            }
            if ((this.onEndIncident_RetrieveByIdDelegate == null)) {
                this.onEndIncident_RetrieveByIdDelegate = new EndOperationDelegate(this.OnEndIncident_RetrieveById);
            }
            if ((this.onIncident_RetrieveByIdCompletedDelegate == null)) {
                this.onIncident_RetrieveByIdCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnIncident_RetrieveByIdCompleted);
            }
            base.InvokeAsync(this.onBeginIncident_RetrieveByIdDelegate, new object[] {
                        incidentId}, this.onEndIncident_RetrieveByIdDelegate, this.onIncident_RetrieveByIdCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncident[] Incident_RetrieveByTestCase(int testCaseId, bool openOnly) {
            return base.Channel.Incident_RetrieveByTestCase(testCaseId, openOnly);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginIncident_RetrieveByTestCase(int testCaseId, bool openOnly, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginIncident_RetrieveByTestCase(testCaseId, openOnly, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncident[] EndIncident_RetrieveByTestCase(System.IAsyncResult result) {
            return base.Channel.EndIncident_RetrieveByTestCase(result);
        }
        
        private System.IAsyncResult OnBeginIncident_RetrieveByTestCase(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int testCaseId = ((int)(inValues[0]));
            bool openOnly = ((bool)(inValues[1]));
            return this.BeginIncident_RetrieveByTestCase(testCaseId, openOnly, callback, asyncState);
        }
        
        private object[] OnEndIncident_RetrieveByTestCase(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncident[] retVal = this.EndIncident_RetrieveByTestCase(result);
            return new object[] {
                    retVal};
        }
        
        private void OnIncident_RetrieveByTestCaseCompleted(object state) {
            if ((this.Incident_RetrieveByTestCaseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Incident_RetrieveByTestCaseCompleted(this, new Incident_RetrieveByTestCaseCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Incident_RetrieveByTestCaseAsync(int testCaseId, bool openOnly) {
            this.Incident_RetrieveByTestCaseAsync(testCaseId, openOnly, null);
        }
        
        public void Incident_RetrieveByTestCaseAsync(int testCaseId, bool openOnly, object userState) {
            if ((this.onBeginIncident_RetrieveByTestCaseDelegate == null)) {
                this.onBeginIncident_RetrieveByTestCaseDelegate = new BeginOperationDelegate(this.OnBeginIncident_RetrieveByTestCase);
            }
            if ((this.onEndIncident_RetrieveByTestCaseDelegate == null)) {
                this.onEndIncident_RetrieveByTestCaseDelegate = new EndOperationDelegate(this.OnEndIncident_RetrieveByTestCase);
            }
            if ((this.onIncident_RetrieveByTestCaseCompletedDelegate == null)) {
                this.onIncident_RetrieveByTestCaseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnIncident_RetrieveByTestCaseCompleted);
            }
            base.InvokeAsync(this.onBeginIncident_RetrieveByTestCaseDelegate, new object[] {
                        testCaseId,
                        openOnly}, this.onEndIncident_RetrieveByTestCaseDelegate, this.onIncident_RetrieveByTestCaseCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncident[] Incident_RetrieveByTestRunStep(int testRunStepId) {
            return base.Channel.Incident_RetrieveByTestRunStep(testRunStepId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginIncident_RetrieveByTestRunStep(int testRunStepId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginIncident_RetrieveByTestRunStep(testRunStepId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncident[] EndIncident_RetrieveByTestRunStep(System.IAsyncResult result) {
            return base.Channel.EndIncident_RetrieveByTestRunStep(result);
        }
        
        private System.IAsyncResult OnBeginIncident_RetrieveByTestRunStep(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int testRunStepId = ((int)(inValues[0]));
            return this.BeginIncident_RetrieveByTestRunStep(testRunStepId, callback, asyncState);
        }
        
        private object[] OnEndIncident_RetrieveByTestRunStep(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncident[] retVal = this.EndIncident_RetrieveByTestRunStep(result);
            return new object[] {
                    retVal};
        }
        
        private void OnIncident_RetrieveByTestRunStepCompleted(object state) {
            if ((this.Incident_RetrieveByTestRunStepCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Incident_RetrieveByTestRunStepCompleted(this, new Incident_RetrieveByTestRunStepCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Incident_RetrieveByTestRunStepAsync(int testRunStepId) {
            this.Incident_RetrieveByTestRunStepAsync(testRunStepId, null);
        }
        
        public void Incident_RetrieveByTestRunStepAsync(int testRunStepId, object userState) {
            if ((this.onBeginIncident_RetrieveByTestRunStepDelegate == null)) {
                this.onBeginIncident_RetrieveByTestRunStepDelegate = new BeginOperationDelegate(this.OnBeginIncident_RetrieveByTestRunStep);
            }
            if ((this.onEndIncident_RetrieveByTestRunStepDelegate == null)) {
                this.onEndIncident_RetrieveByTestRunStepDelegate = new EndOperationDelegate(this.OnEndIncident_RetrieveByTestRunStep);
            }
            if ((this.onIncident_RetrieveByTestRunStepCompletedDelegate == null)) {
                this.onIncident_RetrieveByTestRunStepCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnIncident_RetrieveByTestRunStepCompleted);
            }
            base.InvokeAsync(this.onBeginIncident_RetrieveByTestRunStepDelegate, new object[] {
                        testRunStepId}, this.onEndIncident_RetrieveByTestRunStepDelegate, this.onIncident_RetrieveByTestRunStepCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncident[] Incident_RetrieveByTestStep(int testStepId) {
            return base.Channel.Incident_RetrieveByTestStep(testStepId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginIncident_RetrieveByTestStep(int testStepId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginIncident_RetrieveByTestStep(testStepId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncident[] EndIncident_RetrieveByTestStep(System.IAsyncResult result) {
            return base.Channel.EndIncident_RetrieveByTestStep(result);
        }
        
        private System.IAsyncResult OnBeginIncident_RetrieveByTestStep(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int testStepId = ((int)(inValues[0]));
            return this.BeginIncident_RetrieveByTestStep(testStepId, callback, asyncState);
        }
        
        private object[] OnEndIncident_RetrieveByTestStep(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncident[] retVal = this.EndIncident_RetrieveByTestStep(result);
            return new object[] {
                    retVal};
        }
        
        private void OnIncident_RetrieveByTestStepCompleted(object state) {
            if ((this.Incident_RetrieveByTestStepCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Incident_RetrieveByTestStepCompleted(this, new Incident_RetrieveByTestStepCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Incident_RetrieveByTestStepAsync(int testStepId) {
            this.Incident_RetrieveByTestStepAsync(testStepId, null);
        }
        
        public void Incident_RetrieveByTestStepAsync(int testStepId, object userState) {
            if ((this.onBeginIncident_RetrieveByTestStepDelegate == null)) {
                this.onBeginIncident_RetrieveByTestStepDelegate = new BeginOperationDelegate(this.OnBeginIncident_RetrieveByTestStep);
            }
            if ((this.onEndIncident_RetrieveByTestStepDelegate == null)) {
                this.onEndIncident_RetrieveByTestStepDelegate = new EndOperationDelegate(this.OnEndIncident_RetrieveByTestStep);
            }
            if ((this.onIncident_RetrieveByTestStepCompletedDelegate == null)) {
                this.onIncident_RetrieveByTestStepCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnIncident_RetrieveByTestStepCompleted);
            }
            base.InvokeAsync(this.onBeginIncident_RetrieveByTestStepDelegate, new object[] {
                        testStepId}, this.onEndIncident_RetrieveByTestStepDelegate, this.onIncident_RetrieveByTestStepCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncident[] Incident_RetrieveForOwner() {
            return base.Channel.Incident_RetrieveForOwner();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginIncident_RetrieveForOwner(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginIncident_RetrieveForOwner(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncident[] EndIncident_RetrieveForOwner(System.IAsyncResult result) {
            return base.Channel.EndIncident_RetrieveForOwner(result);
        }
        
        private System.IAsyncResult OnBeginIncident_RetrieveForOwner(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginIncident_RetrieveForOwner(callback, asyncState);
        }
        
        private object[] OnEndIncident_RetrieveForOwner(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncident[] retVal = this.EndIncident_RetrieveForOwner(result);
            return new object[] {
                    retVal};
        }
        
        private void OnIncident_RetrieveForOwnerCompleted(object state) {
            if ((this.Incident_RetrieveForOwnerCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Incident_RetrieveForOwnerCompleted(this, new Incident_RetrieveForOwnerCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Incident_RetrieveForOwnerAsync() {
            this.Incident_RetrieveForOwnerAsync(null);
        }
        
        public void Incident_RetrieveForOwnerAsync(object userState) {
            if ((this.onBeginIncident_RetrieveForOwnerDelegate == null)) {
                this.onBeginIncident_RetrieveForOwnerDelegate = new BeginOperationDelegate(this.OnBeginIncident_RetrieveForOwner);
            }
            if ((this.onEndIncident_RetrieveForOwnerDelegate == null)) {
                this.onEndIncident_RetrieveForOwnerDelegate = new EndOperationDelegate(this.OnEndIncident_RetrieveForOwner);
            }
            if ((this.onIncident_RetrieveForOwnerCompletedDelegate == null)) {
                this.onIncident_RetrieveForOwnerCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnIncident_RetrieveForOwnerCompleted);
            }
            base.InvokeAsync(this.onBeginIncident_RetrieveForOwnerDelegate, null, this.onEndIncident_RetrieveForOwnerDelegate, this.onIncident_RetrieveForOwnerCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncident[] Incident_RetrieveNew(System.DateTime creationDate, int startRow, int numberOfRows) {
            return base.Channel.Incident_RetrieveNew(creationDate, startRow, numberOfRows);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginIncident_RetrieveNew(System.DateTime creationDate, int startRow, int numberOfRows, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginIncident_RetrieveNew(creationDate, startRow, numberOfRows, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncident[] EndIncident_RetrieveNew(System.IAsyncResult result) {
            return base.Channel.EndIncident_RetrieveNew(result);
        }
        
        private System.IAsyncResult OnBeginIncident_RetrieveNew(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.DateTime creationDate = ((System.DateTime)(inValues[0]));
            int startRow = ((int)(inValues[1]));
            int numberOfRows = ((int)(inValues[2]));
            return this.BeginIncident_RetrieveNew(creationDate, startRow, numberOfRows, callback, asyncState);
        }
        
        private object[] OnEndIncident_RetrieveNew(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncident[] retVal = this.EndIncident_RetrieveNew(result);
            return new object[] {
                    retVal};
        }
        
        private void OnIncident_RetrieveNewCompleted(object state) {
            if ((this.Incident_RetrieveNewCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Incident_RetrieveNewCompleted(this, new Incident_RetrieveNewCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Incident_RetrieveNewAsync(System.DateTime creationDate, int startRow, int numberOfRows) {
            this.Incident_RetrieveNewAsync(creationDate, startRow, numberOfRows, null);
        }
        
        public void Incident_RetrieveNewAsync(System.DateTime creationDate, int startRow, int numberOfRows, object userState) {
            if ((this.onBeginIncident_RetrieveNewDelegate == null)) {
                this.onBeginIncident_RetrieveNewDelegate = new BeginOperationDelegate(this.OnBeginIncident_RetrieveNew);
            }
            if ((this.onEndIncident_RetrieveNewDelegate == null)) {
                this.onEndIncident_RetrieveNewDelegate = new EndOperationDelegate(this.OnEndIncident_RetrieveNew);
            }
            if ((this.onIncident_RetrieveNewCompletedDelegate == null)) {
                this.onIncident_RetrieveNewCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnIncident_RetrieveNewCompleted);
            }
            base.InvokeAsync(this.onBeginIncident_RetrieveNewDelegate, new object[] {
                        creationDate,
                        startRow,
                        numberOfRows}, this.onEndIncident_RetrieveNewDelegate, this.onIncident_RetrieveNewCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncidentPriority[] Incident_RetrievePriorities() {
            return base.Channel.Incident_RetrievePriorities();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginIncident_RetrievePriorities(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginIncident_RetrievePriorities(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncidentPriority[] EndIncident_RetrievePriorities(System.IAsyncResult result) {
            return base.Channel.EndIncident_RetrievePriorities(result);
        }
        
        private System.IAsyncResult OnBeginIncident_RetrievePriorities(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginIncident_RetrievePriorities(callback, asyncState);
        }
        
        private object[] OnEndIncident_RetrievePriorities(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncidentPriority[] retVal = this.EndIncident_RetrievePriorities(result);
            return new object[] {
                    retVal};
        }
        
        private void OnIncident_RetrievePrioritiesCompleted(object state) {
            if ((this.Incident_RetrievePrioritiesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Incident_RetrievePrioritiesCompleted(this, new Incident_RetrievePrioritiesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Incident_RetrievePrioritiesAsync() {
            this.Incident_RetrievePrioritiesAsync(null);
        }
        
        public void Incident_RetrievePrioritiesAsync(object userState) {
            if ((this.onBeginIncident_RetrievePrioritiesDelegate == null)) {
                this.onBeginIncident_RetrievePrioritiesDelegate = new BeginOperationDelegate(this.OnBeginIncident_RetrievePriorities);
            }
            if ((this.onEndIncident_RetrievePrioritiesDelegate == null)) {
                this.onEndIncident_RetrievePrioritiesDelegate = new EndOperationDelegate(this.OnEndIncident_RetrievePriorities);
            }
            if ((this.onIncident_RetrievePrioritiesCompletedDelegate == null)) {
                this.onIncident_RetrievePrioritiesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnIncident_RetrievePrioritiesCompleted);
            }
            base.InvokeAsync(this.onBeginIncident_RetrievePrioritiesDelegate, null, this.onEndIncident_RetrievePrioritiesDelegate, this.onIncident_RetrievePrioritiesCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComment[] Incident_RetrieveComments(int incidentId) {
            return base.Channel.Incident_RetrieveComments(incidentId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginIncident_RetrieveComments(int incidentId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginIncident_RetrieveComments(incidentId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComment[] EndIncident_RetrieveComments(System.IAsyncResult result) {
            return base.Channel.EndIncident_RetrieveComments(result);
        }
        
        private System.IAsyncResult OnBeginIncident_RetrieveComments(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int incidentId = ((int)(inValues[0]));
            return this.BeginIncident_RetrieveComments(incidentId, callback, asyncState);
        }
        
        private object[] OnEndIncident_RetrieveComments(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComment[] retVal = this.EndIncident_RetrieveComments(result);
            return new object[] {
                    retVal};
        }
        
        private void OnIncident_RetrieveCommentsCompleted(object state) {
            if ((this.Incident_RetrieveCommentsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Incident_RetrieveCommentsCompleted(this, new Incident_RetrieveCommentsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Incident_RetrieveCommentsAsync(int incidentId) {
            this.Incident_RetrieveCommentsAsync(incidentId, null);
        }
        
        public void Incident_RetrieveCommentsAsync(int incidentId, object userState) {
            if ((this.onBeginIncident_RetrieveCommentsDelegate == null)) {
                this.onBeginIncident_RetrieveCommentsDelegate = new BeginOperationDelegate(this.OnBeginIncident_RetrieveComments);
            }
            if ((this.onEndIncident_RetrieveCommentsDelegate == null)) {
                this.onEndIncident_RetrieveCommentsDelegate = new EndOperationDelegate(this.OnEndIncident_RetrieveComments);
            }
            if ((this.onIncident_RetrieveCommentsCompletedDelegate == null)) {
                this.onIncident_RetrieveCommentsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnIncident_RetrieveCommentsCompleted);
            }
            base.InvokeAsync(this.onBeginIncident_RetrieveCommentsDelegate, new object[] {
                        incidentId}, this.onEndIncident_RetrieveCommentsDelegate, this.onIncident_RetrieveCommentsCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncidentSeverity[] Incident_RetrieveSeverities() {
            return base.Channel.Incident_RetrieveSeverities();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginIncident_RetrieveSeverities(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginIncident_RetrieveSeverities(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncidentSeverity[] EndIncident_RetrieveSeverities(System.IAsyncResult result) {
            return base.Channel.EndIncident_RetrieveSeverities(result);
        }
        
        private System.IAsyncResult OnBeginIncident_RetrieveSeverities(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginIncident_RetrieveSeverities(callback, asyncState);
        }
        
        private object[] OnEndIncident_RetrieveSeverities(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncidentSeverity[] retVal = this.EndIncident_RetrieveSeverities(result);
            return new object[] {
                    retVal};
        }
        
        private void OnIncident_RetrieveSeveritiesCompleted(object state) {
            if ((this.Incident_RetrieveSeveritiesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Incident_RetrieveSeveritiesCompleted(this, new Incident_RetrieveSeveritiesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Incident_RetrieveSeveritiesAsync() {
            this.Incident_RetrieveSeveritiesAsync(null);
        }
        
        public void Incident_RetrieveSeveritiesAsync(object userState) {
            if ((this.onBeginIncident_RetrieveSeveritiesDelegate == null)) {
                this.onBeginIncident_RetrieveSeveritiesDelegate = new BeginOperationDelegate(this.OnBeginIncident_RetrieveSeverities);
            }
            if ((this.onEndIncident_RetrieveSeveritiesDelegate == null)) {
                this.onEndIncident_RetrieveSeveritiesDelegate = new EndOperationDelegate(this.OnEndIncident_RetrieveSeverities);
            }
            if ((this.onIncident_RetrieveSeveritiesCompletedDelegate == null)) {
                this.onIncident_RetrieveSeveritiesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnIncident_RetrieveSeveritiesCompleted);
            }
            base.InvokeAsync(this.onBeginIncident_RetrieveSeveritiesDelegate, null, this.onEndIncident_RetrieveSeveritiesDelegate, this.onIncident_RetrieveSeveritiesCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncidentStatus[] Incident_RetrieveStatuses() {
            return base.Channel.Incident_RetrieveStatuses();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginIncident_RetrieveStatuses(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginIncident_RetrieveStatuses(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncidentStatus[] EndIncident_RetrieveStatuses(System.IAsyncResult result) {
            return base.Channel.EndIncident_RetrieveStatuses(result);
        }
        
        private System.IAsyncResult OnBeginIncident_RetrieveStatuses(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginIncident_RetrieveStatuses(callback, asyncState);
        }
        
        private object[] OnEndIncident_RetrieveStatuses(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncidentStatus[] retVal = this.EndIncident_RetrieveStatuses(result);
            return new object[] {
                    retVal};
        }
        
        private void OnIncident_RetrieveStatusesCompleted(object state) {
            if ((this.Incident_RetrieveStatusesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Incident_RetrieveStatusesCompleted(this, new Incident_RetrieveStatusesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Incident_RetrieveStatusesAsync() {
            this.Incident_RetrieveStatusesAsync(null);
        }
        
        public void Incident_RetrieveStatusesAsync(object userState) {
            if ((this.onBeginIncident_RetrieveStatusesDelegate == null)) {
                this.onBeginIncident_RetrieveStatusesDelegate = new BeginOperationDelegate(this.OnBeginIncident_RetrieveStatuses);
            }
            if ((this.onEndIncident_RetrieveStatusesDelegate == null)) {
                this.onEndIncident_RetrieveStatusesDelegate = new EndOperationDelegate(this.OnEndIncident_RetrieveStatuses);
            }
            if ((this.onIncident_RetrieveStatusesCompletedDelegate == null)) {
                this.onIncident_RetrieveStatusesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnIncident_RetrieveStatusesCompleted);
            }
            base.InvokeAsync(this.onBeginIncident_RetrieveStatusesDelegate, null, this.onEndIncident_RetrieveStatusesDelegate, this.onIncident_RetrieveStatusesCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncidentType[] Incident_RetrieveTypes() {
            return base.Channel.Incident_RetrieveTypes();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginIncident_RetrieveTypes(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginIncident_RetrieveTypes(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncidentType[] EndIncident_RetrieveTypes(System.IAsyncResult result) {
            return base.Channel.EndIncident_RetrieveTypes(result);
        }
        
        private System.IAsyncResult OnBeginIncident_RetrieveTypes(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginIncident_RetrieveTypes(callback, asyncState);
        }
        
        private object[] OnEndIncident_RetrieveTypes(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncidentType[] retVal = this.EndIncident_RetrieveTypes(result);
            return new object[] {
                    retVal};
        }
        
        private void OnIncident_RetrieveTypesCompleted(object state) {
            if ((this.Incident_RetrieveTypesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Incident_RetrieveTypesCompleted(this, new Incident_RetrieveTypesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Incident_RetrieveTypesAsync() {
            this.Incident_RetrieveTypesAsync(null);
        }
        
        public void Incident_RetrieveTypesAsync(object userState) {
            if ((this.onBeginIncident_RetrieveTypesDelegate == null)) {
                this.onBeginIncident_RetrieveTypesDelegate = new BeginOperationDelegate(this.OnBeginIncident_RetrieveTypes);
            }
            if ((this.onEndIncident_RetrieveTypesDelegate == null)) {
                this.onEndIncident_RetrieveTypesDelegate = new EndOperationDelegate(this.OnEndIncident_RetrieveTypes);
            }
            if ((this.onIncident_RetrieveTypesCompletedDelegate == null)) {
                this.onIncident_RetrieveTypesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnIncident_RetrieveTypesCompleted);
            }
            base.InvokeAsync(this.onBeginIncident_RetrieveTypesDelegate, null, this.onEndIncident_RetrieveTypesDelegate, this.onIncident_RetrieveTypesCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteWorkflowField[] Incident_RetrieveWorkflowFields(int currentTypeId, int currentStatusId) {
            return base.Channel.Incident_RetrieveWorkflowFields(currentTypeId, currentStatusId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginIncident_RetrieveWorkflowFields(int currentTypeId, int currentStatusId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginIncident_RetrieveWorkflowFields(currentTypeId, currentStatusId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteWorkflowField[] EndIncident_RetrieveWorkflowFields(System.IAsyncResult result) {
            return base.Channel.EndIncident_RetrieveWorkflowFields(result);
        }
        
        private System.IAsyncResult OnBeginIncident_RetrieveWorkflowFields(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int currentTypeId = ((int)(inValues[0]));
            int currentStatusId = ((int)(inValues[1]));
            return this.BeginIncident_RetrieveWorkflowFields(currentTypeId, currentStatusId, callback, asyncState);
        }
        
        private object[] OnEndIncident_RetrieveWorkflowFields(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteWorkflowField[] retVal = this.EndIncident_RetrieveWorkflowFields(result);
            return new object[] {
                    retVal};
        }
        
        private void OnIncident_RetrieveWorkflowFieldsCompleted(object state) {
            if ((this.Incident_RetrieveWorkflowFieldsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Incident_RetrieveWorkflowFieldsCompleted(this, new Incident_RetrieveWorkflowFieldsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Incident_RetrieveWorkflowFieldsAsync(int currentTypeId, int currentStatusId) {
            this.Incident_RetrieveWorkflowFieldsAsync(currentTypeId, currentStatusId, null);
        }
        
        public void Incident_RetrieveWorkflowFieldsAsync(int currentTypeId, int currentStatusId, object userState) {
            if ((this.onBeginIncident_RetrieveWorkflowFieldsDelegate == null)) {
                this.onBeginIncident_RetrieveWorkflowFieldsDelegate = new BeginOperationDelegate(this.OnBeginIncident_RetrieveWorkflowFields);
            }
            if ((this.onEndIncident_RetrieveWorkflowFieldsDelegate == null)) {
                this.onEndIncident_RetrieveWorkflowFieldsDelegate = new EndOperationDelegate(this.OnEndIncident_RetrieveWorkflowFields);
            }
            if ((this.onIncident_RetrieveWorkflowFieldsCompletedDelegate == null)) {
                this.onIncident_RetrieveWorkflowFieldsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnIncident_RetrieveWorkflowFieldsCompleted);
            }
            base.InvokeAsync(this.onBeginIncident_RetrieveWorkflowFieldsDelegate, new object[] {
                        currentTypeId,
                        currentStatusId}, this.onEndIncident_RetrieveWorkflowFieldsDelegate, this.onIncident_RetrieveWorkflowFieldsCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteWorkflowTransition[] Incident_RetrieveWorkflowTransitions(int currentTypeId, int currentStatusId, bool isDetector, bool isOwner) {
            return base.Channel.Incident_RetrieveWorkflowTransitions(currentTypeId, currentStatusId, isDetector, isOwner);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginIncident_RetrieveWorkflowTransitions(int currentTypeId, int currentStatusId, bool isDetector, bool isOwner, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginIncident_RetrieveWorkflowTransitions(currentTypeId, currentStatusId, isDetector, isOwner, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteWorkflowTransition[] EndIncident_RetrieveWorkflowTransitions(System.IAsyncResult result) {
            return base.Channel.EndIncident_RetrieveWorkflowTransitions(result);
        }
        
        private System.IAsyncResult OnBeginIncident_RetrieveWorkflowTransitions(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int currentTypeId = ((int)(inValues[0]));
            int currentStatusId = ((int)(inValues[1]));
            bool isDetector = ((bool)(inValues[2]));
            bool isOwner = ((bool)(inValues[3]));
            return this.BeginIncident_RetrieveWorkflowTransitions(currentTypeId, currentStatusId, isDetector, isOwner, callback, asyncState);
        }
        
        private object[] OnEndIncident_RetrieveWorkflowTransitions(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteWorkflowTransition[] retVal = this.EndIncident_RetrieveWorkflowTransitions(result);
            return new object[] {
                    retVal};
        }
        
        private void OnIncident_RetrieveWorkflowTransitionsCompleted(object state) {
            if ((this.Incident_RetrieveWorkflowTransitionsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Incident_RetrieveWorkflowTransitionsCompleted(this, new Incident_RetrieveWorkflowTransitionsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Incident_RetrieveWorkflowTransitionsAsync(int currentTypeId, int currentStatusId, bool isDetector, bool isOwner) {
            this.Incident_RetrieveWorkflowTransitionsAsync(currentTypeId, currentStatusId, isDetector, isOwner, null);
        }
        
        public void Incident_RetrieveWorkflowTransitionsAsync(int currentTypeId, int currentStatusId, bool isDetector, bool isOwner, object userState) {
            if ((this.onBeginIncident_RetrieveWorkflowTransitionsDelegate == null)) {
                this.onBeginIncident_RetrieveWorkflowTransitionsDelegate = new BeginOperationDelegate(this.OnBeginIncident_RetrieveWorkflowTransitions);
            }
            if ((this.onEndIncident_RetrieveWorkflowTransitionsDelegate == null)) {
                this.onEndIncident_RetrieveWorkflowTransitionsDelegate = new EndOperationDelegate(this.OnEndIncident_RetrieveWorkflowTransitions);
            }
            if ((this.onIncident_RetrieveWorkflowTransitionsCompletedDelegate == null)) {
                this.onIncident_RetrieveWorkflowTransitionsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnIncident_RetrieveWorkflowTransitionsCompleted);
            }
            base.InvokeAsync(this.onBeginIncident_RetrieveWorkflowTransitionsDelegate, new object[] {
                        currentTypeId,
                        currentStatusId,
                        isDetector,
                        isOwner}, this.onEndIncident_RetrieveWorkflowTransitionsDelegate, this.onIncident_RetrieveWorkflowTransitionsCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteWorkflowCustomProperty[] Incident_RetrieveWorkflowCustomProperties(int currentTypeId, int currentStatusId) {
            return base.Channel.Incident_RetrieveWorkflowCustomProperties(currentTypeId, currentStatusId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginIncident_RetrieveWorkflowCustomProperties(int currentTypeId, int currentStatusId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginIncident_RetrieveWorkflowCustomProperties(currentTypeId, currentStatusId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteWorkflowCustomProperty[] EndIncident_RetrieveWorkflowCustomProperties(System.IAsyncResult result) {
            return base.Channel.EndIncident_RetrieveWorkflowCustomProperties(result);
        }
        
        private System.IAsyncResult OnBeginIncident_RetrieveWorkflowCustomProperties(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int currentTypeId = ((int)(inValues[0]));
            int currentStatusId = ((int)(inValues[1]));
            return this.BeginIncident_RetrieveWorkflowCustomProperties(currentTypeId, currentStatusId, callback, asyncState);
        }
        
        private object[] OnEndIncident_RetrieveWorkflowCustomProperties(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteWorkflowCustomProperty[] retVal = this.EndIncident_RetrieveWorkflowCustomProperties(result);
            return new object[] {
                    retVal};
        }
        
        private void OnIncident_RetrieveWorkflowCustomPropertiesCompleted(object state) {
            if ((this.Incident_RetrieveWorkflowCustomPropertiesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Incident_RetrieveWorkflowCustomPropertiesCompleted(this, new Incident_RetrieveWorkflowCustomPropertiesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Incident_RetrieveWorkflowCustomPropertiesAsync(int currentTypeId, int currentStatusId) {
            this.Incident_RetrieveWorkflowCustomPropertiesAsync(currentTypeId, currentStatusId, null);
        }
        
        public void Incident_RetrieveWorkflowCustomPropertiesAsync(int currentTypeId, int currentStatusId, object userState) {
            if ((this.onBeginIncident_RetrieveWorkflowCustomPropertiesDelegate == null)) {
                this.onBeginIncident_RetrieveWorkflowCustomPropertiesDelegate = new BeginOperationDelegate(this.OnBeginIncident_RetrieveWorkflowCustomProperties);
            }
            if ((this.onEndIncident_RetrieveWorkflowCustomPropertiesDelegate == null)) {
                this.onEndIncident_RetrieveWorkflowCustomPropertiesDelegate = new EndOperationDelegate(this.OnEndIncident_RetrieveWorkflowCustomProperties);
            }
            if ((this.onIncident_RetrieveWorkflowCustomPropertiesCompletedDelegate == null)) {
                this.onIncident_RetrieveWorkflowCustomPropertiesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnIncident_RetrieveWorkflowCustomPropertiesCompleted);
            }
            base.InvokeAsync(this.onBeginIncident_RetrieveWorkflowCustomPropertiesDelegate, new object[] {
                        currentTypeId,
                        currentStatusId}, this.onEndIncident_RetrieveWorkflowCustomPropertiesDelegate, this.onIncident_RetrieveWorkflowCustomPropertiesCompletedDelegate, userState);
        }
        
        public void Incident_Update(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncident remoteIncident) {
            base.Channel.Incident_Update(remoteIncident);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginIncident_Update(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncident remoteIncident, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginIncident_Update(remoteIncident, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndIncident_Update(System.IAsyncResult result) {
            base.Channel.EndIncident_Update(result);
        }
        
        private System.IAsyncResult OnBeginIncident_Update(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncident remoteIncident = ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncident)(inValues[0]));
            return this.BeginIncident_Update(remoteIncident, callback, asyncState);
        }
        
        private object[] OnEndIncident_Update(System.IAsyncResult result) {
            this.EndIncident_Update(result);
            return null;
        }
        
        private void OnIncident_UpdateCompleted(object state) {
            if ((this.Incident_UpdateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Incident_UpdateCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Incident_UpdateAsync(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncident remoteIncident) {
            this.Incident_UpdateAsync(remoteIncident, null);
        }
        
        public void Incident_UpdateAsync(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncident remoteIncident, object userState) {
            if ((this.onBeginIncident_UpdateDelegate == null)) {
                this.onBeginIncident_UpdateDelegate = new BeginOperationDelegate(this.OnBeginIncident_Update);
            }
            if ((this.onEndIncident_UpdateDelegate == null)) {
                this.onEndIncident_UpdateDelegate = new EndOperationDelegate(this.OnEndIncident_Update);
            }
            if ((this.onIncident_UpdateCompletedDelegate == null)) {
                this.onIncident_UpdateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnIncident_UpdateCompleted);
            }
            base.InvokeAsync(this.onBeginIncident_UpdateDelegate, new object[] {
                        remoteIncident}, this.onEndIncident_UpdateDelegate, this.onIncident_UpdateCompletedDelegate, userState);
        }
        
        public void Incident_Delete(int incidentId) {
            base.Channel.Incident_Delete(incidentId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginIncident_Delete(int incidentId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginIncident_Delete(incidentId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndIncident_Delete(System.IAsyncResult result) {
            base.Channel.EndIncident_Delete(result);
        }
        
        private System.IAsyncResult OnBeginIncident_Delete(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int incidentId = ((int)(inValues[0]));
            return this.BeginIncident_Delete(incidentId, callback, asyncState);
        }
        
        private object[] OnEndIncident_Delete(System.IAsyncResult result) {
            this.EndIncident_Delete(result);
            return null;
        }
        
        private void OnIncident_DeleteCompleted(object state) {
            if ((this.Incident_DeleteCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Incident_DeleteCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Incident_DeleteAsync(int incidentId) {
            this.Incident_DeleteAsync(incidentId, null);
        }
        
        public void Incident_DeleteAsync(int incidentId, object userState) {
            if ((this.onBeginIncident_DeleteDelegate == null)) {
                this.onBeginIncident_DeleteDelegate = new BeginOperationDelegate(this.OnBeginIncident_Delete);
            }
            if ((this.onEndIncident_DeleteDelegate == null)) {
                this.onEndIncident_DeleteDelegate = new EndOperationDelegate(this.OnEndIncident_Delete);
            }
            if ((this.onIncident_DeleteCompletedDelegate == null)) {
                this.onIncident_DeleteCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnIncident_DeleteCompleted);
            }
            base.InvokeAsync(this.onBeginIncident_DeleteDelegate, new object[] {
                        incidentId}, this.onEndIncident_DeleteDelegate, this.onIncident_DeleteCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncidentStatus Incident_RetrieveDefaultStatus() {
            return base.Channel.Incident_RetrieveDefaultStatus();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginIncident_RetrieveDefaultStatus(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginIncident_RetrieveDefaultStatus(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncidentStatus EndIncident_RetrieveDefaultStatus(System.IAsyncResult result) {
            return base.Channel.EndIncident_RetrieveDefaultStatus(result);
        }
        
        private System.IAsyncResult OnBeginIncident_RetrieveDefaultStatus(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginIncident_RetrieveDefaultStatus(callback, asyncState);
        }
        
        private object[] OnEndIncident_RetrieveDefaultStatus(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncidentStatus retVal = this.EndIncident_RetrieveDefaultStatus(result);
            return new object[] {
                    retVal};
        }
        
        private void OnIncident_RetrieveDefaultStatusCompleted(object state) {
            if ((this.Incident_RetrieveDefaultStatusCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Incident_RetrieveDefaultStatusCompleted(this, new Incident_RetrieveDefaultStatusCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Incident_RetrieveDefaultStatusAsync() {
            this.Incident_RetrieveDefaultStatusAsync(null);
        }
        
        public void Incident_RetrieveDefaultStatusAsync(object userState) {
            if ((this.onBeginIncident_RetrieveDefaultStatusDelegate == null)) {
                this.onBeginIncident_RetrieveDefaultStatusDelegate = new BeginOperationDelegate(this.OnBeginIncident_RetrieveDefaultStatus);
            }
            if ((this.onEndIncident_RetrieveDefaultStatusDelegate == null)) {
                this.onEndIncident_RetrieveDefaultStatusDelegate = new EndOperationDelegate(this.OnEndIncident_RetrieveDefaultStatus);
            }
            if ((this.onIncident_RetrieveDefaultStatusCompletedDelegate == null)) {
                this.onIncident_RetrieveDefaultStatusCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnIncident_RetrieveDefaultStatusCompleted);
            }
            base.InvokeAsync(this.onBeginIncident_RetrieveDefaultStatusDelegate, null, this.onEndIncident_RetrieveDefaultStatusDelegate, this.onIncident_RetrieveDefaultStatusCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncidentType Incident_RetrieveDefaultType() {
            return base.Channel.Incident_RetrieveDefaultType();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginIncident_RetrieveDefaultType(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginIncident_RetrieveDefaultType(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncidentType EndIncident_RetrieveDefaultType(System.IAsyncResult result) {
            return base.Channel.EndIncident_RetrieveDefaultType(result);
        }
        
        private System.IAsyncResult OnBeginIncident_RetrieveDefaultType(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginIncident_RetrieveDefaultType(callback, asyncState);
        }
        
        private object[] OnEndIncident_RetrieveDefaultType(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteIncidentType retVal = this.EndIncident_RetrieveDefaultType(result);
            return new object[] {
                    retVal};
        }
        
        private void OnIncident_RetrieveDefaultTypeCompleted(object state) {
            if ((this.Incident_RetrieveDefaultTypeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Incident_RetrieveDefaultTypeCompleted(this, new Incident_RetrieveDefaultTypeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Incident_RetrieveDefaultTypeAsync() {
            this.Incident_RetrieveDefaultTypeAsync(null);
        }
        
        public void Incident_RetrieveDefaultTypeAsync(object userState) {
            if ((this.onBeginIncident_RetrieveDefaultTypeDelegate == null)) {
                this.onBeginIncident_RetrieveDefaultTypeDelegate = new BeginOperationDelegate(this.OnBeginIncident_RetrieveDefaultType);
            }
            if ((this.onEndIncident_RetrieveDefaultTypeDelegate == null)) {
                this.onEndIncident_RetrieveDefaultTypeDelegate = new EndOperationDelegate(this.OnEndIncident_RetrieveDefaultType);
            }
            if ((this.onIncident_RetrieveDefaultTypeCompletedDelegate == null)) {
                this.onIncident_RetrieveDefaultTypeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnIncident_RetrieveDefaultTypeCompleted);
            }
            base.InvokeAsync(this.onBeginIncident_RetrieveDefaultTypeDelegate, null, this.onEndIncident_RetrieveDefaultTypeDelegate, this.onIncident_RetrieveDefaultTypeCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteProject Project_Create(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteProject remoteProject, System.Nullable<int> existingProjectId) {
            return base.Channel.Project_Create(remoteProject, existingProjectId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginProject_Create(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteProject remoteProject, System.Nullable<int> existingProjectId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginProject_Create(remoteProject, existingProjectId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteProject EndProject_Create(System.IAsyncResult result) {
            return base.Channel.EndProject_Create(result);
        }
        
        private System.IAsyncResult OnBeginProject_Create(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteProject remoteProject = ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteProject)(inValues[0]));
            System.Nullable<int> existingProjectId = ((System.Nullable<int>)(inValues[1]));
            return this.BeginProject_Create(remoteProject, existingProjectId, callback, asyncState);
        }
        
        private object[] OnEndProject_Create(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteProject retVal = this.EndProject_Create(result);
            return new object[] {
                    retVal};
        }
        
        private void OnProject_CreateCompleted(object state) {
            if ((this.Project_CreateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Project_CreateCompleted(this, new Project_CreateCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Project_CreateAsync(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteProject remoteProject, System.Nullable<int> existingProjectId) {
            this.Project_CreateAsync(remoteProject, existingProjectId, null);
        }
        
        public void Project_CreateAsync(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteProject remoteProject, System.Nullable<int> existingProjectId, object userState) {
            if ((this.onBeginProject_CreateDelegate == null)) {
                this.onBeginProject_CreateDelegate = new BeginOperationDelegate(this.OnBeginProject_Create);
            }
            if ((this.onEndProject_CreateDelegate == null)) {
                this.onEndProject_CreateDelegate = new EndOperationDelegate(this.OnEndProject_Create);
            }
            if ((this.onProject_CreateCompletedDelegate == null)) {
                this.onProject_CreateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnProject_CreateCompleted);
            }
            base.InvokeAsync(this.onBeginProject_CreateDelegate, new object[] {
                        remoteProject,
                        existingProjectId}, this.onEndProject_CreateDelegate, this.onProject_CreateCompletedDelegate, userState);
        }
        
        public void Project_Delete(int projectId) {
            base.Channel.Project_Delete(projectId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginProject_Delete(int projectId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginProject_Delete(projectId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndProject_Delete(System.IAsyncResult result) {
            base.Channel.EndProject_Delete(result);
        }
        
        private System.IAsyncResult OnBeginProject_Delete(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int projectId = ((int)(inValues[0]));
            return this.BeginProject_Delete(projectId, callback, asyncState);
        }
        
        private object[] OnEndProject_Delete(System.IAsyncResult result) {
            this.EndProject_Delete(result);
            return null;
        }
        
        private void OnProject_DeleteCompleted(object state) {
            if ((this.Project_DeleteCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Project_DeleteCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Project_DeleteAsync(int projectId) {
            this.Project_DeleteAsync(projectId, null);
        }
        
        public void Project_DeleteAsync(int projectId, object userState) {
            if ((this.onBeginProject_DeleteDelegate == null)) {
                this.onBeginProject_DeleteDelegate = new BeginOperationDelegate(this.OnBeginProject_Delete);
            }
            if ((this.onEndProject_DeleteDelegate == null)) {
                this.onEndProject_DeleteDelegate = new EndOperationDelegate(this.OnEndProject_Delete);
            }
            if ((this.onProject_DeleteCompletedDelegate == null)) {
                this.onProject_DeleteCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnProject_DeleteCompleted);
            }
            base.InvokeAsync(this.onBeginProject_DeleteDelegate, new object[] {
                        projectId}, this.onEndProject_DeleteDelegate, this.onProject_DeleteCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteProject[] Project_Retrieve() {
            return base.Channel.Project_Retrieve();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginProject_Retrieve(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginProject_Retrieve(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteProject[] EndProject_Retrieve(System.IAsyncResult result) {
            return base.Channel.EndProject_Retrieve(result);
        }
        
        private System.IAsyncResult OnBeginProject_Retrieve(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginProject_Retrieve(callback, asyncState);
        }
        
        private object[] OnEndProject_Retrieve(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteProject[] retVal = this.EndProject_Retrieve(result);
            return new object[] {
                    retVal};
        }
        
        private void OnProject_RetrieveCompleted(object state) {
            if ((this.Project_RetrieveCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Project_RetrieveCompleted(this, new Project_RetrieveCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Project_RetrieveAsync() {
            this.Project_RetrieveAsync(null);
        }
        
        public void Project_RetrieveAsync(object userState) {
            if ((this.onBeginProject_RetrieveDelegate == null)) {
                this.onBeginProject_RetrieveDelegate = new BeginOperationDelegate(this.OnBeginProject_Retrieve);
            }
            if ((this.onEndProject_RetrieveDelegate == null)) {
                this.onEndProject_RetrieveDelegate = new EndOperationDelegate(this.OnEndProject_Retrieve);
            }
            if ((this.onProject_RetrieveCompletedDelegate == null)) {
                this.onProject_RetrieveCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnProject_RetrieveCompleted);
            }
            base.InvokeAsync(this.onBeginProject_RetrieveDelegate, null, this.onEndProject_RetrieveDelegate, this.onProject_RetrieveCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteProject Project_RetrieveById(int projectId) {
            return base.Channel.Project_RetrieveById(projectId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginProject_RetrieveById(int projectId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginProject_RetrieveById(projectId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteProject EndProject_RetrieveById(System.IAsyncResult result) {
            return base.Channel.EndProject_RetrieveById(result);
        }
        
        private System.IAsyncResult OnBeginProject_RetrieveById(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int projectId = ((int)(inValues[0]));
            return this.BeginProject_RetrieveById(projectId, callback, asyncState);
        }
        
        private object[] OnEndProject_RetrieveById(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteProject retVal = this.EndProject_RetrieveById(result);
            return new object[] {
                    retVal};
        }
        
        private void OnProject_RetrieveByIdCompleted(object state) {
            if ((this.Project_RetrieveByIdCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Project_RetrieveByIdCompleted(this, new Project_RetrieveByIdCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Project_RetrieveByIdAsync(int projectId) {
            this.Project_RetrieveByIdAsync(projectId, null);
        }
        
        public void Project_RetrieveByIdAsync(int projectId, object userState) {
            if ((this.onBeginProject_RetrieveByIdDelegate == null)) {
                this.onBeginProject_RetrieveByIdDelegate = new BeginOperationDelegate(this.OnBeginProject_RetrieveById);
            }
            if ((this.onEndProject_RetrieveByIdDelegate == null)) {
                this.onEndProject_RetrieveByIdDelegate = new EndOperationDelegate(this.OnEndProject_RetrieveById);
            }
            if ((this.onProject_RetrieveByIdCompletedDelegate == null)) {
                this.onProject_RetrieveByIdCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnProject_RetrieveByIdCompleted);
            }
            base.InvokeAsync(this.onBeginProject_RetrieveByIdDelegate, new object[] {
                        projectId}, this.onEndProject_RetrieveByIdDelegate, this.onProject_RetrieveByIdCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteProjectUser[] Project_RetrieveUserMembership() {
            return base.Channel.Project_RetrieveUserMembership();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginProject_RetrieveUserMembership(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginProject_RetrieveUserMembership(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteProjectUser[] EndProject_RetrieveUserMembership(System.IAsyncResult result) {
            return base.Channel.EndProject_RetrieveUserMembership(result);
        }
        
        private System.IAsyncResult OnBeginProject_RetrieveUserMembership(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginProject_RetrieveUserMembership(callback, asyncState);
        }
        
        private object[] OnEndProject_RetrieveUserMembership(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteProjectUser[] retVal = this.EndProject_RetrieveUserMembership(result);
            return new object[] {
                    retVal};
        }
        
        private void OnProject_RetrieveUserMembershipCompleted(object state) {
            if ((this.Project_RetrieveUserMembershipCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Project_RetrieveUserMembershipCompleted(this, new Project_RetrieveUserMembershipCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Project_RetrieveUserMembershipAsync() {
            this.Project_RetrieveUserMembershipAsync(null);
        }
        
        public void Project_RetrieveUserMembershipAsync(object userState) {
            if ((this.onBeginProject_RetrieveUserMembershipDelegate == null)) {
                this.onBeginProject_RetrieveUserMembershipDelegate = new BeginOperationDelegate(this.OnBeginProject_RetrieveUserMembership);
            }
            if ((this.onEndProject_RetrieveUserMembershipDelegate == null)) {
                this.onEndProject_RetrieveUserMembershipDelegate = new EndOperationDelegate(this.OnEndProject_RetrieveUserMembership);
            }
            if ((this.onProject_RetrieveUserMembershipCompletedDelegate == null)) {
                this.onProject_RetrieveUserMembershipCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnProject_RetrieveUserMembershipCompleted);
            }
            base.InvokeAsync(this.onBeginProject_RetrieveUserMembershipDelegate, null, this.onEndProject_RetrieveUserMembershipDelegate, this.onProject_RetrieveUserMembershipCompletedDelegate, userState);
        }
        
        public void Project_RefreshProgressExecutionStatusCaches(System.Nullable<int> releaseId, bool runInBackground) {
            base.Channel.Project_RefreshProgressExecutionStatusCaches(releaseId, runInBackground);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginProject_RefreshProgressExecutionStatusCaches(System.Nullable<int> releaseId, bool runInBackground, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginProject_RefreshProgressExecutionStatusCaches(releaseId, runInBackground, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndProject_RefreshProgressExecutionStatusCaches(System.IAsyncResult result) {
            base.Channel.EndProject_RefreshProgressExecutionStatusCaches(result);
        }
        
        private System.IAsyncResult OnBeginProject_RefreshProgressExecutionStatusCaches(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Nullable<int> releaseId = ((System.Nullable<int>)(inValues[0]));
            bool runInBackground = ((bool)(inValues[1]));
            return this.BeginProject_RefreshProgressExecutionStatusCaches(releaseId, runInBackground, callback, asyncState);
        }
        
        private object[] OnEndProject_RefreshProgressExecutionStatusCaches(System.IAsyncResult result) {
            this.EndProject_RefreshProgressExecutionStatusCaches(result);
            return null;
        }
        
        private void OnProject_RefreshProgressExecutionStatusCachesCompleted(object state) {
            if ((this.Project_RefreshProgressExecutionStatusCachesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Project_RefreshProgressExecutionStatusCachesCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Project_RefreshProgressExecutionStatusCachesAsync(System.Nullable<int> releaseId, bool runInBackground) {
            this.Project_RefreshProgressExecutionStatusCachesAsync(releaseId, runInBackground, null);
        }
        
        public void Project_RefreshProgressExecutionStatusCachesAsync(System.Nullable<int> releaseId, bool runInBackground, object userState) {
            if ((this.onBeginProject_RefreshProgressExecutionStatusCachesDelegate == null)) {
                this.onBeginProject_RefreshProgressExecutionStatusCachesDelegate = new BeginOperationDelegate(this.OnBeginProject_RefreshProgressExecutionStatusCaches);
            }
            if ((this.onEndProject_RefreshProgressExecutionStatusCachesDelegate == null)) {
                this.onEndProject_RefreshProgressExecutionStatusCachesDelegate = new EndOperationDelegate(this.OnEndProject_RefreshProgressExecutionStatusCaches);
            }
            if ((this.onProject_RefreshProgressExecutionStatusCachesCompletedDelegate == null)) {
                this.onProject_RefreshProgressExecutionStatusCachesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnProject_RefreshProgressExecutionStatusCachesCompleted);
            }
            base.InvokeAsync(this.onBeginProject_RefreshProgressExecutionStatusCachesDelegate, new object[] {
                        releaseId,
                        runInBackground}, this.onEndProject_RefreshProgressExecutionStatusCachesDelegate, this.onProject_RefreshProgressExecutionStatusCachesCompletedDelegate, userState);
        }
        
        public void Project_AddUserMembership(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteProjectUser remoteProjectUser) {
            base.Channel.Project_AddUserMembership(remoteProjectUser);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginProject_AddUserMembership(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteProjectUser remoteProjectUser, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginProject_AddUserMembership(remoteProjectUser, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndProject_AddUserMembership(System.IAsyncResult result) {
            base.Channel.EndProject_AddUserMembership(result);
        }
        
        private System.IAsyncResult OnBeginProject_AddUserMembership(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteProjectUser remoteProjectUser = ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteProjectUser)(inValues[0]));
            return this.BeginProject_AddUserMembership(remoteProjectUser, callback, asyncState);
        }
        
        private object[] OnEndProject_AddUserMembership(System.IAsyncResult result) {
            this.EndProject_AddUserMembership(result);
            return null;
        }
        
        private void OnProject_AddUserMembershipCompleted(object state) {
            if ((this.Project_AddUserMembershipCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Project_AddUserMembershipCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Project_AddUserMembershipAsync(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteProjectUser remoteProjectUser) {
            this.Project_AddUserMembershipAsync(remoteProjectUser, null);
        }
        
        public void Project_AddUserMembershipAsync(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteProjectUser remoteProjectUser, object userState) {
            if ((this.onBeginProject_AddUserMembershipDelegate == null)) {
                this.onBeginProject_AddUserMembershipDelegate = new BeginOperationDelegate(this.OnBeginProject_AddUserMembership);
            }
            if ((this.onEndProject_AddUserMembershipDelegate == null)) {
                this.onEndProject_AddUserMembershipDelegate = new EndOperationDelegate(this.OnEndProject_AddUserMembership);
            }
            if ((this.onProject_AddUserMembershipCompletedDelegate == null)) {
                this.onProject_AddUserMembershipCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnProject_AddUserMembershipCompleted);
            }
            base.InvokeAsync(this.onBeginProject_AddUserMembershipDelegate, new object[] {
                        remoteProjectUser}, this.onEndProject_AddUserMembershipDelegate, this.onProject_AddUserMembershipCompletedDelegate, userState);
        }
        
        public void Project_UpdateUserMembership(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteProjectUser remoteProjectUser) {
            base.Channel.Project_UpdateUserMembership(remoteProjectUser);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginProject_UpdateUserMembership(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteProjectUser remoteProjectUser, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginProject_UpdateUserMembership(remoteProjectUser, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndProject_UpdateUserMembership(System.IAsyncResult result) {
            base.Channel.EndProject_UpdateUserMembership(result);
        }
        
        private System.IAsyncResult OnBeginProject_UpdateUserMembership(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteProjectUser remoteProjectUser = ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteProjectUser)(inValues[0]));
            return this.BeginProject_UpdateUserMembership(remoteProjectUser, callback, asyncState);
        }
        
        private object[] OnEndProject_UpdateUserMembership(System.IAsyncResult result) {
            this.EndProject_UpdateUserMembership(result);
            return null;
        }
        
        private void OnProject_UpdateUserMembershipCompleted(object state) {
            if ((this.Project_UpdateUserMembershipCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Project_UpdateUserMembershipCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Project_UpdateUserMembershipAsync(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteProjectUser remoteProjectUser) {
            this.Project_UpdateUserMembershipAsync(remoteProjectUser, null);
        }
        
        public void Project_UpdateUserMembershipAsync(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteProjectUser remoteProjectUser, object userState) {
            if ((this.onBeginProject_UpdateUserMembershipDelegate == null)) {
                this.onBeginProject_UpdateUserMembershipDelegate = new BeginOperationDelegate(this.OnBeginProject_UpdateUserMembership);
            }
            if ((this.onEndProject_UpdateUserMembershipDelegate == null)) {
                this.onEndProject_UpdateUserMembershipDelegate = new EndOperationDelegate(this.OnEndProject_UpdateUserMembership);
            }
            if ((this.onProject_UpdateUserMembershipCompletedDelegate == null)) {
                this.onProject_UpdateUserMembershipCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnProject_UpdateUserMembershipCompleted);
            }
            base.InvokeAsync(this.onBeginProject_UpdateUserMembershipDelegate, new object[] {
                        remoteProjectUser}, this.onEndProject_UpdateUserMembershipDelegate, this.onProject_UpdateUserMembershipCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteProjectRole[] ProjectRole_Retrieve() {
            return base.Channel.ProjectRole_Retrieve();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginProjectRole_Retrieve(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginProjectRole_Retrieve(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteProjectRole[] EndProjectRole_Retrieve(System.IAsyncResult result) {
            return base.Channel.EndProjectRole_Retrieve(result);
        }
        
        private System.IAsyncResult OnBeginProjectRole_Retrieve(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginProjectRole_Retrieve(callback, asyncState);
        }
        
        private object[] OnEndProjectRole_Retrieve(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteProjectRole[] retVal = this.EndProjectRole_Retrieve(result);
            return new object[] {
                    retVal};
        }
        
        private void OnProjectRole_RetrieveCompleted(object state) {
            if ((this.ProjectRole_RetrieveCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ProjectRole_RetrieveCompleted(this, new ProjectRole_RetrieveCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ProjectRole_RetrieveAsync() {
            this.ProjectRole_RetrieveAsync(null);
        }
        
        public void ProjectRole_RetrieveAsync(object userState) {
            if ((this.onBeginProjectRole_RetrieveDelegate == null)) {
                this.onBeginProjectRole_RetrieveDelegate = new BeginOperationDelegate(this.OnBeginProjectRole_Retrieve);
            }
            if ((this.onEndProjectRole_RetrieveDelegate == null)) {
                this.onEndProjectRole_RetrieveDelegate = new EndOperationDelegate(this.OnEndProjectRole_Retrieve);
            }
            if ((this.onProjectRole_RetrieveCompletedDelegate == null)) {
                this.onProjectRole_RetrieveCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnProjectRole_RetrieveCompleted);
            }
            base.InvokeAsync(this.onBeginProjectRole_RetrieveDelegate, null, this.onEndProjectRole_RetrieveDelegate, this.onProjectRole_RetrieveCompletedDelegate, userState);
        }
        
        public void Release_AddTestMapping(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteReleaseTestCaseMapping remoteReleaseTestCaseMapping) {
            base.Channel.Release_AddTestMapping(remoteReleaseTestCaseMapping);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRelease_AddTestMapping(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteReleaseTestCaseMapping remoteReleaseTestCaseMapping, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRelease_AddTestMapping(remoteReleaseTestCaseMapping, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndRelease_AddTestMapping(System.IAsyncResult result) {
            base.Channel.EndRelease_AddTestMapping(result);
        }
        
        private System.IAsyncResult OnBeginRelease_AddTestMapping(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteReleaseTestCaseMapping remoteReleaseTestCaseMapping = ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteReleaseTestCaseMapping)(inValues[0]));
            return this.BeginRelease_AddTestMapping(remoteReleaseTestCaseMapping, callback, asyncState);
        }
        
        private object[] OnEndRelease_AddTestMapping(System.IAsyncResult result) {
            this.EndRelease_AddTestMapping(result);
            return null;
        }
        
        private void OnRelease_AddTestMappingCompleted(object state) {
            if ((this.Release_AddTestMappingCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Release_AddTestMappingCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Release_AddTestMappingAsync(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteReleaseTestCaseMapping remoteReleaseTestCaseMapping) {
            this.Release_AddTestMappingAsync(remoteReleaseTestCaseMapping, null);
        }
        
        public void Release_AddTestMappingAsync(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteReleaseTestCaseMapping remoteReleaseTestCaseMapping, object userState) {
            if ((this.onBeginRelease_AddTestMappingDelegate == null)) {
                this.onBeginRelease_AddTestMappingDelegate = new BeginOperationDelegate(this.OnBeginRelease_AddTestMapping);
            }
            if ((this.onEndRelease_AddTestMappingDelegate == null)) {
                this.onEndRelease_AddTestMappingDelegate = new EndOperationDelegate(this.OnEndRelease_AddTestMapping);
            }
            if ((this.onRelease_AddTestMappingCompletedDelegate == null)) {
                this.onRelease_AddTestMappingCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRelease_AddTestMappingCompleted);
            }
            base.InvokeAsync(this.onBeginRelease_AddTestMappingDelegate, new object[] {
                        remoteReleaseTestCaseMapping}, this.onEndRelease_AddTestMappingDelegate, this.onRelease_AddTestMappingCompletedDelegate, userState);
        }
        
        public void Release_AddTestMapping2(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteReleaseTestCaseMapping[] remoteReleaseTestCaseMappings) {
            base.Channel.Release_AddTestMapping2(remoteReleaseTestCaseMappings);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRelease_AddTestMapping2(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteReleaseTestCaseMapping[] remoteReleaseTestCaseMappings, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRelease_AddTestMapping2(remoteReleaseTestCaseMappings, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndRelease_AddTestMapping2(System.IAsyncResult result) {
            base.Channel.EndRelease_AddTestMapping2(result);
        }
        
        private System.IAsyncResult OnBeginRelease_AddTestMapping2(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteReleaseTestCaseMapping[] remoteReleaseTestCaseMappings = ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteReleaseTestCaseMapping[])(inValues[0]));
            return this.BeginRelease_AddTestMapping2(remoteReleaseTestCaseMappings, callback, asyncState);
        }
        
        private object[] OnEndRelease_AddTestMapping2(System.IAsyncResult result) {
            this.EndRelease_AddTestMapping2(result);
            return null;
        }
        
        private void OnRelease_AddTestMapping2Completed(object state) {
            if ((this.Release_AddTestMapping2Completed != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Release_AddTestMapping2Completed(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Release_AddTestMapping2Async(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteReleaseTestCaseMapping[] remoteReleaseTestCaseMappings) {
            this.Release_AddTestMapping2Async(remoteReleaseTestCaseMappings, null);
        }
        
        public void Release_AddTestMapping2Async(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteReleaseTestCaseMapping[] remoteReleaseTestCaseMappings, object userState) {
            if ((this.onBeginRelease_AddTestMapping2Delegate == null)) {
                this.onBeginRelease_AddTestMapping2Delegate = new BeginOperationDelegate(this.OnBeginRelease_AddTestMapping2);
            }
            if ((this.onEndRelease_AddTestMapping2Delegate == null)) {
                this.onEndRelease_AddTestMapping2Delegate = new EndOperationDelegate(this.OnEndRelease_AddTestMapping2);
            }
            if ((this.onRelease_AddTestMapping2CompletedDelegate == null)) {
                this.onRelease_AddTestMapping2CompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRelease_AddTestMapping2Completed);
            }
            base.InvokeAsync(this.onBeginRelease_AddTestMapping2Delegate, new object[] {
                        remoteReleaseTestCaseMappings}, this.onEndRelease_AddTestMapping2Delegate, this.onRelease_AddTestMapping2CompletedDelegate, userState);
        }
        
        public long Release_Count(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters) {
            return base.Channel.Release_Count(remoteFilters);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRelease_Count(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRelease_Count(remoteFilters, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public long EndRelease_Count(System.IAsyncResult result) {
            return base.Channel.EndRelease_Count(result);
        }
        
        private System.IAsyncResult OnBeginRelease_Count(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters = ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[])(inValues[0]));
            return this.BeginRelease_Count(remoteFilters, callback, asyncState);
        }
        
        private object[] OnEndRelease_Count(System.IAsyncResult result) {
            long retVal = this.EndRelease_Count(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRelease_CountCompleted(object state) {
            if ((this.Release_CountCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Release_CountCompleted(this, new Release_CountCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Release_CountAsync(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters) {
            this.Release_CountAsync(remoteFilters, null);
        }
        
        public void Release_CountAsync(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters, object userState) {
            if ((this.onBeginRelease_CountDelegate == null)) {
                this.onBeginRelease_CountDelegate = new BeginOperationDelegate(this.OnBeginRelease_Count);
            }
            if ((this.onEndRelease_CountDelegate == null)) {
                this.onEndRelease_CountDelegate = new EndOperationDelegate(this.OnEndRelease_Count);
            }
            if ((this.onRelease_CountCompletedDelegate == null)) {
                this.onRelease_CountCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRelease_CountCompleted);
            }
            base.InvokeAsync(this.onBeginRelease_CountDelegate, new object[] {
                        remoteFilters}, this.onEndRelease_CountDelegate, this.onRelease_CountCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRelease Release_Create(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRelease remoteRelease, System.Nullable<int> parentReleaseId) {
            return base.Channel.Release_Create(remoteRelease, parentReleaseId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRelease_Create(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRelease remoteRelease, System.Nullable<int> parentReleaseId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRelease_Create(remoteRelease, parentReleaseId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRelease EndRelease_Create(System.IAsyncResult result) {
            return base.Channel.EndRelease_Create(result);
        }
        
        private System.IAsyncResult OnBeginRelease_Create(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRelease remoteRelease = ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRelease)(inValues[0]));
            System.Nullable<int> parentReleaseId = ((System.Nullable<int>)(inValues[1]));
            return this.BeginRelease_Create(remoteRelease, parentReleaseId, callback, asyncState);
        }
        
        private object[] OnEndRelease_Create(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRelease retVal = this.EndRelease_Create(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRelease_CreateCompleted(object state) {
            if ((this.Release_CreateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Release_CreateCompleted(this, new Release_CreateCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Release_CreateAsync(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRelease remoteRelease, System.Nullable<int> parentReleaseId) {
            this.Release_CreateAsync(remoteRelease, parentReleaseId, null);
        }
        
        public void Release_CreateAsync(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRelease remoteRelease, System.Nullable<int> parentReleaseId, object userState) {
            if ((this.onBeginRelease_CreateDelegate == null)) {
                this.onBeginRelease_CreateDelegate = new BeginOperationDelegate(this.OnBeginRelease_Create);
            }
            if ((this.onEndRelease_CreateDelegate == null)) {
                this.onEndRelease_CreateDelegate = new EndOperationDelegate(this.OnEndRelease_Create);
            }
            if ((this.onRelease_CreateCompletedDelegate == null)) {
                this.onRelease_CreateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRelease_CreateCompleted);
            }
            base.InvokeAsync(this.onBeginRelease_CreateDelegate, new object[] {
                        remoteRelease,
                        parentReleaseId}, this.onEndRelease_CreateDelegate, this.onRelease_CreateCompletedDelegate, userState);
        }
        
        public void Release_RemoveTestMapping(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteReleaseTestCaseMapping remoteReleaseTestCaseMapping) {
            base.Channel.Release_RemoveTestMapping(remoteReleaseTestCaseMapping);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRelease_RemoveTestMapping(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteReleaseTestCaseMapping remoteReleaseTestCaseMapping, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRelease_RemoveTestMapping(remoteReleaseTestCaseMapping, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndRelease_RemoveTestMapping(System.IAsyncResult result) {
            base.Channel.EndRelease_RemoveTestMapping(result);
        }
        
        private System.IAsyncResult OnBeginRelease_RemoveTestMapping(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteReleaseTestCaseMapping remoteReleaseTestCaseMapping = ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteReleaseTestCaseMapping)(inValues[0]));
            return this.BeginRelease_RemoveTestMapping(remoteReleaseTestCaseMapping, callback, asyncState);
        }
        
        private object[] OnEndRelease_RemoveTestMapping(System.IAsyncResult result) {
            this.EndRelease_RemoveTestMapping(result);
            return null;
        }
        
        private void OnRelease_RemoveTestMappingCompleted(object state) {
            if ((this.Release_RemoveTestMappingCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Release_RemoveTestMappingCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Release_RemoveTestMappingAsync(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteReleaseTestCaseMapping remoteReleaseTestCaseMapping) {
            this.Release_RemoveTestMappingAsync(remoteReleaseTestCaseMapping, null);
        }
        
        public void Release_RemoveTestMappingAsync(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteReleaseTestCaseMapping remoteReleaseTestCaseMapping, object userState) {
            if ((this.onBeginRelease_RemoveTestMappingDelegate == null)) {
                this.onBeginRelease_RemoveTestMappingDelegate = new BeginOperationDelegate(this.OnBeginRelease_RemoveTestMapping);
            }
            if ((this.onEndRelease_RemoveTestMappingDelegate == null)) {
                this.onEndRelease_RemoveTestMappingDelegate = new EndOperationDelegate(this.OnEndRelease_RemoveTestMapping);
            }
            if ((this.onRelease_RemoveTestMappingCompletedDelegate == null)) {
                this.onRelease_RemoveTestMappingCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRelease_RemoveTestMappingCompleted);
            }
            base.InvokeAsync(this.onBeginRelease_RemoveTestMappingDelegate, new object[] {
                        remoteReleaseTestCaseMapping}, this.onEndRelease_RemoveTestMappingDelegate, this.onRelease_RemoveTestMappingCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRelease[] Release_Retrieve(bool activeOnly) {
            return base.Channel.Release_Retrieve(activeOnly);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRelease_Retrieve(bool activeOnly, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRelease_Retrieve(activeOnly, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRelease[] EndRelease_Retrieve(System.IAsyncResult result) {
            return base.Channel.EndRelease_Retrieve(result);
        }
        
        private System.IAsyncResult OnBeginRelease_Retrieve(object[] inValues, System.AsyncCallback callback, object asyncState) {
            bool activeOnly = ((bool)(inValues[0]));
            return this.BeginRelease_Retrieve(activeOnly, callback, asyncState);
        }
        
        private object[] OnEndRelease_Retrieve(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRelease[] retVal = this.EndRelease_Retrieve(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRelease_RetrieveCompleted(object state) {
            if ((this.Release_RetrieveCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Release_RetrieveCompleted(this, new Release_RetrieveCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Release_RetrieveAsync(bool activeOnly) {
            this.Release_RetrieveAsync(activeOnly, null);
        }
        
        public void Release_RetrieveAsync(bool activeOnly, object userState) {
            if ((this.onBeginRelease_RetrieveDelegate == null)) {
                this.onBeginRelease_RetrieveDelegate = new BeginOperationDelegate(this.OnBeginRelease_Retrieve);
            }
            if ((this.onEndRelease_RetrieveDelegate == null)) {
                this.onEndRelease_RetrieveDelegate = new EndOperationDelegate(this.OnEndRelease_Retrieve);
            }
            if ((this.onRelease_RetrieveCompletedDelegate == null)) {
                this.onRelease_RetrieveCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRelease_RetrieveCompleted);
            }
            base.InvokeAsync(this.onBeginRelease_RetrieveDelegate, new object[] {
                        activeOnly}, this.onEndRelease_RetrieveDelegate, this.onRelease_RetrieveCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRelease[] Release_Retrieve2(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters, int startingRow, int numberOfRows) {
            return base.Channel.Release_Retrieve2(remoteFilters, startingRow, numberOfRows);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRelease_Retrieve2(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters, int startingRow, int numberOfRows, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRelease_Retrieve2(remoteFilters, startingRow, numberOfRows, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRelease[] EndRelease_Retrieve2(System.IAsyncResult result) {
            return base.Channel.EndRelease_Retrieve2(result);
        }
        
        private System.IAsyncResult OnBeginRelease_Retrieve2(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters = ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[])(inValues[0]));
            int startingRow = ((int)(inValues[1]));
            int numberOfRows = ((int)(inValues[2]));
            return this.BeginRelease_Retrieve2(remoteFilters, startingRow, numberOfRows, callback, asyncState);
        }
        
        private object[] OnEndRelease_Retrieve2(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRelease[] retVal = this.EndRelease_Retrieve2(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRelease_Retrieve2Completed(object state) {
            if ((this.Release_Retrieve2Completed != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Release_Retrieve2Completed(this, new Release_Retrieve2CompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Release_Retrieve2Async(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters, int startingRow, int numberOfRows) {
            this.Release_Retrieve2Async(remoteFilters, startingRow, numberOfRows, null);
        }
        
        public void Release_Retrieve2Async(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters, int startingRow, int numberOfRows, object userState) {
            if ((this.onBeginRelease_Retrieve2Delegate == null)) {
                this.onBeginRelease_Retrieve2Delegate = new BeginOperationDelegate(this.OnBeginRelease_Retrieve2);
            }
            if ((this.onEndRelease_Retrieve2Delegate == null)) {
                this.onEndRelease_Retrieve2Delegate = new EndOperationDelegate(this.OnEndRelease_Retrieve2);
            }
            if ((this.onRelease_Retrieve2CompletedDelegate == null)) {
                this.onRelease_Retrieve2CompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRelease_Retrieve2Completed);
            }
            base.InvokeAsync(this.onBeginRelease_Retrieve2Delegate, new object[] {
                        remoteFilters,
                        startingRow,
                        numberOfRows}, this.onEndRelease_Retrieve2Delegate, this.onRelease_Retrieve2CompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRelease Release_RetrieveById(int releaseId) {
            return base.Channel.Release_RetrieveById(releaseId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRelease_RetrieveById(int releaseId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRelease_RetrieveById(releaseId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRelease EndRelease_RetrieveById(System.IAsyncResult result) {
            return base.Channel.EndRelease_RetrieveById(result);
        }
        
        private System.IAsyncResult OnBeginRelease_RetrieveById(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int releaseId = ((int)(inValues[0]));
            return this.BeginRelease_RetrieveById(releaseId, callback, asyncState);
        }
        
        private object[] OnEndRelease_RetrieveById(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRelease retVal = this.EndRelease_RetrieveById(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRelease_RetrieveByIdCompleted(object state) {
            if ((this.Release_RetrieveByIdCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Release_RetrieveByIdCompleted(this, new Release_RetrieveByIdCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Release_RetrieveByIdAsync(int releaseId) {
            this.Release_RetrieveByIdAsync(releaseId, null);
        }
        
        public void Release_RetrieveByIdAsync(int releaseId, object userState) {
            if ((this.onBeginRelease_RetrieveByIdDelegate == null)) {
                this.onBeginRelease_RetrieveByIdDelegate = new BeginOperationDelegate(this.OnBeginRelease_RetrieveById);
            }
            if ((this.onEndRelease_RetrieveByIdDelegate == null)) {
                this.onEndRelease_RetrieveByIdDelegate = new EndOperationDelegate(this.OnEndRelease_RetrieveById);
            }
            if ((this.onRelease_RetrieveByIdCompletedDelegate == null)) {
                this.onRelease_RetrieveByIdCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRelease_RetrieveByIdCompleted);
            }
            base.InvokeAsync(this.onBeginRelease_RetrieveByIdDelegate, new object[] {
                        releaseId}, this.onEndRelease_RetrieveByIdDelegate, this.onRelease_RetrieveByIdCompletedDelegate, userState);
        }
        
        public void Release_Update(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRelease remoteRelease) {
            base.Channel.Release_Update(remoteRelease);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRelease_Update(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRelease remoteRelease, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRelease_Update(remoteRelease, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndRelease_Update(System.IAsyncResult result) {
            base.Channel.EndRelease_Update(result);
        }
        
        private System.IAsyncResult OnBeginRelease_Update(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRelease remoteRelease = ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRelease)(inValues[0]));
            return this.BeginRelease_Update(remoteRelease, callback, asyncState);
        }
        
        private object[] OnEndRelease_Update(System.IAsyncResult result) {
            this.EndRelease_Update(result);
            return null;
        }
        
        private void OnRelease_UpdateCompleted(object state) {
            if ((this.Release_UpdateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Release_UpdateCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Release_UpdateAsync(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRelease remoteRelease) {
            this.Release_UpdateAsync(remoteRelease, null);
        }
        
        public void Release_UpdateAsync(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRelease remoteRelease, object userState) {
            if ((this.onBeginRelease_UpdateDelegate == null)) {
                this.onBeginRelease_UpdateDelegate = new BeginOperationDelegate(this.OnBeginRelease_Update);
            }
            if ((this.onEndRelease_UpdateDelegate == null)) {
                this.onEndRelease_UpdateDelegate = new EndOperationDelegate(this.OnEndRelease_Update);
            }
            if ((this.onRelease_UpdateCompletedDelegate == null)) {
                this.onRelease_UpdateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRelease_UpdateCompleted);
            }
            base.InvokeAsync(this.onBeginRelease_UpdateDelegate, new object[] {
                        remoteRelease}, this.onEndRelease_UpdateDelegate, this.onRelease_UpdateCompletedDelegate, userState);
        }
        
        public void Release_Delete(int releaseId) {
            base.Channel.Release_Delete(releaseId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRelease_Delete(int releaseId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRelease_Delete(releaseId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndRelease_Delete(System.IAsyncResult result) {
            base.Channel.EndRelease_Delete(result);
        }
        
        private System.IAsyncResult OnBeginRelease_Delete(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int releaseId = ((int)(inValues[0]));
            return this.BeginRelease_Delete(releaseId, callback, asyncState);
        }
        
        private object[] OnEndRelease_Delete(System.IAsyncResult result) {
            this.EndRelease_Delete(result);
            return null;
        }
        
        private void OnRelease_DeleteCompleted(object state) {
            if ((this.Release_DeleteCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Release_DeleteCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Release_DeleteAsync(int releaseId) {
            this.Release_DeleteAsync(releaseId, null);
        }
        
        public void Release_DeleteAsync(int releaseId, object userState) {
            if ((this.onBeginRelease_DeleteDelegate == null)) {
                this.onBeginRelease_DeleteDelegate = new BeginOperationDelegate(this.OnBeginRelease_Delete);
            }
            if ((this.onEndRelease_DeleteDelegate == null)) {
                this.onEndRelease_DeleteDelegate = new EndOperationDelegate(this.OnEndRelease_Delete);
            }
            if ((this.onRelease_DeleteCompletedDelegate == null)) {
                this.onRelease_DeleteCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRelease_DeleteCompleted);
            }
            base.InvokeAsync(this.onBeginRelease_DeleteDelegate, new object[] {
                        releaseId}, this.onEndRelease_DeleteDelegate, this.onRelease_DeleteCompletedDelegate, userState);
        }
        
        public void Release_Move(int releaseId, System.Nullable<int> destinationReleaseId) {
            base.Channel.Release_Move(releaseId, destinationReleaseId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRelease_Move(int releaseId, System.Nullable<int> destinationReleaseId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRelease_Move(releaseId, destinationReleaseId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndRelease_Move(System.IAsyncResult result) {
            base.Channel.EndRelease_Move(result);
        }
        
        private System.IAsyncResult OnBeginRelease_Move(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int releaseId = ((int)(inValues[0]));
            System.Nullable<int> destinationReleaseId = ((System.Nullable<int>)(inValues[1]));
            return this.BeginRelease_Move(releaseId, destinationReleaseId, callback, asyncState);
        }
        
        private object[] OnEndRelease_Move(System.IAsyncResult result) {
            this.EndRelease_Move(result);
            return null;
        }
        
        private void OnRelease_MoveCompleted(object state) {
            if ((this.Release_MoveCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Release_MoveCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Release_MoveAsync(int releaseId, System.Nullable<int> destinationReleaseId) {
            this.Release_MoveAsync(releaseId, destinationReleaseId, null);
        }
        
        public void Release_MoveAsync(int releaseId, System.Nullable<int> destinationReleaseId, object userState) {
            if ((this.onBeginRelease_MoveDelegate == null)) {
                this.onBeginRelease_MoveDelegate = new BeginOperationDelegate(this.OnBeginRelease_Move);
            }
            if ((this.onEndRelease_MoveDelegate == null)) {
                this.onEndRelease_MoveDelegate = new EndOperationDelegate(this.OnEndRelease_Move);
            }
            if ((this.onRelease_MoveCompletedDelegate == null)) {
                this.onRelease_MoveCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRelease_MoveCompleted);
            }
            base.InvokeAsync(this.onBeginRelease_MoveDelegate, new object[] {
                        releaseId,
                        destinationReleaseId}, this.onEndRelease_MoveDelegate, this.onRelease_MoveCompletedDelegate, userState);
        }
        
        public void Release_Indent(int releaseId) {
            base.Channel.Release_Indent(releaseId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRelease_Indent(int releaseId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRelease_Indent(releaseId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndRelease_Indent(System.IAsyncResult result) {
            base.Channel.EndRelease_Indent(result);
        }
        
        private System.IAsyncResult OnBeginRelease_Indent(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int releaseId = ((int)(inValues[0]));
            return this.BeginRelease_Indent(releaseId, callback, asyncState);
        }
        
        private object[] OnEndRelease_Indent(System.IAsyncResult result) {
            this.EndRelease_Indent(result);
            return null;
        }
        
        private void OnRelease_IndentCompleted(object state) {
            if ((this.Release_IndentCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Release_IndentCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Release_IndentAsync(int releaseId) {
            this.Release_IndentAsync(releaseId, null);
        }
        
        public void Release_IndentAsync(int releaseId, object userState) {
            if ((this.onBeginRelease_IndentDelegate == null)) {
                this.onBeginRelease_IndentDelegate = new BeginOperationDelegate(this.OnBeginRelease_Indent);
            }
            if ((this.onEndRelease_IndentDelegate == null)) {
                this.onEndRelease_IndentDelegate = new EndOperationDelegate(this.OnEndRelease_Indent);
            }
            if ((this.onRelease_IndentCompletedDelegate == null)) {
                this.onRelease_IndentCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRelease_IndentCompleted);
            }
            base.InvokeAsync(this.onBeginRelease_IndentDelegate, new object[] {
                        releaseId}, this.onEndRelease_IndentDelegate, this.onRelease_IndentCompletedDelegate, userState);
        }
        
        public void Release_Outdent(int releaseId) {
            base.Channel.Release_Outdent(releaseId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRelease_Outdent(int releaseId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRelease_Outdent(releaseId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndRelease_Outdent(System.IAsyncResult result) {
            base.Channel.EndRelease_Outdent(result);
        }
        
        private System.IAsyncResult OnBeginRelease_Outdent(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int releaseId = ((int)(inValues[0]));
            return this.BeginRelease_Outdent(releaseId, callback, asyncState);
        }
        
        private object[] OnEndRelease_Outdent(System.IAsyncResult result) {
            this.EndRelease_Outdent(result);
            return null;
        }
        
        private void OnRelease_OutdentCompleted(object state) {
            if ((this.Release_OutdentCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Release_OutdentCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Release_OutdentAsync(int releaseId) {
            this.Release_OutdentAsync(releaseId, null);
        }
        
        public void Release_OutdentAsync(int releaseId, object userState) {
            if ((this.onBeginRelease_OutdentDelegate == null)) {
                this.onBeginRelease_OutdentDelegate = new BeginOperationDelegate(this.OnBeginRelease_Outdent);
            }
            if ((this.onEndRelease_OutdentDelegate == null)) {
                this.onEndRelease_OutdentDelegate = new EndOperationDelegate(this.OnEndRelease_Outdent);
            }
            if ((this.onRelease_OutdentCompletedDelegate == null)) {
                this.onRelease_OutdentCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRelease_OutdentCompleted);
            }
            base.InvokeAsync(this.onBeginRelease_OutdentDelegate, new object[] {
                        releaseId}, this.onEndRelease_OutdentDelegate, this.onRelease_OutdentCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComment[] Release_RetrieveComments(int ReleaseId) {
            return base.Channel.Release_RetrieveComments(ReleaseId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRelease_RetrieveComments(int ReleaseId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRelease_RetrieveComments(ReleaseId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComment[] EndRelease_RetrieveComments(System.IAsyncResult result) {
            return base.Channel.EndRelease_RetrieveComments(result);
        }
        
        private System.IAsyncResult OnBeginRelease_RetrieveComments(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int ReleaseId = ((int)(inValues[0]));
            return this.BeginRelease_RetrieveComments(ReleaseId, callback, asyncState);
        }
        
        private object[] OnEndRelease_RetrieveComments(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComment[] retVal = this.EndRelease_RetrieveComments(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRelease_RetrieveCommentsCompleted(object state) {
            if ((this.Release_RetrieveCommentsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Release_RetrieveCommentsCompleted(this, new Release_RetrieveCommentsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Release_RetrieveCommentsAsync(int ReleaseId) {
            this.Release_RetrieveCommentsAsync(ReleaseId, null);
        }
        
        public void Release_RetrieveCommentsAsync(int ReleaseId, object userState) {
            if ((this.onBeginRelease_RetrieveCommentsDelegate == null)) {
                this.onBeginRelease_RetrieveCommentsDelegate = new BeginOperationDelegate(this.OnBeginRelease_RetrieveComments);
            }
            if ((this.onEndRelease_RetrieveCommentsDelegate == null)) {
                this.onEndRelease_RetrieveCommentsDelegate = new EndOperationDelegate(this.OnEndRelease_RetrieveComments);
            }
            if ((this.onRelease_RetrieveCommentsCompletedDelegate == null)) {
                this.onRelease_RetrieveCommentsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRelease_RetrieveCommentsCompleted);
            }
            base.InvokeAsync(this.onBeginRelease_RetrieveCommentsDelegate, new object[] {
                        ReleaseId}, this.onEndRelease_RetrieveCommentsDelegate, this.onRelease_RetrieveCommentsCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteReleaseTestCaseMapping[] Release_RetrieveTestMapping(int releaseId) {
            return base.Channel.Release_RetrieveTestMapping(releaseId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRelease_RetrieveTestMapping(int releaseId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRelease_RetrieveTestMapping(releaseId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteReleaseTestCaseMapping[] EndRelease_RetrieveTestMapping(System.IAsyncResult result) {
            return base.Channel.EndRelease_RetrieveTestMapping(result);
        }
        
        private System.IAsyncResult OnBeginRelease_RetrieveTestMapping(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int releaseId = ((int)(inValues[0]));
            return this.BeginRelease_RetrieveTestMapping(releaseId, callback, asyncState);
        }
        
        private object[] OnEndRelease_RetrieveTestMapping(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteReleaseTestCaseMapping[] retVal = this.EndRelease_RetrieveTestMapping(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRelease_RetrieveTestMappingCompleted(object state) {
            if ((this.Release_RetrieveTestMappingCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Release_RetrieveTestMappingCompleted(this, new Release_RetrieveTestMappingCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Release_RetrieveTestMappingAsync(int releaseId) {
            this.Release_RetrieveTestMappingAsync(releaseId, null);
        }
        
        public void Release_RetrieveTestMappingAsync(int releaseId, object userState) {
            if ((this.onBeginRelease_RetrieveTestMappingDelegate == null)) {
                this.onBeginRelease_RetrieveTestMappingDelegate = new BeginOperationDelegate(this.OnBeginRelease_RetrieveTestMapping);
            }
            if ((this.onEndRelease_RetrieveTestMappingDelegate == null)) {
                this.onEndRelease_RetrieveTestMappingDelegate = new EndOperationDelegate(this.OnEndRelease_RetrieveTestMapping);
            }
            if ((this.onRelease_RetrieveTestMappingCompletedDelegate == null)) {
                this.onRelease_RetrieveTestMappingCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRelease_RetrieveTestMappingCompleted);
            }
            base.InvokeAsync(this.onBeginRelease_RetrieveTestMappingDelegate, new object[] {
                        releaseId}, this.onEndRelease_RetrieveTestMappingDelegate, this.onRelease_RetrieveTestMappingCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComment Release_CreateComment(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComment remoteComment) {
            return base.Channel.Release_CreateComment(remoteComment);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRelease_CreateComment(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComment remoteComment, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRelease_CreateComment(remoteComment, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComment EndRelease_CreateComment(System.IAsyncResult result) {
            return base.Channel.EndRelease_CreateComment(result);
        }
        
        private System.IAsyncResult OnBeginRelease_CreateComment(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComment remoteComment = ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComment)(inValues[0]));
            return this.BeginRelease_CreateComment(remoteComment, callback, asyncState);
        }
        
        private object[] OnEndRelease_CreateComment(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComment retVal = this.EndRelease_CreateComment(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRelease_CreateCommentCompleted(object state) {
            if ((this.Release_CreateCommentCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Release_CreateCommentCompleted(this, new Release_CreateCommentCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Release_CreateCommentAsync(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComment remoteComment) {
            this.Release_CreateCommentAsync(remoteComment, null);
        }
        
        public void Release_CreateCommentAsync(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComment remoteComment, object userState) {
            if ((this.onBeginRelease_CreateCommentDelegate == null)) {
                this.onBeginRelease_CreateCommentDelegate = new BeginOperationDelegate(this.OnBeginRelease_CreateComment);
            }
            if ((this.onEndRelease_CreateCommentDelegate == null)) {
                this.onEndRelease_CreateCommentDelegate = new EndOperationDelegate(this.OnEndRelease_CreateComment);
            }
            if ((this.onRelease_CreateCommentCompletedDelegate == null)) {
                this.onRelease_CreateCommentCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRelease_CreateCommentCompleted);
            }
            base.InvokeAsync(this.onBeginRelease_CreateCommentDelegate, new object[] {
                        remoteComment}, this.onEndRelease_CreateCommentDelegate, this.onRelease_CreateCommentCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteReleaseStatus[] Release_RetrieveStatuses() {
            return base.Channel.Release_RetrieveStatuses();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRelease_RetrieveStatuses(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRelease_RetrieveStatuses(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteReleaseStatus[] EndRelease_RetrieveStatuses(System.IAsyncResult result) {
            return base.Channel.EndRelease_RetrieveStatuses(result);
        }
        
        private System.IAsyncResult OnBeginRelease_RetrieveStatuses(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginRelease_RetrieveStatuses(callback, asyncState);
        }
        
        private object[] OnEndRelease_RetrieveStatuses(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteReleaseStatus[] retVal = this.EndRelease_RetrieveStatuses(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRelease_RetrieveStatusesCompleted(object state) {
            if ((this.Release_RetrieveStatusesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Release_RetrieveStatusesCompleted(this, new Release_RetrieveStatusesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Release_RetrieveStatusesAsync() {
            this.Release_RetrieveStatusesAsync(null);
        }
        
        public void Release_RetrieveStatusesAsync(object userState) {
            if ((this.onBeginRelease_RetrieveStatusesDelegate == null)) {
                this.onBeginRelease_RetrieveStatusesDelegate = new BeginOperationDelegate(this.OnBeginRelease_RetrieveStatuses);
            }
            if ((this.onEndRelease_RetrieveStatusesDelegate == null)) {
                this.onEndRelease_RetrieveStatusesDelegate = new EndOperationDelegate(this.OnEndRelease_RetrieveStatuses);
            }
            if ((this.onRelease_RetrieveStatusesCompletedDelegate == null)) {
                this.onRelease_RetrieveStatusesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRelease_RetrieveStatusesCompleted);
            }
            base.InvokeAsync(this.onBeginRelease_RetrieveStatusesDelegate, null, this.onEndRelease_RetrieveStatusesDelegate, this.onRelease_RetrieveStatusesCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteReleaseType[] Release_RetrieveTypes() {
            return base.Channel.Release_RetrieveTypes();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRelease_RetrieveTypes(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRelease_RetrieveTypes(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteReleaseType[] EndRelease_RetrieveTypes(System.IAsyncResult result) {
            return base.Channel.EndRelease_RetrieveTypes(result);
        }
        
        private System.IAsyncResult OnBeginRelease_RetrieveTypes(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginRelease_RetrieveTypes(callback, asyncState);
        }
        
        private object[] OnEndRelease_RetrieveTypes(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteReleaseType[] retVal = this.EndRelease_RetrieveTypes(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRelease_RetrieveTypesCompleted(object state) {
            if ((this.Release_RetrieveTypesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Release_RetrieveTypesCompleted(this, new Release_RetrieveTypesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Release_RetrieveTypesAsync() {
            this.Release_RetrieveTypesAsync(null);
        }
        
        public void Release_RetrieveTypesAsync(object userState) {
            if ((this.onBeginRelease_RetrieveTypesDelegate == null)) {
                this.onBeginRelease_RetrieveTypesDelegate = new BeginOperationDelegate(this.OnBeginRelease_RetrieveTypes);
            }
            if ((this.onEndRelease_RetrieveTypesDelegate == null)) {
                this.onEndRelease_RetrieveTypesDelegate = new EndOperationDelegate(this.OnEndRelease_RetrieveTypes);
            }
            if ((this.onRelease_RetrieveTypesCompletedDelegate == null)) {
                this.onRelease_RetrieveTypesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRelease_RetrieveTypesCompleted);
            }
            base.InvokeAsync(this.onBeginRelease_RetrieveTypesDelegate, null, this.onEndRelease_RetrieveTypesDelegate, this.onRelease_RetrieveTypesCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteWorkflowField[] Release_RetrieveWorkflowFields(int currentTypeId, int currentStatusId) {
            return base.Channel.Release_RetrieveWorkflowFields(currentTypeId, currentStatusId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRelease_RetrieveWorkflowFields(int currentTypeId, int currentStatusId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRelease_RetrieveWorkflowFields(currentTypeId, currentStatusId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteWorkflowField[] EndRelease_RetrieveWorkflowFields(System.IAsyncResult result) {
            return base.Channel.EndRelease_RetrieveWorkflowFields(result);
        }
        
        private System.IAsyncResult OnBeginRelease_RetrieveWorkflowFields(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int currentTypeId = ((int)(inValues[0]));
            int currentStatusId = ((int)(inValues[1]));
            return this.BeginRelease_RetrieveWorkflowFields(currentTypeId, currentStatusId, callback, asyncState);
        }
        
        private object[] OnEndRelease_RetrieveWorkflowFields(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteWorkflowField[] retVal = this.EndRelease_RetrieveWorkflowFields(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRelease_RetrieveWorkflowFieldsCompleted(object state) {
            if ((this.Release_RetrieveWorkflowFieldsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Release_RetrieveWorkflowFieldsCompleted(this, new Release_RetrieveWorkflowFieldsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Release_RetrieveWorkflowFieldsAsync(int currentTypeId, int currentStatusId) {
            this.Release_RetrieveWorkflowFieldsAsync(currentTypeId, currentStatusId, null);
        }
        
        public void Release_RetrieveWorkflowFieldsAsync(int currentTypeId, int currentStatusId, object userState) {
            if ((this.onBeginRelease_RetrieveWorkflowFieldsDelegate == null)) {
                this.onBeginRelease_RetrieveWorkflowFieldsDelegate = new BeginOperationDelegate(this.OnBeginRelease_RetrieveWorkflowFields);
            }
            if ((this.onEndRelease_RetrieveWorkflowFieldsDelegate == null)) {
                this.onEndRelease_RetrieveWorkflowFieldsDelegate = new EndOperationDelegate(this.OnEndRelease_RetrieveWorkflowFields);
            }
            if ((this.onRelease_RetrieveWorkflowFieldsCompletedDelegate == null)) {
                this.onRelease_RetrieveWorkflowFieldsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRelease_RetrieveWorkflowFieldsCompleted);
            }
            base.InvokeAsync(this.onBeginRelease_RetrieveWorkflowFieldsDelegate, new object[] {
                        currentTypeId,
                        currentStatusId}, this.onEndRelease_RetrieveWorkflowFieldsDelegate, this.onRelease_RetrieveWorkflowFieldsCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteWorkflowTransition[] Release_RetrieveWorkflowTransitions(int currentTypeId, int currentStatusId, bool isCreator, bool isOwner) {
            return base.Channel.Release_RetrieveWorkflowTransitions(currentTypeId, currentStatusId, isCreator, isOwner);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRelease_RetrieveWorkflowTransitions(int currentTypeId, int currentStatusId, bool isCreator, bool isOwner, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRelease_RetrieveWorkflowTransitions(currentTypeId, currentStatusId, isCreator, isOwner, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteWorkflowTransition[] EndRelease_RetrieveWorkflowTransitions(System.IAsyncResult result) {
            return base.Channel.EndRelease_RetrieveWorkflowTransitions(result);
        }
        
        private System.IAsyncResult OnBeginRelease_RetrieveWorkflowTransitions(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int currentTypeId = ((int)(inValues[0]));
            int currentStatusId = ((int)(inValues[1]));
            bool isCreator = ((bool)(inValues[2]));
            bool isOwner = ((bool)(inValues[3]));
            return this.BeginRelease_RetrieveWorkflowTransitions(currentTypeId, currentStatusId, isCreator, isOwner, callback, asyncState);
        }
        
        private object[] OnEndRelease_RetrieveWorkflowTransitions(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteWorkflowTransition[] retVal = this.EndRelease_RetrieveWorkflowTransitions(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRelease_RetrieveWorkflowTransitionsCompleted(object state) {
            if ((this.Release_RetrieveWorkflowTransitionsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Release_RetrieveWorkflowTransitionsCompleted(this, new Release_RetrieveWorkflowTransitionsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Release_RetrieveWorkflowTransitionsAsync(int currentTypeId, int currentStatusId, bool isCreator, bool isOwner) {
            this.Release_RetrieveWorkflowTransitionsAsync(currentTypeId, currentStatusId, isCreator, isOwner, null);
        }
        
        public void Release_RetrieveWorkflowTransitionsAsync(int currentTypeId, int currentStatusId, bool isCreator, bool isOwner, object userState) {
            if ((this.onBeginRelease_RetrieveWorkflowTransitionsDelegate == null)) {
                this.onBeginRelease_RetrieveWorkflowTransitionsDelegate = new BeginOperationDelegate(this.OnBeginRelease_RetrieveWorkflowTransitions);
            }
            if ((this.onEndRelease_RetrieveWorkflowTransitionsDelegate == null)) {
                this.onEndRelease_RetrieveWorkflowTransitionsDelegate = new EndOperationDelegate(this.OnEndRelease_RetrieveWorkflowTransitions);
            }
            if ((this.onRelease_RetrieveWorkflowTransitionsCompletedDelegate == null)) {
                this.onRelease_RetrieveWorkflowTransitionsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRelease_RetrieveWorkflowTransitionsCompleted);
            }
            base.InvokeAsync(this.onBeginRelease_RetrieveWorkflowTransitionsDelegate, new object[] {
                        currentTypeId,
                        currentStatusId,
                        isCreator,
                        isOwner}, this.onEndRelease_RetrieveWorkflowTransitionsDelegate, this.onRelease_RetrieveWorkflowTransitionsCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteWorkflowCustomProperty[] Release_RetrieveWorkflowCustomProperties(int currentTypeId, int currentStatusId) {
            return base.Channel.Release_RetrieveWorkflowCustomProperties(currentTypeId, currentStatusId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRelease_RetrieveWorkflowCustomProperties(int currentTypeId, int currentStatusId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRelease_RetrieveWorkflowCustomProperties(currentTypeId, currentStatusId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteWorkflowCustomProperty[] EndRelease_RetrieveWorkflowCustomProperties(System.IAsyncResult result) {
            return base.Channel.EndRelease_RetrieveWorkflowCustomProperties(result);
        }
        
        private System.IAsyncResult OnBeginRelease_RetrieveWorkflowCustomProperties(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int currentTypeId = ((int)(inValues[0]));
            int currentStatusId = ((int)(inValues[1]));
            return this.BeginRelease_RetrieveWorkflowCustomProperties(currentTypeId, currentStatusId, callback, asyncState);
        }
        
        private object[] OnEndRelease_RetrieveWorkflowCustomProperties(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteWorkflowCustomProperty[] retVal = this.EndRelease_RetrieveWorkflowCustomProperties(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRelease_RetrieveWorkflowCustomPropertiesCompleted(object state) {
            if ((this.Release_RetrieveWorkflowCustomPropertiesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Release_RetrieveWorkflowCustomPropertiesCompleted(this, new Release_RetrieveWorkflowCustomPropertiesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Release_RetrieveWorkflowCustomPropertiesAsync(int currentTypeId, int currentStatusId) {
            this.Release_RetrieveWorkflowCustomPropertiesAsync(currentTypeId, currentStatusId, null);
        }
        
        public void Release_RetrieveWorkflowCustomPropertiesAsync(int currentTypeId, int currentStatusId, object userState) {
            if ((this.onBeginRelease_RetrieveWorkflowCustomPropertiesDelegate == null)) {
                this.onBeginRelease_RetrieveWorkflowCustomPropertiesDelegate = new BeginOperationDelegate(this.OnBeginRelease_RetrieveWorkflowCustomProperties);
            }
            if ((this.onEndRelease_RetrieveWorkflowCustomPropertiesDelegate == null)) {
                this.onEndRelease_RetrieveWorkflowCustomPropertiesDelegate = new EndOperationDelegate(this.OnEndRelease_RetrieveWorkflowCustomProperties);
            }
            if ((this.onRelease_RetrieveWorkflowCustomPropertiesCompletedDelegate == null)) {
                this.onRelease_RetrieveWorkflowCustomPropertiesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRelease_RetrieveWorkflowCustomPropertiesCompleted);
            }
            base.InvokeAsync(this.onBeginRelease_RetrieveWorkflowCustomPropertiesDelegate, new object[] {
                        currentTypeId,
                        currentStatusId}, this.onEndRelease_RetrieveWorkflowCustomPropertiesDelegate, this.onRelease_RetrieveWorkflowCustomPropertiesCompletedDelegate, userState);
        }
        
        public void Requirement_AddTestCoverage(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRequirementTestCaseMapping remoteReqTestCaseMapping) {
            base.Channel.Requirement_AddTestCoverage(remoteReqTestCaseMapping);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRequirement_AddTestCoverage(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRequirementTestCaseMapping remoteReqTestCaseMapping, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRequirement_AddTestCoverage(remoteReqTestCaseMapping, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndRequirement_AddTestCoverage(System.IAsyncResult result) {
            base.Channel.EndRequirement_AddTestCoverage(result);
        }
        
        private System.IAsyncResult OnBeginRequirement_AddTestCoverage(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRequirementTestCaseMapping remoteReqTestCaseMapping = ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRequirementTestCaseMapping)(inValues[0]));
            return this.BeginRequirement_AddTestCoverage(remoteReqTestCaseMapping, callback, asyncState);
        }
        
        private object[] OnEndRequirement_AddTestCoverage(System.IAsyncResult result) {
            this.EndRequirement_AddTestCoverage(result);
            return null;
        }
        
        private void OnRequirement_AddTestCoverageCompleted(object state) {
            if ((this.Requirement_AddTestCoverageCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Requirement_AddTestCoverageCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Requirement_AddTestCoverageAsync(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRequirementTestCaseMapping remoteReqTestCaseMapping) {
            this.Requirement_AddTestCoverageAsync(remoteReqTestCaseMapping, null);
        }
        
        public void Requirement_AddTestCoverageAsync(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRequirementTestCaseMapping remoteReqTestCaseMapping, object userState) {
            if ((this.onBeginRequirement_AddTestCoverageDelegate == null)) {
                this.onBeginRequirement_AddTestCoverageDelegate = new BeginOperationDelegate(this.OnBeginRequirement_AddTestCoverage);
            }
            if ((this.onEndRequirement_AddTestCoverageDelegate == null)) {
                this.onEndRequirement_AddTestCoverageDelegate = new EndOperationDelegate(this.OnEndRequirement_AddTestCoverage);
            }
            if ((this.onRequirement_AddTestCoverageCompletedDelegate == null)) {
                this.onRequirement_AddTestCoverageCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRequirement_AddTestCoverageCompleted);
            }
            base.InvokeAsync(this.onBeginRequirement_AddTestCoverageDelegate, new object[] {
                        remoteReqTestCaseMapping}, this.onEndRequirement_AddTestCoverageDelegate, this.onRequirement_AddTestCoverageCompletedDelegate, userState);
        }
        
        public long Requirement_Count(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters) {
            return base.Channel.Requirement_Count(remoteFilters);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRequirement_Count(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRequirement_Count(remoteFilters, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public long EndRequirement_Count(System.IAsyncResult result) {
            return base.Channel.EndRequirement_Count(result);
        }
        
        private System.IAsyncResult OnBeginRequirement_Count(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters = ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[])(inValues[0]));
            return this.BeginRequirement_Count(remoteFilters, callback, asyncState);
        }
        
        private object[] OnEndRequirement_Count(System.IAsyncResult result) {
            long retVal = this.EndRequirement_Count(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRequirement_CountCompleted(object state) {
            if ((this.Requirement_CountCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Requirement_CountCompleted(this, new Requirement_CountCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Requirement_CountAsync(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters) {
            this.Requirement_CountAsync(remoteFilters, null);
        }
        
        public void Requirement_CountAsync(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters, object userState) {
            if ((this.onBeginRequirement_CountDelegate == null)) {
                this.onBeginRequirement_CountDelegate = new BeginOperationDelegate(this.OnBeginRequirement_Count);
            }
            if ((this.onEndRequirement_CountDelegate == null)) {
                this.onEndRequirement_CountDelegate = new EndOperationDelegate(this.OnEndRequirement_Count);
            }
            if ((this.onRequirement_CountCompletedDelegate == null)) {
                this.onRequirement_CountCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRequirement_CountCompleted);
            }
            base.InvokeAsync(this.onBeginRequirement_CountDelegate, new object[] {
                        remoteFilters}, this.onEndRequirement_CountDelegate, this.onRequirement_CountCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRequirement Requirement_Create1(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRequirement remoteRequirement, int indentPosition) {
            return base.Channel.Requirement_Create1(remoteRequirement, indentPosition);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRequirement_Create1(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRequirement remoteRequirement, int indentPosition, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRequirement_Create1(remoteRequirement, indentPosition, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRequirement EndRequirement_Create1(System.IAsyncResult result) {
            return base.Channel.EndRequirement_Create1(result);
        }
        
        private System.IAsyncResult OnBeginRequirement_Create1(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRequirement remoteRequirement = ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRequirement)(inValues[0]));
            int indentPosition = ((int)(inValues[1]));
            return this.BeginRequirement_Create1(remoteRequirement, indentPosition, callback, asyncState);
        }
        
        private object[] OnEndRequirement_Create1(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRequirement retVal = this.EndRequirement_Create1(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRequirement_Create1Completed(object state) {
            if ((this.Requirement_Create1Completed != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Requirement_Create1Completed(this, new Requirement_Create1CompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Requirement_Create1Async(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRequirement remoteRequirement, int indentPosition) {
            this.Requirement_Create1Async(remoteRequirement, indentPosition, null);
        }
        
        public void Requirement_Create1Async(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRequirement remoteRequirement, int indentPosition, object userState) {
            if ((this.onBeginRequirement_Create1Delegate == null)) {
                this.onBeginRequirement_Create1Delegate = new BeginOperationDelegate(this.OnBeginRequirement_Create1);
            }
            if ((this.onEndRequirement_Create1Delegate == null)) {
                this.onEndRequirement_Create1Delegate = new EndOperationDelegate(this.OnEndRequirement_Create1);
            }
            if ((this.onRequirement_Create1CompletedDelegate == null)) {
                this.onRequirement_Create1CompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRequirement_Create1Completed);
            }
            base.InvokeAsync(this.onBeginRequirement_Create1Delegate, new object[] {
                        remoteRequirement,
                        indentPosition}, this.onEndRequirement_Create1Delegate, this.onRequirement_Create1CompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRequirement Requirement_Create2(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRequirement remoteRequirement, System.Nullable<int> parentRequirementId) {
            return base.Channel.Requirement_Create2(remoteRequirement, parentRequirementId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRequirement_Create2(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRequirement remoteRequirement, System.Nullable<int> parentRequirementId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRequirement_Create2(remoteRequirement, parentRequirementId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRequirement EndRequirement_Create2(System.IAsyncResult result) {
            return base.Channel.EndRequirement_Create2(result);
        }
        
        private System.IAsyncResult OnBeginRequirement_Create2(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRequirement remoteRequirement = ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRequirement)(inValues[0]));
            System.Nullable<int> parentRequirementId = ((System.Nullable<int>)(inValues[1]));
            return this.BeginRequirement_Create2(remoteRequirement, parentRequirementId, callback, asyncState);
        }
        
        private object[] OnEndRequirement_Create2(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRequirement retVal = this.EndRequirement_Create2(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRequirement_Create2Completed(object state) {
            if ((this.Requirement_Create2Completed != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Requirement_Create2Completed(this, new Requirement_Create2CompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Requirement_Create2Async(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRequirement remoteRequirement, System.Nullable<int> parentRequirementId) {
            this.Requirement_Create2Async(remoteRequirement, parentRequirementId, null);
        }
        
        public void Requirement_Create2Async(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRequirement remoteRequirement, System.Nullable<int> parentRequirementId, object userState) {
            if ((this.onBeginRequirement_Create2Delegate == null)) {
                this.onBeginRequirement_Create2Delegate = new BeginOperationDelegate(this.OnBeginRequirement_Create2);
            }
            if ((this.onEndRequirement_Create2Delegate == null)) {
                this.onEndRequirement_Create2Delegate = new EndOperationDelegate(this.OnEndRequirement_Create2);
            }
            if ((this.onRequirement_Create2CompletedDelegate == null)) {
                this.onRequirement_Create2CompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRequirement_Create2Completed);
            }
            base.InvokeAsync(this.onBeginRequirement_Create2Delegate, new object[] {
                        remoteRequirement,
                        parentRequirementId}, this.onEndRequirement_Create2Delegate, this.onRequirement_Create2CompletedDelegate, userState);
        }
        
        public void Requirement_RemoveTestCoverage(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRequirementTestCaseMapping remoteReqTestCaseMapping) {
            base.Channel.Requirement_RemoveTestCoverage(remoteReqTestCaseMapping);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRequirement_RemoveTestCoverage(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRequirementTestCaseMapping remoteReqTestCaseMapping, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRequirement_RemoveTestCoverage(remoteReqTestCaseMapping, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndRequirement_RemoveTestCoverage(System.IAsyncResult result) {
            base.Channel.EndRequirement_RemoveTestCoverage(result);
        }
        
        private System.IAsyncResult OnBeginRequirement_RemoveTestCoverage(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRequirementTestCaseMapping remoteReqTestCaseMapping = ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRequirementTestCaseMapping)(inValues[0]));
            return this.BeginRequirement_RemoveTestCoverage(remoteReqTestCaseMapping, callback, asyncState);
        }
        
        private object[] OnEndRequirement_RemoveTestCoverage(System.IAsyncResult result) {
            this.EndRequirement_RemoveTestCoverage(result);
            return null;
        }
        
        private void OnRequirement_RemoveTestCoverageCompleted(object state) {
            if ((this.Requirement_RemoveTestCoverageCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Requirement_RemoveTestCoverageCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Requirement_RemoveTestCoverageAsync(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRequirementTestCaseMapping remoteReqTestCaseMapping) {
            this.Requirement_RemoveTestCoverageAsync(remoteReqTestCaseMapping, null);
        }
        
        public void Requirement_RemoveTestCoverageAsync(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRequirementTestCaseMapping remoteReqTestCaseMapping, object userState) {
            if ((this.onBeginRequirement_RemoveTestCoverageDelegate == null)) {
                this.onBeginRequirement_RemoveTestCoverageDelegate = new BeginOperationDelegate(this.OnBeginRequirement_RemoveTestCoverage);
            }
            if ((this.onEndRequirement_RemoveTestCoverageDelegate == null)) {
                this.onEndRequirement_RemoveTestCoverageDelegate = new EndOperationDelegate(this.OnEndRequirement_RemoveTestCoverage);
            }
            if ((this.onRequirement_RemoveTestCoverageCompletedDelegate == null)) {
                this.onRequirement_RemoveTestCoverageCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRequirement_RemoveTestCoverageCompleted);
            }
            base.InvokeAsync(this.onBeginRequirement_RemoveTestCoverageDelegate, new object[] {
                        remoteReqTestCaseMapping}, this.onEndRequirement_RemoveTestCoverageDelegate, this.onRequirement_RemoveTestCoverageCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRequirement[] Requirement_Retrieve(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters, int startingRow, int numberOfRows) {
            return base.Channel.Requirement_Retrieve(remoteFilters, startingRow, numberOfRows);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRequirement_Retrieve(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters, int startingRow, int numberOfRows, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRequirement_Retrieve(remoteFilters, startingRow, numberOfRows, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRequirement[] EndRequirement_Retrieve(System.IAsyncResult result) {
            return base.Channel.EndRequirement_Retrieve(result);
        }
        
        private System.IAsyncResult OnBeginRequirement_Retrieve(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters = ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[])(inValues[0]));
            int startingRow = ((int)(inValues[1]));
            int numberOfRows = ((int)(inValues[2]));
            return this.BeginRequirement_Retrieve(remoteFilters, startingRow, numberOfRows, callback, asyncState);
        }
        
        private object[] OnEndRequirement_Retrieve(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRequirement[] retVal = this.EndRequirement_Retrieve(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRequirement_RetrieveCompleted(object state) {
            if ((this.Requirement_RetrieveCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Requirement_RetrieveCompleted(this, new Requirement_RetrieveCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Requirement_RetrieveAsync(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters, int startingRow, int numberOfRows) {
            this.Requirement_RetrieveAsync(remoteFilters, startingRow, numberOfRows, null);
        }
        
        public void Requirement_RetrieveAsync(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteFilter[] remoteFilters, int startingRow, int numberOfRows, object userState) {
            if ((this.onBeginRequirement_RetrieveDelegate == null)) {
                this.onBeginRequirement_RetrieveDelegate = new BeginOperationDelegate(this.OnBeginRequirement_Retrieve);
            }
            if ((this.onEndRequirement_RetrieveDelegate == null)) {
                this.onEndRequirement_RetrieveDelegate = new EndOperationDelegate(this.OnEndRequirement_Retrieve);
            }
            if ((this.onRequirement_RetrieveCompletedDelegate == null)) {
                this.onRequirement_RetrieveCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRequirement_RetrieveCompleted);
            }
            base.InvokeAsync(this.onBeginRequirement_RetrieveDelegate, new object[] {
                        remoteFilters,
                        startingRow,
                        numberOfRows}, this.onEndRequirement_RetrieveDelegate, this.onRequirement_RetrieveCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRequirement Requirement_RetrieveById(int requirementId) {
            return base.Channel.Requirement_RetrieveById(requirementId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRequirement_RetrieveById(int requirementId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRequirement_RetrieveById(requirementId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRequirement EndRequirement_RetrieveById(System.IAsyncResult result) {
            return base.Channel.EndRequirement_RetrieveById(result);
        }
        
        private System.IAsyncResult OnBeginRequirement_RetrieveById(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int requirementId = ((int)(inValues[0]));
            return this.BeginRequirement_RetrieveById(requirementId, callback, asyncState);
        }
        
        private object[] OnEndRequirement_RetrieveById(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRequirement retVal = this.EndRequirement_RetrieveById(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRequirement_RetrieveByIdCompleted(object state) {
            if ((this.Requirement_RetrieveByIdCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Requirement_RetrieveByIdCompleted(this, new Requirement_RetrieveByIdCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Requirement_RetrieveByIdAsync(int requirementId) {
            this.Requirement_RetrieveByIdAsync(requirementId, null);
        }
        
        public void Requirement_RetrieveByIdAsync(int requirementId, object userState) {
            if ((this.onBeginRequirement_RetrieveByIdDelegate == null)) {
                this.onBeginRequirement_RetrieveByIdDelegate = new BeginOperationDelegate(this.OnBeginRequirement_RetrieveById);
            }
            if ((this.onEndRequirement_RetrieveByIdDelegate == null)) {
                this.onEndRequirement_RetrieveByIdDelegate = new EndOperationDelegate(this.OnEndRequirement_RetrieveById);
            }
            if ((this.onRequirement_RetrieveByIdCompletedDelegate == null)) {
                this.onRequirement_RetrieveByIdCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRequirement_RetrieveByIdCompleted);
            }
            base.InvokeAsync(this.onBeginRequirement_RetrieveByIdDelegate, new object[] {
                        requirementId}, this.onEndRequirement_RetrieveByIdDelegate, this.onRequirement_RetrieveByIdCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRequirement[] Requirement_RetrieveForOwner() {
            return base.Channel.Requirement_RetrieveForOwner();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRequirement_RetrieveForOwner(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRequirement_RetrieveForOwner(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRequirement[] EndRequirement_RetrieveForOwner(System.IAsyncResult result) {
            return base.Channel.EndRequirement_RetrieveForOwner(result);
        }
        
        private System.IAsyncResult OnBeginRequirement_RetrieveForOwner(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginRequirement_RetrieveForOwner(callback, asyncState);
        }
        
        private object[] OnEndRequirement_RetrieveForOwner(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRequirement[] retVal = this.EndRequirement_RetrieveForOwner(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRequirement_RetrieveForOwnerCompleted(object state) {
            if ((this.Requirement_RetrieveForOwnerCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Requirement_RetrieveForOwnerCompleted(this, new Requirement_RetrieveForOwnerCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Requirement_RetrieveForOwnerAsync() {
            this.Requirement_RetrieveForOwnerAsync(null);
        }
        
        public void Requirement_RetrieveForOwnerAsync(object userState) {
            if ((this.onBeginRequirement_RetrieveForOwnerDelegate == null)) {
                this.onBeginRequirement_RetrieveForOwnerDelegate = new BeginOperationDelegate(this.OnBeginRequirement_RetrieveForOwner);
            }
            if ((this.onEndRequirement_RetrieveForOwnerDelegate == null)) {
                this.onEndRequirement_RetrieveForOwnerDelegate = new EndOperationDelegate(this.OnEndRequirement_RetrieveForOwner);
            }
            if ((this.onRequirement_RetrieveForOwnerCompletedDelegate == null)) {
                this.onRequirement_RetrieveForOwnerCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRequirement_RetrieveForOwnerCompleted);
            }
            base.InvokeAsync(this.onBeginRequirement_RetrieveForOwnerDelegate, null, this.onEndRequirement_RetrieveForOwnerDelegate, this.onRequirement_RetrieveForOwnerCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRequirementTestCaseMapping[] Requirement_RetrieveTestCoverage(int requirementId) {
            return base.Channel.Requirement_RetrieveTestCoverage(requirementId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRequirement_RetrieveTestCoverage(int requirementId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRequirement_RetrieveTestCoverage(requirementId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRequirementTestCaseMapping[] EndRequirement_RetrieveTestCoverage(System.IAsyncResult result) {
            return base.Channel.EndRequirement_RetrieveTestCoverage(result);
        }
        
        private System.IAsyncResult OnBeginRequirement_RetrieveTestCoverage(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int requirementId = ((int)(inValues[0]));
            return this.BeginRequirement_RetrieveTestCoverage(requirementId, callback, asyncState);
        }
        
        private object[] OnEndRequirement_RetrieveTestCoverage(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRequirementTestCaseMapping[] retVal = this.EndRequirement_RetrieveTestCoverage(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRequirement_RetrieveTestCoverageCompleted(object state) {
            if ((this.Requirement_RetrieveTestCoverageCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Requirement_RetrieveTestCoverageCompleted(this, new Requirement_RetrieveTestCoverageCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Requirement_RetrieveTestCoverageAsync(int requirementId) {
            this.Requirement_RetrieveTestCoverageAsync(requirementId, null);
        }
        
        public void Requirement_RetrieveTestCoverageAsync(int requirementId, object userState) {
            if ((this.onBeginRequirement_RetrieveTestCoverageDelegate == null)) {
                this.onBeginRequirement_RetrieveTestCoverageDelegate = new BeginOperationDelegate(this.OnBeginRequirement_RetrieveTestCoverage);
            }
            if ((this.onEndRequirement_RetrieveTestCoverageDelegate == null)) {
                this.onEndRequirement_RetrieveTestCoverageDelegate = new EndOperationDelegate(this.OnEndRequirement_RetrieveTestCoverage);
            }
            if ((this.onRequirement_RetrieveTestCoverageCompletedDelegate == null)) {
                this.onRequirement_RetrieveTestCoverageCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRequirement_RetrieveTestCoverageCompleted);
            }
            base.InvokeAsync(this.onBeginRequirement_RetrieveTestCoverageDelegate, new object[] {
                        requirementId}, this.onEndRequirement_RetrieveTestCoverageDelegate, this.onRequirement_RetrieveTestCoverageCompletedDelegate, userState);
        }
        
        public void Requirement_Update(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRequirement remoteRequirement) {
            base.Channel.Requirement_Update(remoteRequirement);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRequirement_Update(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRequirement remoteRequirement, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRequirement_Update(remoteRequirement, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndRequirement_Update(System.IAsyncResult result) {
            base.Channel.EndRequirement_Update(result);
        }
        
        private System.IAsyncResult OnBeginRequirement_Update(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRequirement remoteRequirement = ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRequirement)(inValues[0]));
            return this.BeginRequirement_Update(remoteRequirement, callback, asyncState);
        }
        
        private object[] OnEndRequirement_Update(System.IAsyncResult result) {
            this.EndRequirement_Update(result);
            return null;
        }
        
        private void OnRequirement_UpdateCompleted(object state) {
            if ((this.Requirement_UpdateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Requirement_UpdateCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Requirement_UpdateAsync(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRequirement remoteRequirement) {
            this.Requirement_UpdateAsync(remoteRequirement, null);
        }
        
        public void Requirement_UpdateAsync(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRequirement remoteRequirement, object userState) {
            if ((this.onBeginRequirement_UpdateDelegate == null)) {
                this.onBeginRequirement_UpdateDelegate = new BeginOperationDelegate(this.OnBeginRequirement_Update);
            }
            if ((this.onEndRequirement_UpdateDelegate == null)) {
                this.onEndRequirement_UpdateDelegate = new EndOperationDelegate(this.OnEndRequirement_Update);
            }
            if ((this.onRequirement_UpdateCompletedDelegate == null)) {
                this.onRequirement_UpdateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRequirement_UpdateCompleted);
            }
            base.InvokeAsync(this.onBeginRequirement_UpdateDelegate, new object[] {
                        remoteRequirement}, this.onEndRequirement_UpdateDelegate, this.onRequirement_UpdateCompletedDelegate, userState);
        }
        
        public void Requirement_Delete(int requirementId) {
            base.Channel.Requirement_Delete(requirementId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRequirement_Delete(int requirementId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRequirement_Delete(requirementId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndRequirement_Delete(System.IAsyncResult result) {
            base.Channel.EndRequirement_Delete(result);
        }
        
        private System.IAsyncResult OnBeginRequirement_Delete(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int requirementId = ((int)(inValues[0]));
            return this.BeginRequirement_Delete(requirementId, callback, asyncState);
        }
        
        private object[] OnEndRequirement_Delete(System.IAsyncResult result) {
            this.EndRequirement_Delete(result);
            return null;
        }
        
        private void OnRequirement_DeleteCompleted(object state) {
            if ((this.Requirement_DeleteCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Requirement_DeleteCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Requirement_DeleteAsync(int requirementId) {
            this.Requirement_DeleteAsync(requirementId, null);
        }
        
        public void Requirement_DeleteAsync(int requirementId, object userState) {
            if ((this.onBeginRequirement_DeleteDelegate == null)) {
                this.onBeginRequirement_DeleteDelegate = new BeginOperationDelegate(this.OnBeginRequirement_Delete);
            }
            if ((this.onEndRequirement_DeleteDelegate == null)) {
                this.onEndRequirement_DeleteDelegate = new EndOperationDelegate(this.OnEndRequirement_Delete);
            }
            if ((this.onRequirement_DeleteCompletedDelegate == null)) {
                this.onRequirement_DeleteCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRequirement_DeleteCompleted);
            }
            base.InvokeAsync(this.onBeginRequirement_DeleteDelegate, new object[] {
                        requirementId}, this.onEndRequirement_DeleteDelegate, this.onRequirement_DeleteCompletedDelegate, userState);
        }
        
        public void Requirement_Move(int requirementId, System.Nullable<int> destinationRequirementId) {
            base.Channel.Requirement_Move(requirementId, destinationRequirementId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRequirement_Move(int requirementId, System.Nullable<int> destinationRequirementId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRequirement_Move(requirementId, destinationRequirementId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndRequirement_Move(System.IAsyncResult result) {
            base.Channel.EndRequirement_Move(result);
        }
        
        private System.IAsyncResult OnBeginRequirement_Move(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int requirementId = ((int)(inValues[0]));
            System.Nullable<int> destinationRequirementId = ((System.Nullable<int>)(inValues[1]));
            return this.BeginRequirement_Move(requirementId, destinationRequirementId, callback, asyncState);
        }
        
        private object[] OnEndRequirement_Move(System.IAsyncResult result) {
            this.EndRequirement_Move(result);
            return null;
        }
        
        private void OnRequirement_MoveCompleted(object state) {
            if ((this.Requirement_MoveCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Requirement_MoveCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Requirement_MoveAsync(int requirementId, System.Nullable<int> destinationRequirementId) {
            this.Requirement_MoveAsync(requirementId, destinationRequirementId, null);
        }
        
        public void Requirement_MoveAsync(int requirementId, System.Nullable<int> destinationRequirementId, object userState) {
            if ((this.onBeginRequirement_MoveDelegate == null)) {
                this.onBeginRequirement_MoveDelegate = new BeginOperationDelegate(this.OnBeginRequirement_Move);
            }
            if ((this.onEndRequirement_MoveDelegate == null)) {
                this.onEndRequirement_MoveDelegate = new EndOperationDelegate(this.OnEndRequirement_Move);
            }
            if ((this.onRequirement_MoveCompletedDelegate == null)) {
                this.onRequirement_MoveCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRequirement_MoveCompleted);
            }
            base.InvokeAsync(this.onBeginRequirement_MoveDelegate, new object[] {
                        requirementId,
                        destinationRequirementId}, this.onEndRequirement_MoveDelegate, this.onRequirement_MoveCompletedDelegate, userState);
        }
        
        public void Requirement_Indent(int requirementId) {
            base.Channel.Requirement_Indent(requirementId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRequirement_Indent(int requirementId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRequirement_Indent(requirementId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndRequirement_Indent(System.IAsyncResult result) {
            base.Channel.EndRequirement_Indent(result);
        }
        
        private System.IAsyncResult OnBeginRequirement_Indent(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int requirementId = ((int)(inValues[0]));
            return this.BeginRequirement_Indent(requirementId, callback, asyncState);
        }
        
        private object[] OnEndRequirement_Indent(System.IAsyncResult result) {
            this.EndRequirement_Indent(result);
            return null;
        }
        
        private void OnRequirement_IndentCompleted(object state) {
            if ((this.Requirement_IndentCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Requirement_IndentCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Requirement_IndentAsync(int requirementId) {
            this.Requirement_IndentAsync(requirementId, null);
        }
        
        public void Requirement_IndentAsync(int requirementId, object userState) {
            if ((this.onBeginRequirement_IndentDelegate == null)) {
                this.onBeginRequirement_IndentDelegate = new BeginOperationDelegate(this.OnBeginRequirement_Indent);
            }
            if ((this.onEndRequirement_IndentDelegate == null)) {
                this.onEndRequirement_IndentDelegate = new EndOperationDelegate(this.OnEndRequirement_Indent);
            }
            if ((this.onRequirement_IndentCompletedDelegate == null)) {
                this.onRequirement_IndentCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRequirement_IndentCompleted);
            }
            base.InvokeAsync(this.onBeginRequirement_IndentDelegate, new object[] {
                        requirementId}, this.onEndRequirement_IndentDelegate, this.onRequirement_IndentCompletedDelegate, userState);
        }
        
        public void Requirement_Outdent(int requirementId) {
            base.Channel.Requirement_Outdent(requirementId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRequirement_Outdent(int requirementId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRequirement_Outdent(requirementId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndRequirement_Outdent(System.IAsyncResult result) {
            base.Channel.EndRequirement_Outdent(result);
        }
        
        private System.IAsyncResult OnBeginRequirement_Outdent(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int requirementId = ((int)(inValues[0]));
            return this.BeginRequirement_Outdent(requirementId, callback, asyncState);
        }
        
        private object[] OnEndRequirement_Outdent(System.IAsyncResult result) {
            this.EndRequirement_Outdent(result);
            return null;
        }
        
        private void OnRequirement_OutdentCompleted(object state) {
            if ((this.Requirement_OutdentCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Requirement_OutdentCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Requirement_OutdentAsync(int requirementId) {
            this.Requirement_OutdentAsync(requirementId, null);
        }
        
        public void Requirement_OutdentAsync(int requirementId, object userState) {
            if ((this.onBeginRequirement_OutdentDelegate == null)) {
                this.onBeginRequirement_OutdentDelegate = new BeginOperationDelegate(this.OnBeginRequirement_Outdent);
            }
            if ((this.onEndRequirement_OutdentDelegate == null)) {
                this.onEndRequirement_OutdentDelegate = new EndOperationDelegate(this.OnEndRequirement_Outdent);
            }
            if ((this.onRequirement_OutdentCompletedDelegate == null)) {
                this.onRequirement_OutdentCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRequirement_OutdentCompleted);
            }
            base.InvokeAsync(this.onBeginRequirement_OutdentDelegate, new object[] {
                        requirementId}, this.onEndRequirement_OutdentDelegate, this.onRequirement_OutdentCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComment[] Requirement_RetrieveComments(int RequirementId) {
            return base.Channel.Requirement_RetrieveComments(RequirementId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRequirement_RetrieveComments(int RequirementId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRequirement_RetrieveComments(RequirementId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComment[] EndRequirement_RetrieveComments(System.IAsyncResult result) {
            return base.Channel.EndRequirement_RetrieveComments(result);
        }
        
        private System.IAsyncResult OnBeginRequirement_RetrieveComments(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int RequirementId = ((int)(inValues[0]));
            return this.BeginRequirement_RetrieveComments(RequirementId, callback, asyncState);
        }
        
        private object[] OnEndRequirement_RetrieveComments(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComment[] retVal = this.EndRequirement_RetrieveComments(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRequirement_RetrieveCommentsCompleted(object state) {
            if ((this.Requirement_RetrieveCommentsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Requirement_RetrieveCommentsCompleted(this, new Requirement_RetrieveCommentsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Requirement_RetrieveCommentsAsync(int RequirementId) {
            this.Requirement_RetrieveCommentsAsync(RequirementId, null);
        }
        
        public void Requirement_RetrieveCommentsAsync(int RequirementId, object userState) {
            if ((this.onBeginRequirement_RetrieveCommentsDelegate == null)) {
                this.onBeginRequirement_RetrieveCommentsDelegate = new BeginOperationDelegate(this.OnBeginRequirement_RetrieveComments);
            }
            if ((this.onEndRequirement_RetrieveCommentsDelegate == null)) {
                this.onEndRequirement_RetrieveCommentsDelegate = new EndOperationDelegate(this.OnEndRequirement_RetrieveComments);
            }
            if ((this.onRequirement_RetrieveCommentsCompletedDelegate == null)) {
                this.onRequirement_RetrieveCommentsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRequirement_RetrieveCommentsCompleted);
            }
            base.InvokeAsync(this.onBeginRequirement_RetrieveCommentsDelegate, new object[] {
                        RequirementId}, this.onEndRequirement_RetrieveCommentsDelegate, this.onRequirement_RetrieveCommentsCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComment Requirement_CreateComment(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComment remoteComment) {
            return base.Channel.Requirement_CreateComment(remoteComment);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRequirement_CreateComment(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComment remoteComment, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRequirement_CreateComment(remoteComment, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComment EndRequirement_CreateComment(System.IAsyncResult result) {
            return base.Channel.EndRequirement_CreateComment(result);
        }
        
        private System.IAsyncResult OnBeginRequirement_CreateComment(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComment remoteComment = ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComment)(inValues[0]));
            return this.BeginRequirement_CreateComment(remoteComment, callback, asyncState);
        }
        
        private object[] OnEndRequirement_CreateComment(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComment retVal = this.EndRequirement_CreateComment(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRequirement_CreateCommentCompleted(object state) {
            if ((this.Requirement_CreateCommentCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Requirement_CreateCommentCompleted(this, new Requirement_CreateCommentCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Requirement_CreateCommentAsync(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComment remoteComment) {
            this.Requirement_CreateCommentAsync(remoteComment, null);
        }
        
        public void Requirement_CreateCommentAsync(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteComment remoteComment, object userState) {
            if ((this.onBeginRequirement_CreateCommentDelegate == null)) {
                this.onBeginRequirement_CreateCommentDelegate = new BeginOperationDelegate(this.OnBeginRequirement_CreateComment);
            }
            if ((this.onEndRequirement_CreateCommentDelegate == null)) {
                this.onEndRequirement_CreateCommentDelegate = new EndOperationDelegate(this.OnEndRequirement_CreateComment);
            }
            if ((this.onRequirement_CreateCommentCompletedDelegate == null)) {
                this.onRequirement_CreateCommentCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRequirement_CreateCommentCompleted);
            }
            base.InvokeAsync(this.onBeginRequirement_CreateCommentDelegate, new object[] {
                        remoteComment}, this.onEndRequirement_CreateCommentDelegate, this.onRequirement_CreateCommentCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRequirementStatus[] Requirement_RetrieveStatuses() {
            return base.Channel.Requirement_RetrieveStatuses();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRequirement_RetrieveStatuses(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRequirement_RetrieveStatuses(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRequirementStatus[] EndRequirement_RetrieveStatuses(System.IAsyncResult result) {
            return base.Channel.EndRequirement_RetrieveStatuses(result);
        }
        
        private System.IAsyncResult OnBeginRequirement_RetrieveStatuses(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginRequirement_RetrieveStatuses(callback, asyncState);
        }
        
        private object[] OnEndRequirement_RetrieveStatuses(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRequirementStatus[] retVal = this.EndRequirement_RetrieveStatuses(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRequirement_RetrieveStatusesCompleted(object state) {
            if ((this.Requirement_RetrieveStatusesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Requirement_RetrieveStatusesCompleted(this, new Requirement_RetrieveStatusesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Requirement_RetrieveStatusesAsync() {
            this.Requirement_RetrieveStatusesAsync(null);
        }
        
        public void Requirement_RetrieveStatusesAsync(object userState) {
            if ((this.onBeginRequirement_RetrieveStatusesDelegate == null)) {
                this.onBeginRequirement_RetrieveStatusesDelegate = new BeginOperationDelegate(this.OnBeginRequirement_RetrieveStatuses);
            }
            if ((this.onEndRequirement_RetrieveStatusesDelegate == null)) {
                this.onEndRequirement_RetrieveStatusesDelegate = new EndOperationDelegate(this.OnEndRequirement_RetrieveStatuses);
            }
            if ((this.onRequirement_RetrieveStatusesCompletedDelegate == null)) {
                this.onRequirement_RetrieveStatusesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRequirement_RetrieveStatusesCompleted);
            }
            base.InvokeAsync(this.onBeginRequirement_RetrieveStatusesDelegate, null, this.onEndRequirement_RetrieveStatusesDelegate, this.onRequirement_RetrieveStatusesCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRequirementType[] Requirement_RetrieveTypes() {
            return base.Channel.Requirement_RetrieveTypes();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRequirement_RetrieveTypes(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRequirement_RetrieveTypes(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRequirementType[] EndRequirement_RetrieveTypes(System.IAsyncResult result) {
            return base.Channel.EndRequirement_RetrieveTypes(result);
        }
        
        private System.IAsyncResult OnBeginRequirement_RetrieveTypes(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginRequirement_RetrieveTypes(callback, asyncState);
        }
        
        private object[] OnEndRequirement_RetrieveTypes(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRequirementType[] retVal = this.EndRequirement_RetrieveTypes(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRequirement_RetrieveTypesCompleted(object state) {
            if ((this.Requirement_RetrieveTypesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Requirement_RetrieveTypesCompleted(this, new Requirement_RetrieveTypesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Requirement_RetrieveTypesAsync() {
            this.Requirement_RetrieveTypesAsync(null);
        }
        
        public void Requirement_RetrieveTypesAsync(object userState) {
            if ((this.onBeginRequirement_RetrieveTypesDelegate == null)) {
                this.onBeginRequirement_RetrieveTypesDelegate = new BeginOperationDelegate(this.OnBeginRequirement_RetrieveTypes);
            }
            if ((this.onEndRequirement_RetrieveTypesDelegate == null)) {
                this.onEndRequirement_RetrieveTypesDelegate = new EndOperationDelegate(this.OnEndRequirement_RetrieveTypes);
            }
            if ((this.onRequirement_RetrieveTypesCompletedDelegate == null)) {
                this.onRequirement_RetrieveTypesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRequirement_RetrieveTypesCompleted);
            }
            base.InvokeAsync(this.onBeginRequirement_RetrieveTypesDelegate, null, this.onEndRequirement_RetrieveTypesDelegate, this.onRequirement_RetrieveTypesCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteWorkflowField[] Requirement_RetrieveWorkflowFields(int currentTypeId, int currentStatusId) {
            return base.Channel.Requirement_RetrieveWorkflowFields(currentTypeId, currentStatusId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRequirement_RetrieveWorkflowFields(int currentTypeId, int currentStatusId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRequirement_RetrieveWorkflowFields(currentTypeId, currentStatusId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteWorkflowField[] EndRequirement_RetrieveWorkflowFields(System.IAsyncResult result) {
            return base.Channel.EndRequirement_RetrieveWorkflowFields(result);
        }
        
        private System.IAsyncResult OnBeginRequirement_RetrieveWorkflowFields(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int currentTypeId = ((int)(inValues[0]));
            int currentStatusId = ((int)(inValues[1]));
            return this.BeginRequirement_RetrieveWorkflowFields(currentTypeId, currentStatusId, callback, asyncState);
        }
        
        private object[] OnEndRequirement_RetrieveWorkflowFields(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteWorkflowField[] retVal = this.EndRequirement_RetrieveWorkflowFields(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRequirement_RetrieveWorkflowFieldsCompleted(object state) {
            if ((this.Requirement_RetrieveWorkflowFieldsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Requirement_RetrieveWorkflowFieldsCompleted(this, new Requirement_RetrieveWorkflowFieldsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Requirement_RetrieveWorkflowFieldsAsync(int currentTypeId, int currentStatusId) {
            this.Requirement_RetrieveWorkflowFieldsAsync(currentTypeId, currentStatusId, null);
        }
        
        public void Requirement_RetrieveWorkflowFieldsAsync(int currentTypeId, int currentStatusId, object userState) {
            if ((this.onBeginRequirement_RetrieveWorkflowFieldsDelegate == null)) {
                this.onBeginRequirement_RetrieveWorkflowFieldsDelegate = new BeginOperationDelegate(this.OnBeginRequirement_RetrieveWorkflowFields);
            }
            if ((this.onEndRequirement_RetrieveWorkflowFieldsDelegate == null)) {
                this.onEndRequirement_RetrieveWorkflowFieldsDelegate = new EndOperationDelegate(this.OnEndRequirement_RetrieveWorkflowFields);
            }
            if ((this.onRequirement_RetrieveWorkflowFieldsCompletedDelegate == null)) {
                this.onRequirement_RetrieveWorkflowFieldsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRequirement_RetrieveWorkflowFieldsCompleted);
            }
            base.InvokeAsync(this.onBeginRequirement_RetrieveWorkflowFieldsDelegate, new object[] {
                        currentTypeId,
                        currentStatusId}, this.onEndRequirement_RetrieveWorkflowFieldsDelegate, this.onRequirement_RetrieveWorkflowFieldsCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteWorkflowTransition[] Requirement_RetrieveWorkflowTransitions(int currentTypeId, int currentStatusId, bool isCreator, bool isOwner) {
            return base.Channel.Requirement_RetrieveWorkflowTransitions(currentTypeId, currentStatusId, isCreator, isOwner);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRequirement_RetrieveWorkflowTransitions(int currentTypeId, int currentStatusId, bool isCreator, bool isOwner, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRequirement_RetrieveWorkflowTransitions(currentTypeId, currentStatusId, isCreator, isOwner, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteWorkflowTransition[] EndRequirement_RetrieveWorkflowTransitions(System.IAsyncResult result) {
            return base.Channel.EndRequirement_RetrieveWorkflowTransitions(result);
        }
        
        private System.IAsyncResult OnBeginRequirement_RetrieveWorkflowTransitions(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int currentTypeId = ((int)(inValues[0]));
            int currentStatusId = ((int)(inValues[1]));
            bool isCreator = ((bool)(inValues[2]));
            bool isOwner = ((bool)(inValues[3]));
            return this.BeginRequirement_RetrieveWorkflowTransitions(currentTypeId, currentStatusId, isCreator, isOwner, callback, asyncState);
        }
        
        private object[] OnEndRequirement_RetrieveWorkflowTransitions(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteWorkflowTransition[] retVal = this.EndRequirement_RetrieveWorkflowTransitions(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRequirement_RetrieveWorkflowTransitionsCompleted(object state) {
            if ((this.Requirement_RetrieveWorkflowTransitionsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Requirement_RetrieveWorkflowTransitionsCompleted(this, new Requirement_RetrieveWorkflowTransitionsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Requirement_RetrieveWorkflowTransitionsAsync(int currentTypeId, int currentStatusId, bool isCreator, bool isOwner) {
            this.Requirement_RetrieveWorkflowTransitionsAsync(currentTypeId, currentStatusId, isCreator, isOwner, null);
        }
        
        public void Requirement_RetrieveWorkflowTransitionsAsync(int currentTypeId, int currentStatusId, bool isCreator, bool isOwner, object userState) {
            if ((this.onBeginRequirement_RetrieveWorkflowTransitionsDelegate == null)) {
                this.onBeginRequirement_RetrieveWorkflowTransitionsDelegate = new BeginOperationDelegate(this.OnBeginRequirement_RetrieveWorkflowTransitions);
            }
            if ((this.onEndRequirement_RetrieveWorkflowTransitionsDelegate == null)) {
                this.onEndRequirement_RetrieveWorkflowTransitionsDelegate = new EndOperationDelegate(this.OnEndRequirement_RetrieveWorkflowTransitions);
            }
            if ((this.onRequirement_RetrieveWorkflowTransitionsCompletedDelegate == null)) {
                this.onRequirement_RetrieveWorkflowTransitionsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRequirement_RetrieveWorkflowTransitionsCompleted);
            }
            base.InvokeAsync(this.onBeginRequirement_RetrieveWorkflowTransitionsDelegate, new object[] {
                        currentTypeId,
                        currentStatusId,
                        isCreator,
                        isOwner}, this.onEndRequirement_RetrieveWorkflowTransitionsDelegate, this.onRequirement_RetrieveWorkflowTransitionsCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteWorkflowCustomProperty[] Requirement_RetrieveWorkflowCustomProperties(int currentTypeId, int currentStatusId) {
            return base.Channel.Requirement_RetrieveWorkflowCustomProperties(currentTypeId, currentStatusId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRequirement_RetrieveWorkflowCustomProperties(int currentTypeId, int currentStatusId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRequirement_RetrieveWorkflowCustomProperties(currentTypeId, currentStatusId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteWorkflowCustomProperty[] EndRequirement_RetrieveWorkflowCustomProperties(System.IAsyncResult result) {
            return base.Channel.EndRequirement_RetrieveWorkflowCustomProperties(result);
        }
        
        private System.IAsyncResult OnBeginRequirement_RetrieveWorkflowCustomProperties(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int currentTypeId = ((int)(inValues[0]));
            int currentStatusId = ((int)(inValues[1]));
            return this.BeginRequirement_RetrieveWorkflowCustomProperties(currentTypeId, currentStatusId, callback, asyncState);
        }
        
        private object[] OnEndRequirement_RetrieveWorkflowCustomProperties(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteWorkflowCustomProperty[] retVal = this.EndRequirement_RetrieveWorkflowCustomProperties(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRequirement_RetrieveWorkflowCustomPropertiesCompleted(object state) {
            if ((this.Requirement_RetrieveWorkflowCustomPropertiesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Requirement_RetrieveWorkflowCustomPropertiesCompleted(this, new Requirement_RetrieveWorkflowCustomPropertiesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Requirement_RetrieveWorkflowCustomPropertiesAsync(int currentTypeId, int currentStatusId) {
            this.Requirement_RetrieveWorkflowCustomPropertiesAsync(currentTypeId, currentStatusId, null);
        }
        
        public void Requirement_RetrieveWorkflowCustomPropertiesAsync(int currentTypeId, int currentStatusId, object userState) {
            if ((this.onBeginRequirement_RetrieveWorkflowCustomPropertiesDelegate == null)) {
                this.onBeginRequirement_RetrieveWorkflowCustomPropertiesDelegate = new BeginOperationDelegate(this.OnBeginRequirement_RetrieveWorkflowCustomProperties);
            }
            if ((this.onEndRequirement_RetrieveWorkflowCustomPropertiesDelegate == null)) {
                this.onEndRequirement_RetrieveWorkflowCustomPropertiesDelegate = new EndOperationDelegate(this.OnEndRequirement_RetrieveWorkflowCustomProperties);
            }
            if ((this.onRequirement_RetrieveWorkflowCustomPropertiesCompletedDelegate == null)) {
                this.onRequirement_RetrieveWorkflowCustomPropertiesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRequirement_RetrieveWorkflowCustomPropertiesCompleted);
            }
            base.InvokeAsync(this.onBeginRequirement_RetrieveWorkflowCustomPropertiesDelegate, new object[] {
                        currentTypeId,
                        currentStatusId}, this.onEndRequirement_RetrieveWorkflowCustomPropertiesDelegate, this.onRequirement_RetrieveWorkflowCustomPropertiesCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRequirementStep[] Requirement_RetrieveSteps(int requirementId) {
            return base.Channel.Requirement_RetrieveSteps(requirementId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRequirement_RetrieveSteps(int requirementId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRequirement_RetrieveSteps(requirementId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRequirementStep[] EndRequirement_RetrieveSteps(System.IAsyncResult result) {
            return base.Channel.EndRequirement_RetrieveSteps(result);
        }
        
        private System.IAsyncResult OnBeginRequirement_RetrieveSteps(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int requirementId = ((int)(inValues[0]));
            return this.BeginRequirement_RetrieveSteps(requirementId, callback, asyncState);
        }
        
        private object[] OnEndRequirement_RetrieveSteps(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRequirementStep[] retVal = this.EndRequirement_RetrieveSteps(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRequirement_RetrieveStepsCompleted(object state) {
            if ((this.Requirement_RetrieveStepsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Requirement_RetrieveStepsCompleted(this, new Requirement_RetrieveStepsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Requirement_RetrieveStepsAsync(int requirementId) {
            this.Requirement_RetrieveStepsAsync(requirementId, null);
        }
        
        public void Requirement_RetrieveStepsAsync(int requirementId, object userState) {
            if ((this.onBeginRequirement_RetrieveStepsDelegate == null)) {
                this.onBeginRequirement_RetrieveStepsDelegate = new BeginOperationDelegate(this.OnBeginRequirement_RetrieveSteps);
            }
            if ((this.onEndRequirement_RetrieveStepsDelegate == null)) {
                this.onEndRequirement_RetrieveStepsDelegate = new EndOperationDelegate(this.OnEndRequirement_RetrieveSteps);
            }
            if ((this.onRequirement_RetrieveStepsCompletedDelegate == null)) {
                this.onRequirement_RetrieveStepsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRequirement_RetrieveStepsCompleted);
            }
            base.InvokeAsync(this.onBeginRequirement_RetrieveStepsDelegate, new object[] {
                        requirementId}, this.onEndRequirement_RetrieveStepsDelegate, this.onRequirement_RetrieveStepsCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRequirementStep Requirement_RetrieveStepById(int requirementStepId) {
            return base.Channel.Requirement_RetrieveStepById(requirementStepId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRequirement_RetrieveStepById(int requirementStepId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRequirement_RetrieveStepById(requirementStepId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRequirementStep EndRequirement_RetrieveStepById(System.IAsyncResult result) {
            return base.Channel.EndRequirement_RetrieveStepById(result);
        }
        
        private System.IAsyncResult OnBeginRequirement_RetrieveStepById(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int requirementStepId = ((int)(inValues[0]));
            return this.BeginRequirement_RetrieveStepById(requirementStepId, callback, asyncState);
        }
        
        private object[] OnEndRequirement_RetrieveStepById(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRequirementStep retVal = this.EndRequirement_RetrieveStepById(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRequirement_RetrieveStepByIdCompleted(object state) {
            if ((this.Requirement_RetrieveStepByIdCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Requirement_RetrieveStepByIdCompleted(this, new Requirement_RetrieveStepByIdCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Requirement_RetrieveStepByIdAsync(int requirementStepId) {
            this.Requirement_RetrieveStepByIdAsync(requirementStepId, null);
        }
        
        public void Requirement_RetrieveStepByIdAsync(int requirementStepId, object userState) {
            if ((this.onBeginRequirement_RetrieveStepByIdDelegate == null)) {
                this.onBeginRequirement_RetrieveStepByIdDelegate = new BeginOperationDelegate(this.OnBeginRequirement_RetrieveStepById);
            }
            if ((this.onEndRequirement_RetrieveStepByIdDelegate == null)) {
                this.onEndRequirement_RetrieveStepByIdDelegate = new EndOperationDelegate(this.OnEndRequirement_RetrieveStepById);
            }
            if ((this.onRequirement_RetrieveStepByIdCompletedDelegate == null)) {
                this.onRequirement_RetrieveStepByIdCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRequirement_RetrieveStepByIdCompleted);
            }
            base.InvokeAsync(this.onBeginRequirement_RetrieveStepByIdDelegate, new object[] {
                        requirementStepId}, this.onEndRequirement_RetrieveStepByIdDelegate, this.onRequirement_RetrieveStepByIdCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRequirementStep Requirement_AddStep(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRequirementStep remoteRequirementStep, System.Nullable<int> existingRequirementStepId, System.Nullable<int> creatorId) {
            return base.Channel.Requirement_AddStep(remoteRequirementStep, existingRequirementStepId, creatorId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRequirement_AddStep(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRequirementStep remoteRequirementStep, System.Nullable<int> existingRequirementStepId, System.Nullable<int> creatorId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRequirement_AddStep(remoteRequirementStep, existingRequirementStepId, creatorId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRequirementStep EndRequirement_AddStep(System.IAsyncResult result) {
            return base.Channel.EndRequirement_AddStep(result);
        }
        
        private System.IAsyncResult OnBeginRequirement_AddStep(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRequirementStep remoteRequirementStep = ((Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRequirementStep)(inValues[0]));
            System.Nullable<int> existingRequirementStepId = ((System.Nullable<int>)(inValues[1]));
            System.Nullable<int> creatorId = ((System.Nullable<int>)(inValues[2]));
            return this.BeginRequirement_AddStep(remoteRequirementStep, existingRequirementStepId, creatorId, callback, asyncState);
        }
        
        private object[] OnEndRequirement_AddStep(System.IAsyncResult result) {
            Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRequirementStep retVal = this.EndRequirement_AddStep(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRequirement_AddStepCompleted(object state) {
            if ((this.Requirement_AddStepCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Requirement_AddStepCompleted(this, new Requirement_AddStepCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Requirement_AddStepAsync(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRequirementStep remoteRequirementStep, System.Nullable<int> existingRequirementStepId, System.Nullable<int> creatorId) {
            this.Requirement_AddStepAsync(remoteRequirementStep, existingRequirementStepId, creatorId, null);
        }
        
        public void Requirement_AddStepAsync(Inflectra.SpiraTest.AddOns.TestLinkImporter.SpiraSoapService.RemoteRequirementStep remoteRequirementStep, System.Nullable<int> existingRequirementStepId, System.Nullable<int> creatorId, object userState) {
            if ((this.onBeginRequirement_AddStepDelegate == null)) {
                this.onBeginRequirement_AddStepDelegate = new BeginOperationDelegate(this.OnBeginRequirement_AddStep);
            }
            if ((this.onEndRequirement_AddStepDelegate == null)) {
                this.onEndRequirement_AddStepDelegate = new EndOperationDelegate(this.OnEndRequirement_AddStep);
            }
            if ((this.onRequirement_AddStepCompletedDelegate == null)) {
                this.onRequirement_AddStepCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRequirement_AddStepCompleted);
            }
            base.InvokeAsync(this.onBeginRequirement_AddStepDelegate, new object[] {
                        remoteRequirementStep,
                        existingRequirementStepId,
                        creatorId}, this.onEndRequirement_AddStepDelegate, this.onRequirement_AddStepCompletedDelegate, userState);
        }
    }
}
